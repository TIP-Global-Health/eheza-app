<?php

/**
 * @file
 * Code for the Sensors pusher feature.
 */

/**
 * Trigger a Pusher event.
 *
 * @param string $channel_name
 *   The channel na,e.
 * @param string $event_name
 *   The event name.
 * @param array $data
 *   The data to transmit.
 *
 * @throws \PusherException
 * @throws \RestfulServerConfigurationException
 *
 * @return bool
 *   The return value of the Pusher trigger action.
 */
function sensors_pusher_trigger_event($channel_name, $event_name, array $data = array()) {
  $pusher = sensors_pusher_get_pusher();
  return $pusher->trigger($channel_name, $event_name, $data);
}

/**
 * Get a Pusher instance.
 *
 * @return \Pusher
 *   The Pusher object.
 *
 * @throws \Exception
 */
function sensors_pusher_get_pusher() {
  $pusher = &drupal_static(__FUNCTION__);
  if ($pusher) {
    return $pusher;
  }

  $app_key = variable_get('sensors_pusher_app_key');
  $app_secret = variable_get('sensors_pusher_app_secret');
  $app_id = variable_get('sensors_pusher_app_id');
  $app_cluster = variable_get('sensors_pusher_app_cluster');

  if (empty($app_key) || empty($app_secret) || empty($app_id) || empty($app_cluster)) {
    throw new Exception('Pusher app is not configured properly.');
  }

  $options = [
    'cluster' => $app_cluster,
    'encrypted' => TRUE,
  ];

  return new Pusher($app_key, $app_secret, $app_id, $options);
}
