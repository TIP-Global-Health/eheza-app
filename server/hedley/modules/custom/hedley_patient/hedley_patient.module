<?php

/**
 * @file
 * Code for the Hedley Patient feature.
 */

include_once 'hedley_patient.features.inc';

define('HEDLEY_PATIENT_EDUCATION_NONE', 0);
define('HEDLEY_PATIENT_EDUCATION_PRIMARY', 1);
define('HEDLEY_PATIENT_EDUCATION_VOCATIONAL', 2);
define('HEDLEY_PATIENT_EDUCATION_SECONDARY', 3);
define('HEDLEY_PATIENT_EDUCATION_DIPLOMA', 4);
define('HEDLEY_PATIENT_EDUCATION_UNIVERSITY', 5);
define('HEDLEY_PATIENT_EDUCATION_ADVANCED', 6);

/**
 * Implements hook_menu().
 */
function hedley_patient_menu() {
  $items = [];

  $items['admin/content/consolidate-patients'] = [
    'type' => MENU_LOCAL_TASK,
    'title' => 'Consolidate Patients',
    'description' => 'Consolidate original patient with its duplicate',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['hedley_patient_consolidate_patients_form'],
    'access callback' => 'hedley_admin_administrators_access',
    'weight' => 2,
  ];

  return $items;
}

/**
 * Implements hook_user_login().
 *
 * Performs redirect for user with Data Manager or
 * Statistical Queries Manager role.
 */
function hedley_patient_user_login(&$edit, $account) {
  $data_mananger_role = user_role_load_by_name('Data Manager');
  $statistical_queries_manager_role = user_role_load_by_name('Statistical Queries Manager');
  if (user_has_role($data_mananger_role->rid, $account)) {
    // Path of Aggregated NCDA report page.
    $path = 'admin/reports/aggregated-ncda';
  }
  elseif (user_has_role($statistical_queries_manager_role->rid, $account)) {
    // Path of Statistical Queries page.
    $path = 'admin/reports/statistical-queries';
  }
  else {
    return;
  }

  // Execute redirect.
  // The 'Location' HTTP header must be absolute.
  $options['absolute'] = TRUE;
  $url = url($path, $options);

  header('Location: ' . $url, TRUE, 302);
  // The "Location" header sends a redirect status code to the HTTP daemon. In
  // some cases this can be wrong, so we make sure none other code
  // gets executed upon redirection.
  drupal_exit($url);
}

/**
 * Implements hook_node_insert().
 */
function hedley_patient_node_insert($node) {
  if ($node->type != 'pmtct_participant') {
    return;
  }

  if (isset($node->imported)) {
    // No need to run recalculations for person during import.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  hedley_patient_recalculate_shards_for_person($wrapper->field_person->getIdentifier());
  hedley_patient_recalculate_shards_for_person($wrapper->field_adult->getIdentifier());
}

/**
 * Implements hook_node_update().
 */
function hedley_patient_node_update($node) {
  if ($node->type != 'person') {
    return;
  }

  $wrapper_orig = entity_metadata_wrapper('node', $node->original);
  $shards_orig = $wrapper_orig->field_shards->value(['identifier' => TRUE]);

  if (empty($shards_orig)) {
    // Having empty shards on update is a sign for person creation during
    // patients import process. Therefore, know there's no content to
    // recalculate shards for.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $shards = $wrapper->field_shards->value(['identifier' => TRUE]);

  if (hedley_patient_arrays_equal($shards, $shards_orig)) {
    return;
  }

  hedley_patient_recalculate_shards_for_person_content($node->nid);
}

/**
 * Recalculate and potentially update shard assignments for person.
 *
 * @param int $nid
 *   The node ID of a person to recalculate for.
 *
 * @throws \EntityMetadataWrapperException
 */
function hedley_patient_recalculate_shards_for_person($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);
  $current_shards = $wrapper->field_shards->value(['identifier' => TRUE]);

  // Figure out what the shards for this person ought to be.
  $shards = hedley_patient_shards_for_person_by_pmtct_participants($nid);

  if (hedley_patient_arrays_equal($shards, $current_shards)) {
    return;
  }

  $wrapper->field_shards->set($shards);
  $wrapper->save();
}

/**
 * Recalculate and potentially update shard assignments for person content.
 *
 * Cycle through the sharded entities for the person and update
 * those that do not match, so that they will get sent to the right devices.
 *
 * @param int $person_id
 *   The node ID of a person to recalculate for.
 *
 * @throws \EntityMetadataWrapperException
 */
function hedley_patient_recalculate_shards_for_person_content($person_id) {
  $wrapper = entity_metadata_wrapper('node', $person_id);
  $person_shards = $wrapper->field_shards->value(['identifier' => TRUE]);

  // On first step, we fetch all content that is associated with person
  // using person, adult and related_to fields.
  // These are group and individual measurements, relationships,
  // and group and individual participants.
  $association_fields = [
    'field_person',
    'field_adult',
    'field_related_to',
  ];
  $entries = hedley_general_get_person_content_associated_by_fields($person_id, $association_fields);

  $ids = $individual_participants = [];
  foreach ($entries as $entry) {
    $ids[] = $entry->entity_id;
    if ($entry->bundle == 'individual_participant') {
      $individual_participants[] = $entry->entity_id;
    }
  }

  // On second step, we fetch all content that is associated with person
  // by individual_participant field.
  // These are individual encounters - antenatal, nutrition, ...
  if (!empty($individual_participants)) {
    $query = hedley_general_create_db_select_query_excluding_deleted();
    $query->join('field_data_field_individual_participant', 'ip', 'ip.entity_id = n.nid');

    // Limit to individual participants we're interested in.
    $query->condition('ip.field_individual_participant_target_id', $individual_participants);
    $query->addField('n', 'nid');

    $ids = array_merge($ids, $query->execute()->fetchCol());
  }

  if (empty($ids)) {
    return;
  }

  $nodes = node_load_multiple($ids);
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);
    $node_shards = $wrapper->field_shards->value(['identifier' => TRUE]);

    if (!hedley_patient_arrays_equal($person_shards, $node_shards)) {
      $wrapper->field_shards->set($person_shards);
      $wrapper->save();
    }
  }
}

/**
 * Which shards should a person's measurements be sent to?
 *
 * @param int $nid
 *   The node ID of the person.
 *
 * @return array
 *   An array of shard ID's.
 */
function hedley_patient_shards_for_person_by_pmtct_participants($nid) {
  $shard_by_health_center = hedley_general_shard_by_health_center($nid);
  $shards = !empty($shard_by_health_center) ? [$shard_by_health_center] : [];

  $pmtct_participants_ids = hedley_person_pmtct_participants_for_person($nid);
  if (!empty($pmtct_participants_ids)) {
    $pmtct_participants = node_load_multiple($pmtct_participants_ids);
    foreach ($pmtct_participants as $pmtct_participant) {
      $wrapper = entity_metadata_wrapper('node', $pmtct_participant);
      $clinic_id = $wrapper->field_clinic->getIdentifier();
      $shard = hedley_general_shard_by_health_center($clinic_id);
      if (!empty($shard)) {
        $shards[] = $shard;
      }
    }
  }

  return array_unique($shards);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Add to a query which needs to get all entities without a 'field_relationship'
 * value (is null).
 */
function hedley_patient_query_exclude_existing_relationships_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_relationship', 'r', 'node.nid = r.entity_id');
  $query->isNull('r.field_relationship_value');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function hedley_patient_form_mother_node_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = 'hedley_patient_mother_birth_date_validation';

  $params = drupal_get_query_parameters();

  if (!isset($params['type']) || $params['type'] != 'caregiver') {
    $form['field_relationship'][LANGUAGE_NONE]['#default_value'] = ['mother'];
    return;
  }

  $form['field_relationship'][LANGUAGE_NONE]['#default_value'] = ['caregiver'];
}

/**
 * Validation callback for mother node form.
 *
 * When the mother node is a caregiver, date of birth is not required.
 */
function hedley_patient_mother_birth_date_validation($form, &$form_state) {
  $relationship_value = $form_state['values']['field_relationship'][LANGUAGE_NONE][0]['value'];
  $birth_date_value = $form_state['values']['field_date_birth'][LANGUAGE_NONE][0]['value'];

  if ($relationship_value == 'mother' && empty($birth_date_value)) {
    form_set_error('field_date_birth', t('The date of birth field is required when adding a mother.'));
  }
}

/**
 * Checks if array1 is equal to array2.
 *
 * Equal means that both have same number of elements, and all elements
 * at array1 also appear at array2.
 *
 * @param array $array1
 *   First array.
 * @param array $array2
 *   Second array.
 *
 * @return bool
 *   True, if array1 is equal to array2.
 */
function hedley_patient_arrays_equal(array $array1, array $array2) {
  return count($array1) == count($array2) && empty(array_diff($array1, $array2));
}

/**
 * Patients consolidation form.
 *
 * Shows dynamic content, based on step we're at.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   Form array.
 */
function hedley_patient_consolidate_patients_form(array $form, array &$form_state) {
  if (empty($form_state['storage'])) {
    return hedley_patient_get_data_form($form, $form_state);
  }

  switch ($form_state['storage']['step']) {
    case 'confirmation':
      return hedley_patient_consolidate_patients_confirmation_form($form, $form_state);

    case 'summary':
      return hedley_patient_consolidate_patients_summary_form($form, $form_state);
  }
}

/**
 * Patients consolidation form - step 1.
 *
 * Presents input for original and duplicate patient node IDs.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   Form array.
 */
function hedley_patient_get_data_form(array $form, array &$form_state) {
  $form['#prefix'] = '<div id="get-data-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE;

  $form['original'] = [
    '#type' => 'textfield',
    '#title' => t('ID of the original patient'),
    '#required' => TRUE,
  ];

  $form['duplicate'] = [
    '#type' => 'textfield',
    '#title' => t('ID of the duplicate patient'),
    '#required' => TRUE,
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Validate'),
    '#submit' => ['hedley_patient_consolidate_patients_validate'],
    '#limit_validation_errors' => [],
    '#ajax' => [
      'wrapper' => 'get-data-form-wrapper',
      'callback' => 'hedley_patient_consolidate_patients_form_callback',
      'effect' => 'fade',
    ],
  ];

  return $form;
}

/**
 * Import form AJAX callback.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   The form.
 */
function hedley_patient_consolidate_patients_form_callback(array $form, array &$form_state) {
  return $form;
}

// Loading validate() and execute() functions.
module_load_include('inc', 'hedley_patient', 'hedley_patient.drush');

/**
 * Executes validation checks before patients consolidation.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_patient_consolidate_patients_validate(array $form, array &$form_state) {
  $original = $form['original']['#value'];
  $duplicate = $form['duplicate']['#value'];
  // Executing function from hedley_patient.drush.inc.
  $result = _consolidate_patients_validate($original, $duplicate);
  $form_state['storage']['original'] = $original;
  $form_state['storage']['duplicate'] = $duplicate;
  $form_state['storage']['messages'] = $result['messages'];
  $form_state['storage']['step'] = $result['success'] ? 'confirmation' : 'summary';
  $form_state['rebuild'] = TRUE;
}

/**
 * Patients consolidation form - step 2.
 *
 * Confirmation form for consolidation execution, or canceling operation.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   Form array.
 */
function hedley_patient_consolidate_patients_confirmation_form(array $form, array &$form_state) {
  $form['#prefix'] = '<div id="confirmation-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE;

  $message = '';
  foreach ($form_state['storage']['messages'] as $line) {
    $message .= "<div>$line</div>";
  }

  $original_info = hedley_patient_generate_consolidated_patient_info($form_state['storage']['original']);
  $duplicate_info = hedley_patient_generate_consolidated_patient_info($form_state['storage']['duplicate']);
  $message .= '<br>';
  $message .= '<div>' . t('Original patient: @original_info', ['@original_info' => $original_info]) . '</div>';
  $message .= '<div>' . t('Duplicate patient: @duplicate_info', ['@duplicate_info' => $duplicate_info]) . '</div>';
  $message .= '<br>';

  $form['message'] = [
    '#markup' => $message,
    '#type' => 'item',
  ];

  $form['actions']['submit'] = [
    '#type'   => 'submit',
    '#value'  => t('Consolidate'),
    '#submit' => ['hedley_patient_consolidate_patients_execute'],
    '#limit_validation_errors' => [],
  ];

  $form['actions']['cancel'] = [
    '#type'   => 'submit',
    '#value'  => t('Cancel'),
    '#submit' => ['hedley_patient_consolidate_patients_reset'],
    '#limit_validation_errors' => [],
  ];

  return $form;
}

/**
 * Executes consolidation for a pair of patients.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_patient_consolidate_patients_execute(array $form, array &$form_state) {
  $original = $form_state['storage']['original'];
  $duplicate = $form_state['storage']['duplicate'];
  // Executing function from hedley_patient.drush.inc.
  $messages = _consolidate_patients_execute($original, $duplicate);
  $form_state['storage']['messages'] = $messages;
  $form_state['storage']['step'] = 'summary';
  $form_state['rebuild'] = TRUE;
}

/**
 * Patients consolidation form - step 3.
 *
 * Presents summary for result of validation errors or consolidation execution.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 *
 * @return array
 *   Form array.
 */
function hedley_patient_consolidate_patients_summary_form(array $form, array &$form_state) {
  $message = '';
  foreach ($form_state['storage']['messages'] as $line) {
    $message .= "<div>$line</div>";
  }

  $form['message'] = [
    '#markup' => $message,
    '#type' => 'item',
  ];

  $form['actions']['submit'] = [
    '#type'   => 'submit',
    '#value'  => t('Ok'),
    '#submit' => ['hedley_patient_consolidate_patients_reset'],
    '#limit_validation_errors' => [],
  ];

  return $form;
}

/**
 * Reset form execution.
 *
 * Used for confirmation decline ('No' button), and summary 'Ok' submit.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The form state.
 */
function hedley_patient_consolidate_patients_reset(array $form, array &$form_state) {
  $form_state['storage'] = [];
  $form_state['rebuild'] = TRUE;
}

/**
 * Generate patient information from a node.
 *
 * This function loads a node with the given node ID and retrieves the patient's
 * name and birth date information. It then formats and returns a string
 * containing the patient's name and birth date in a readable format.
 *
 * @param int $nid
 *   The node ID of the patient's record.
 *
 * @return string
 *   A formatted string containing patient information, including the patient's
 *   name and birth date.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_patient_generate_consolidated_patient_info($nid) {
  $node = node_load($nid);
  $name = hedley_person_get_paitent_name($node);
  $wrapper = entity_metadata_wrapper('node', $node);
  $birth_date = date("Y-m-d", $wrapper->field_birth_date->value());
  return t('Name: @name, Birth date: @birth_date', ['@name' => $name, '@birth_date' => $birth_date]);
}
