<?php

/**
 * @file
 * Test Z-Score calculations.
 */

/**
 * HedleyZScore calculation tests.
 */
class HedleyZScoreCalculation extends DrupalWebTestCase {

  /**
   * Info hook.
   */
  public static function getInfo() {
    return [
      'name' => 'HedleyZScoreCalculation tests',
      'description' => 'Tests Z-Score calculations.',
      'group' => 'Hedley',
    ];
  }

  /**
   * A representation of the test cases.
   *
   * The idea is that we can copy & paste this into the Elm frontend tests as
   * well, with very simple changes.  (What here is an array is a tuple5 in
   * Elm).
   */
  public function zScoreCalculationData() {
    return [
      ['lfa', 0, 'male', 40.1, -5.17],
      ['lfa', 0, 'male', 44.1, -3.06],
      ['lfa', 0, 'male', 46.0, -2.05],
      ['lfa', 0, 'male', 47.9, -1.05],
      ['lfa', 0, 'male', 49.5, -0.20],
      ['lfa', 0, 'male', 51.6, 0.91],
      ['lfa', 0, 'male', 53.6, 1.96],
      ['lfa', 0, 'male', 54.0, 2.17],
      ['lfa', 0, 'male', 56.0, 3.23],

      ['lfa', 440, 'male', 44, -13.82],
      ['lfa', 440, 'male', 69, -3.82],
      ['lfa', 440, 'male', 72, -2.62],
      ['lfa', 440, 'male', 74, -1.82],
      ['lfa', 440, 'male', 77, -0.62],
      ['lfa', 440, 'male', 80, 0.58],
      ['lfa', 440, 'male', 82, 1.38],
      ['lfa', 440, 'male', 84, 2.18],
      ['lfa', 440, 'male', 87, 3.38],

      ['lfa', 30000, 'male', 234, NULL],

      ['lfa', 0, 'female', 40, -4.91],
      ['lfa', 0, 'female', 42, -3.84],
      ['lfa', 0, 'female', 44, -2.76],
      ['lfa', 0, 'female', 46, -1.69],
      ['lfa', 0, 'female', 48, -0.61],
      ['lfa', 0, 'female', 50, 0.46],
      ['lfa', 0, 'female', 52, 1.53],
      ['lfa', 0, 'female', 54, 2.60],
      ['lfa', 0, 'female', 56, 3.68],

      ['lfa', 440, 'female', 65, -4.39],
      ['lfa', 440, 'female', 67, -3.65],
      ['lfa', 440, 'female', 69, -2.92],
      ['lfa', 440, 'female', 72, -1.81],
      ['lfa', 440, 'female', 75, -0.70],
      ['lfa', 440, 'female', 78, 0.41],
      ['lfa', 440, 'female', 80, 1.14],
      ['lfa', 440, 'female', 83, 2.25],
      ['lfa', 440, 'female', 86, 3.36],

      ['lfa', 30000, 'female', 234, NULL],

      ['wfa', 0, 'male', 1.5, -4.53],
      ['wfa', 0, 'male', 2.0, -3.21],
      ['wfa', 0, 'male', 2.4, -2.15],
      ['wfa', 0, 'male', 2.8, -1.18],
      ['wfa', 0, 'male', 3.3, -0.10],
      ['wfa', 0, 'male', 3.8, 0.89],
      ['wfa', 0, 'male', 4.4, 1.97],
      ['wfa', 0, 'male', 5.0, 2.95],
      ['wfa', 0, 'male', 5.6, 3.93],

      ['wfa', 440, 'male', 6, -4.52],
      ['wfa', 440, 'male', 7, -3.36],
      ['wfa', 440, 'male', 8, -2.19],
      ['wfa', 440, 'male', 9, -1.13],
      ['wfa', 440, 'male', 10, -0.17],
      ['wfa', 440, 'male', 11, 0.69],
      ['wfa', 440, 'male', 12, 1.49],
      ['wfa', 440, 'male', 14, 2.91],
      ['wfa', 440, 'male', 15, 3.59],

      ['wfa', 30000, 'male', 234, NULL],

      ['wfa', 0, 'female', 1.6, -4.20],
      ['wfa', 0, 'female', 2.0, -3.09],
      ['wfa', 0, 'female', 2.3, -2.25],
      ['wfa', 0, 'female', 2.7, -1.23],
      ['wfa', 0, 'female', 3.2, -0.07],
      ['wfa', 0, 'female', 3.7, 0.98],
      ['wfa', 0, 'female', 4.2, 1.94],
      ['wfa', 0, 'female', 4.7, 2.84],
      ['wfa', 0, 'female', 5.3, 3.90],

      ['wfa', 440, 'female', 5, -5.05],
      ['wfa', 440, 'female', 6, -3.81],
      ['wfa', 440, 'female', 7, -2.56],
      ['wfa', 440, 'female', 8, -1.41],
      ['wfa', 440, 'female', 9, -0.43],
      ['wfa', 440, 'female', 10, 0.43],
      ['wfa', 440, 'female', 12, 1.86],
      ['wfa', 440, 'female', 13, 2.47],
      ['wfa', 440, 'female', 14, 3.03],

      ['wfa', 30000, 'female', 234, NULL],

      ['wfl', 45, 'male', 1.7, -4.06],
      ['wfl', 45, 'male', 1.8, -3.46],
      ['wfl', 45, 'male', 2.0, -2.25],
      ['wfl', 45, 'male', 2.2, -1.15],
      ['wfl', 45, 'male', 2.4, -0.18],
      ['wfl', 45, 'male', 2.6, 0.68],
      ['wfl', 45, 'male', 2.9, 1.82],
      ['wfl', 45, 'male', 3.2, 2.81],
      ['wfl', 45, 'male', 3.5, 3.77],

      ['wfl', 98.6, 'male', 10.77, -4.01],
      ['wfl', 98.6, 'male', 11.69, -3.01],
      ['wfl', 98.6, 'male', 12.62, -2.00],
      ['wfl', 98.6, 'male', 13.64, -1.01],
      ['wfl', 98.6, 'male', 14.78, -0.01],
      ['wfl', 98.6, 'male', 16.06, 1.00],
      ['wfl', 98.6, 'male', 17.48, 1.99],
      ['wfl', 98.6, 'male', 19.09, 3.00],
      ['wfl', 98.6, 'male', 20.60, 3.94],

      ['wfl', 30000, 'male', 234, NULL],

      ['wfl', 45, 'female', 1.7, -4.22],
      ['wfl', 45, 'female', 1.9, -3.01],
      ['wfl', 45, 'female', 2.0, -2.39],
      ['wfl', 45, 'female', 2.2, -1.27],
      ['wfl', 45, 'female', 2.4, -0.27],
      ['wfl', 45, 'female', 2.6, 0.60],
      ['wfl', 45, 'female', 2.9, 1.76],
      ['wfl', 45, 'female', 3.2, 2.77],
      ['wfl', 45, 'female', 3.5, 3.73],

      ['wfl', 98.6, 'female', 10.33, -4.00],
      ['wfl', 98.6, 'female', 11.31, -3.01],
      ['wfl', 98.6, 'female', 12.29, -2.01],
      ['wfl', 98.6, 'female', 13.40, -1.00],
      ['wfl', 98.6, 'female', 14.64, 0.00],
      ['wfl', 98.6, 'female', 16.04, 0.99],
      ['wfl', 98.6, 'female', 17.66, 2.00],
      ['wfl', 98.6, 'female', 19.49, 3.00],
      ['wfl', 98.6, 'female', 21.33, 4.00],

      ['wfl', 30000, 'female', 234, NULL],
    ];
  }

  /**
   * Like assertEqual, but with a delta.
   */
  public function assertSimilar($result, $expected, $case) {
    $explanation = implode(", ", $case);

    $diff = abs($result - $expected);
    $this->assertTrue($diff < 0.01, "$explanation -- expected: $expected, result: $result");
  }

  /**
   * Entry point for the test.
   */
  public function testZscoreCalculations() {
    foreach ($this->zScoreCalculationData() as $case) {
      $func = $case[0];
      $scale = $case[1];
      $gender = $case[2];
      $measurement = $case[3];
      $expected = $case[4];

      switch ($func) {
        case 'lfa':
          $result = hedley_zscore_length_for_age($scale, $gender, $measurement);
          $this->assertSimilar($result, $expected, $case);
          break;

        case 'wfa':
          $result = hedley_zscore_weight_for_age($scale, $gender, $measurement);
          $this->assertSimilar($result, $expected, $case);
          break;

        case 'wfl':
          $result = hedley_zscore_weight_for_length($scale, $gender, $measurement);
          $this->assertSimilar($result, $expected, $case);
          break;

        default:
          $this->fail("Unrecognized calculation: $func");
      }
    }
  }

}
