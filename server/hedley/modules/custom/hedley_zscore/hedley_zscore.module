<?php

/**
 * @file
 * Code for the Hedley ZScore calculations.
 */

// Our constants as stored in our database.
define('HEDLEY_ZSCORE_MALE', 'male');
define('HEDLEY_ZSCORE_FEMALE', 'female');

// Some keys for our tables.
define('HEDLEY_ZSCORE_DAYS', 'days');
define('HEDLEY_ZSCORE_MONTHS', 'months');
define('HEDLEY_ZSCORE_MILLIMETRES', 'millimetres');

// Gender as encoded in the WHO tables.
define('HEDLEY_ZSCORE_WHO_GENDER', [
  'male' => 1,
  'female' => 2,
]);

/**
 * Read a JSON file and return the results.
 *
 * @param string $file
 *   The file name, inside the json subdirectory of this very module.
 *
 * @return array
 *   An array of JSON entries, indexed by Day, Month, or Length * 10.
 */
function hedley_zscore_read_file($file) {
  $path = drupal_get_path('module', 'hedley_zscore') . '/json/' . $file;

  $json = file_get_contents($path);
  $decoded = json_decode($json);

  // For speedy lookup, we index in appropriate ways, depending on
  // which data we're looking at.
  $indexed = [];

  foreach ($decoded as $entry) {
    if (isset($entry->length)) {
      // Lengths are in 0.1 increments, but we need integer keys,
      // so we multiply by 10.
      $indexed[$entry->sex][$entry->length * 10] = $entry;
    }
    elseif (isset($entry->height)) {
      // Heights are in 0.1 increments, but we need integer keys,
      // so we multiply by 10.
      $indexed[$entry->sex][$entry->height * 10] = $entry;
    }
    elseif (isset($entry->age)) {
      // Otherwise, we index by age.
      $indexed[$entry->sex][$entry->age] = $entry;
    }
    else {
      throw new Exception('Entry had unexpected structure.');
    }
  }

  return $indexed;
}

/**
 * BMI-for-age.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_bfa() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached[HEDLEY_ZSCORE_DAYS] = hedley_zscore_read_file('bmianthro.json');
    $cached[HEDLEY_ZSCORE_MONTHS] = hedley_zscore_read_file('bfawho2007.json');
  }

  return $cached;
}

/**
 * Length-for-age.
 *
 * In fact, this is length-for-age when 2 years and under, and height-for-age
 * for older children. At the moment, this matches our practices.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_lhfa() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached[HEDLEY_ZSCORE_DAYS] = hedley_zscore_read_file('lenanthro.json');
    $cached[HEDLEY_ZSCORE_MONTHS] = hedley_zscore_read_file('hfawho2007.json');
  }

  return $cached;
}

/**
 * Weight-for-age.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfa() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached[HEDLEY_ZSCORE_DAYS] = hedley_zscore_read_file('weianthro.json');
    $cached[HEDLEY_ZSCORE_MONTHS] = hedley_zscore_read_file('wfawho2007.json');
  }

  return $cached;
}

/**
 * Weight-for-length.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfl() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached[HEDLEY_ZSCORE_MILLIMETRES] = hedley_zscore_read_file('wflanthro.json');
  }

  return $cached;
}

/**
 * Weight-for-height.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfh() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached[HEDLEY_ZSCORE_MILLIMETRES] = hedley_zscore_read_file('wfhanthro.json');
  }

  return $cached;
}

/**
 * Z-Score BMI for age.
 *
 * @param float $days
 *   How many days old is the child?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $bmi
 *   What is the BMI, in (kg / metres squared)
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_bmi_for_age($days, $gender, $bmi) {
  $source = hedley_zscore_bfa();

  return hedley_zscore_lookup(round($days), $gender, $bmi, TRUE, $source);
}

/**
 * Z-Score length for age.
 *
 * In fact, for 2 years and older, we assume this is height,
 * rather than length.
 *
 * @param float $days
 *   How many days old is the child?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $cm
 *   How many centimetres is the child in length?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_length_for_age($days, $gender, $cm) {
  $source = hedley_zscore_lhfa();

  return hedley_zscore_lookup(round($days), $gender, $cm, FALSE, $source);
}

/**
 * Z-Score weight for age.
 *
 * @param float $days
 *   How many days old is the child?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $kg
 *   How many kilograms does the child weigh?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_weight_for_age($days, $gender, $kg) {
  $source = hedley_zscore_wfa();

  return hedley_zscore_lookup(round($days), $gender, $kg, TRUE, $source);
}

/**
 * Z-Score weight for length.
 *
 * @param float $cm
 *   How many centimetres is the child in length?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $kg
 *   How many kilograms does the child weigh?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_weight_for_length($cm, $gender, $kg) {
  $source = hedley_zscore_wfl();

  return hedley_zscore_lookup(round($cm * 10), $gender, $kg, TRUE, $source);
}

/**
 * Z-Score weight for height.
 *
 * @param float $cm
 *   How many centimetres is the child in height?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $kg
 *   How many kilograms does the child weigh?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_weight_for_height($cm, $gender, $kg) {
  $source = hedley_zscore_wfh();

  return hedley_zscore_lookup(round($cm * 10), $gender, $kg, TRUE, $source);
}

/**
 * Looks up the measurement in the JSON file.
 *
 * @param int $key
 *   What index should we lookup?
 * @param float $measurement
 *   What is the measurement?
 * @param bool $clamp
 *   Should we apply a special procedure to values outside +3 or -3?
 * @param array $source
 *   What are the decoded JSON files we should use?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_lookup($key, $gender, $measurement, $clamp, array $source) {
  // Convert gender to how it is represented in the WHO tables.
  $who_gender = HEDLEY_ZSCORE_WHO_GENDER[$gender];

  // First, check if we're indexing by millimetre.
  if (isset($source[HEDLEY_ZSCORE_MILLIMETRES])) {
    if (empty($source[HEDLEY_ZSCORE_MILLIMETRES][$who_gender][$key])) {
      // We're looking up millimetres, so we can't fall back on anything else.
      return NULL;
    }

    $entry = $source[HEDLEY_ZSCORE_MILLIMETRES][$who_gender][$key];

    return hedley_zscore_check_entry($clamp, $measurement, $entry->l, $entry->m, $entry->s);
  }

  // If not, see if we can use a 'days' table.
  if (isset($source[HEDLEY_ZSCORE_DAYS][$who_gender][$key])) {
    $entry = $source[HEDLEY_ZSCORE_DAYS][$who_gender][$key];

    return hedley_zscore_check_entry($clamp, $measurement, $entry->l, $entry->m, $entry->s);
  }

  // If our 'days' table doesn't have the needed data, we try months.
  if (empty($source[HEDLEY_ZSCORE_MONTHS][$who_gender])) {
    return NULL;
  }

  // The months table for our gender.
  $months = $source[HEDLEY_ZSCORE_MONTHS][$who_gender];

  // Convert days to months.
  $fractional_months = $key * 12 / 365.25;

  // We interpolate between the l, m and s values we know for the months.
  $low_months = floor($fractional_months);
  $high_months = ceil($fractional_months);
  $diff_months = $fractional_months - $low_months;

  if (empty($months[$low_months]) || empty($months[$high_months])) {
    return NULL;
  }

  $low = $months[$low_months];
  $high = $months[$high_months];

  $l = $low->l + ($diff_months * ($high->l - $low->l));
  $m = $low->m + ($diff_months * ($high->m - $low->m));
  $s = $low->s + ($diff_months * ($high->s - $low->s));

  return hedley_zscore_check_entry($clamp, $measurement, $l, $m, $s);
}

/**
 * Calculates the Z-score given the l, m and s values.
 *
 * @param bool $clamp
 *   Should we adjust results above 3 or below -3?
 * @param float $measurement
 *   What is the measurement?
 * @param float $l
 *   The l value.
 * @param float $m
 *   The m value.
 * @param float $s
 *   The s value.
 *
 * @return float
 *   A Z-Score
 */
function hedley_zscore_check_entry($clamp, $measurement, $l, $m, $s) {
  $result = (pow($measurement / $m, $l) - 1) / ($s * $l);

  if ($clamp) {
    if ($result > 3) {
      $sd3pos = $m * pow(1 + $l * $s * 3, 1 / $l);
      $sd2pos = $m * pow(1 + $l * $s * 2, 1 / $l);
      $sd23pos = $sd3pos - $sd2pos;

      $result = 3 + (($measurement - $sd3pos) / $sd23pos);
    }
    elseif ($result < -3) {
      $sd3neg = $m * pow(1 + $l * $s * -3, 1 / $l);
      $sd2neg = $m * pow(1 + $l * $s * -2, 1 / $l);
      $sd23neg = $sd2neg - $sd3neg;

      $result = -3 + (($measurement - $sd3neg) / $sd23neg);
    }
  }

  return $result;
}
