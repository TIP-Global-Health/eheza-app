<?php

/**
 * @file
 * Code for the Hedley ZScore calculations.
 */

define('HEDLEY_ZSCORE_MALE', 'male');
define('HEDLEY_ZSCORE_FEMALE', 'female');

/**
 * Read a JSON file and return the results.
 *
 * @param string $file
 *   The file name, inside the json subdirectory of this very module.
 *
 * @return array
 *   An array of JSON entries, indexed by Day, Month, or Length * 10.
 */
function hedley_zscore_read_file($file) {
  $path = drupal_get_path('module', 'hedley_zscore') . '/json/' . $file;

  // This mimics what we do on the Elm side when decoding the JSON.
  $json = file_get_contents($path);
  $decoded = json_decode($json);

  $indexed = [];
  foreach ($decoded as $entry) {
    if (isset($entry->Length)) {
      // Lengths are in 0.1 increments, but we need integer keys,
      // so we multiply by 10.
      $indexed[$entry->Length * 10] = $entry;
    }
    elseif (isset($entry->Month)) {
      // For older children, we index by month ...
      $indexed[$entry->Month] = $entry;
    }
    else {
      // Otherwise, we index by day.
      $indexed[$entry->Day] = $entry;
    }
  }

  return $indexed;
}

/**
 * BMI-for-age boys.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_bfa_boys() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['days'] = hedley_zscore_read_file('bfa_boys_z_exp.json');
    $cached['months'] = hedley_zscore_read_file('bmi_boys_z_WHO2007_exp.json');
  }

  return $cached;
}

/**
 * BMI-for-age girls.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_bfa_girls() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['days'] = hedley_zscore_read_file('bfa_girls_z_exp.json');
    $cached['months'] = hedley_zscore_read_file('bmi_girls_z_WHO2007_exp.json');
  }

  return $cached;
}

/**
 * Length-for-age boys.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_lhfa_boys() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['days'] = hedley_zscore_read_file('lhfa_boys_z_exp.json');
    $cached['months'] = hedley_zscore_read_file('hfa_boys_z_WHO2007_exp.json');
  }

  return $cached;
}

/**
 * Length-for-age girls.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_lhfa_girls() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['days'] = hedley_zscore_read_file('lhfa_girls_z_exp.json');
    $cached['months'] = hedley_zscore_read_file('hfa_girls_z_WHO2007_exp.json');
  }

  return $cached;
}

/**
 * Weight-for-age boys.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfa_boys() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['days'] = hedley_zscore_read_file('wfa_boys_z_exp.json');
    $cached['months'] = hedley_zscore_read_file('wfa_boys_z_WHO2007_exp.json');
  }

  return $cached;
}

/**
 * Weight-for-age girls.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfa_girls() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['days'] = hedley_zscore_read_file('wfa_girls_z_exp.json');
    $cached['months'] = hedley_zscore_read_file('wfa_girls_z_WHO2007_exp.json');
  }

  return $cached;
}

/**
 * Weight-for-length boys.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfl_boys() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['millimetres'] = hedley_zscore_read_file('wfl_boys_z_exp.json');
  }

  return $cached;
}

/**
 * Weight-for-length girls.
 *
 * @return array
 *   An array of the entries parsed from JSON.
 */
function hedley_zscore_wfl_girls() {
  $cached = &drupal_static(__FUNCTION__);

  if (!isset($cached)) {
    $cached['millimetres'] = hedley_zscore_read_file('wfl_girls_z_exp.json');
  }

  return $cached;
}

/**
 * Z-Score BMI for age.
 *
 * @param float $days
 *   How many days old is the child?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $bmi
 *   What is the BMI, in (kg / metres squared)
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_bmi_for_age($days, $gender, $bmi) {
  switch ($gender) {
    case HEDLEY_ZSCORE_MALE:
      $source = hedley_zscore_bfa_boys();
      break;

    case HEDLEY_ZSCORE_FEMALE:
      $source = hedley_zscore_bfa_girls();
      break;

    default:
      return NULL;
  }

  return hedley_zscore_lookup(round($days), $bmi, $source);
}

/**
 * Z-Score length for age.
 *
 * @param float $days
 *   How many days old is the child?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $cm
 *   How many centimetres is the child in length?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_length_for_age($days, $gender, $cm) {
  switch ($gender) {
    case HEDLEY_ZSCORE_MALE:
      $source = hedley_zscore_lhfa_boys();
      break;

    case HEDLEY_ZSCORE_FEMALE:
      $source = hedley_zscore_lhfa_girls();
      break;

    default:
      return NULL;
  }

  return hedley_zscore_lookup(round($days), $cm, $source);
}

/**
 * Z-Score weight for age.
 *
 * @param float $days
 *   How many days old is the child?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $kg
 *   How many kilograms does the child weigh?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_weight_for_age($days, $gender, $kg) {
  $source = NULL;

  switch ($gender) {
    case HEDLEY_ZSCORE_MALE:
      $source = hedley_zscore_wfa_boys();
      break;

    case HEDLEY_ZSCORE_FEMALE;
      $source = hedley_zscore_wfa_girls();
      break;

    default:
      return NULL;
  }

  return hedley_zscore_lookup(round($days), $kg, $source);
}

/**
 * Z-Score weight for length.
 *
 * @param float $cm
 *   How many centimetres is the child in length?
 * @param string $gender
 *   Is the child 'male' or 'female'?
 * @param float $kg
 *   How many kilograms does the child weigh?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_weight_for_length($cm, $gender, $kg) {
  $source = NULL;

  switch ($gender) {
    case HEDLEY_ZSCORE_MALE:
      $source = hedley_zscore_wfl_boys();
      break;

    case HEDLEY_ZSCORE_FEMALE:
      $source = hedley_zscore_wfl_girls();
      break;

    default:
      return NULL;
  }

  return hedley_zscore_lookup(round($cm * 10), $kg, $source);
}

/**
 * Looks up the measurement in the JSON file.
 *
 * @param int $key
 *   What index should we lookup?
 * @param float $measurement
 *   What is the measurement?
 * @param array $source
 *   What are the decoded JSON files we should use?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_lookup($key, $measurement, array $source) {
  // First, check if we're indexing by millimetre.
  if (isset($source['millimetres'])) {
    $entries = $source['millimetres'];

    if (empty($entries[$key])) {
      return NULL;
    }

    return hedley_zscore_check_entry($measurement, $entries[$key]);
  }

  // If not, see if we can use a 'days' table.
  if (isset($source['days'][$key])) {
    return hedley_zscore_check_entry($measurement, $source['days'][$key]);
  }

  // If our 'days' table doesn't have the needed data, we convert to months
  // and try our months table.
  //
  // For now, we'll do the easy thing, and use months of equal lengths,
  // rather than vary month length according to exactly when the child was
  // born.
  $completed_months = $key * 12 / 365.25;

  // Our tables are 1-based, so we actually want to index by which month
  // the child is **in**, rather than which month the child has completed.
  // So, we basically round up.
  $index_months = ceil($completed_months);

  // Then look it up!
  if (isset($source['months'][$index_months])) {
    return hedley_zscore_check_entry($measurement, $source['months'][$index_months]);
  }

  // We'll fall through to here if everything was out of range.
  return NULL;
}

/**
 * Looks up the measurement given a specific entry.
 *
 * @param float $measurement
 *   What is the measurement?
 * @param object $entry
 *   What is the specific entry we should check?
 *
 * @return int
 *   A Z-Score
 */
function hedley_zscore_check_entry($measurement, $entry) {
  if ($measurement <= $entry->SD3neg) {
    return -3;
  }

  if ($measurement <= $entry->SD2neg) {
    return -2;
  }

  if ($measurement <= $entry->SD1neg) {
    return -1;
  }

  if ($measurement <= $entry->SD0) {
    return 0;
  }

  if ($measurement <= $entry->SD1) {
    return 1;
  }

  if ($measurement <= $entry->SD2) {
    return 2;
  }

  return 3;
}
