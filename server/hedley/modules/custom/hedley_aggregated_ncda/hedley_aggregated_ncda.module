<?php

/**
 * @file
 * Code for the Hedley Aggregated NCDA feature.
 */

include_once 'hedley_aggregated_ncda.features.inc';

/**
 * Implements hook_menu().
 */
function hedley_aggregated_ncda_menu() {
  $items['admin/reports/aggregated-ncda'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_menu',
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_district',
    'page arguments' => [3, 4],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_sector',
    'page arguments' => [3, 4, 5],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_cell',
    'page arguments' => [3, 4, 5, 6],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%/%/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_village',
    'page arguments' => [3, 4, 5, 6, 7],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  return $items;
}

/**
 * Determines whether current user may access Aggregated NCDA scoreboard pages.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function hedley_aggregated_ncda_access() {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  if ($user->uid == 1) {
    return TRUE;
  }

  return in_array('administrator', $user->roles);
}

function hedley_aggregated_ncda_callback_menu() {
  return hedley_aggregated_ncda_build_elm_app('menu', []);
}

function hedley_aggregated_ncda_callback_district($province, $district) {
  return hedley_aggregated_ncda_build_results_app($province, $district);
}

function hedley_aggregated_ncda_callback_sector($province, $district, $sector) {
  return hedley_aggregated_ncda_build_results_app($province, $district, $sector);
}

function hedley_aggregated_ncda_callback_cell($province, $district, $sector, $cell) {
  return hedley_aggregated_ncda_build_results_app($province, $district, $sector, $cell);
}

function hedley_aggregated_ncda_callback_village($province, $district, $sector, $cell, $village) {
  return hedley_aggregated_ncda_build_results_app($province, $district, $sector, $cell, $village);
}

function hedley_aggregated_ncda_build_results_app($province, $district, $sector = NULL, $cell = NULL, $village = NULL) {
  $data = [];

  if (empty($sector)) {
    $data['entity_name'] = $district;
    $data['entity_type'] = 'district';
  }
  else if (empty($cell)) {
    $data['entity_name'] = $sector;
    $data['entity_type'] = 'sector';
  }
  else if (empty($village)) {
    $data['entity_name'] = $cell;
    $data['entity_type'] = 'cell';
  }
  else {
    $data['entity_name'] = $village;
    $data['entity_type'] = 'village';
  }

  $data['results'] = hedley_aggregated_ncda_generate_results_data($province, $district, $sector, $cell, $village);

  return hedley_aggregated_ncda_build_elm_app('results', $data);
}

function hedley_aggregated_ncda_build_elm_app($page, $data) {
  // Add application.
  drupal_add_js(drupal_get_path('module', 'hedley_aggregated_ncda') . '/js/elm-main.js');
  drupal_add_js(drupal_get_path('module', 'hedley_aggregated_ncda') . '/js/elm.js');

  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'hedley_aggregated_ncda') . '/css/aggregated-ncda.css', 'file');

  // Getting a unique ID for the app.
  $app_id = drupal_html_id('elm-app');

  // Add settings.
  $settings = [
    'elm_apps' => [
      $app_id => [
        'page' => $page,
        'data' => $data,
      ],
    ],
  ];
  drupal_add_js($settings, 'setting');

  // Return the HTML markup for the Elm application.
  return '<div id="' . $app_id . '"></div>';
}

function hedley_aggregated_ncda_generate_results_data($province, $district, $sector, $cell, $village) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_province', 'value', $province)
    ->fieldCondition('field_district', 'value', $district)
    ->fieldCondition('field_ncda_data', 'value', NULL, 'IS NOT NULL')
    ->addTag('exclude_deleted');

  if (!empty($sector)) {
    $query->fieldCondition('field_sector', 'value', $sector);
  }

  if (!empty($cell)) {
    $query->fieldCondition('field_cell', 'value', $cell);
  }

  if (!empty($village)) {
    $query->fieldCondition('field_village', 'value', $village);
  }

  $data = [];
  $nid = 0;
  $batch = 500;
  while (TRUE) {
    // Free up memory.
    drupal_static_reset();

    $query = clone $query;
    if ($nid) {
      $query->propertyCondition('nid', $nid, '>');
    }

    $result = $query
      ->range(0, $batch)
      ->execute();

    if (empty($result['node'])) {
      // No more items left.
      break;
    }

    $ids = array_keys($result['node']);
    $nodes = node_load_multiple($ids);
    foreach ($nodes as $node) {
      $json_data = $node->field_ncda_data[LANGUAGE_NONE][0]['value'];
      if (empty($json_data)) {
        continue;
      }

      $data[] = json_decode($json_data);
    }

    $nid = end($ids);
  }

  return $data;
}

/**
 * Generates NCDA data for a given person and stores it in a node.
 *
 * @param int $person_id
 *   The ID of the person for whom to generate the NCDA data.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_aggregated_ncda_generate_data_for_person($person_id) {
  $person = node_load($person_id);
  $wrapper = entity_metadata_wrapper('node', $person);
  $birth_date = $wrapper->field_birth_date->value();
  if (empty($birth_date)) {
    // We must know the birthdate to be able to present NCDA data.
    return;
  }

  if ($birth_date < strtotime("-9 year")) {
    // We generate data for children only.
    // Our first records are from Jan 2018, so going back
    // 9 years to make sure we cover all children.
    return;
  }

  $data = [
    'birth_date' => date("Y-m-d", $birth_date),
  ];

  $content_types_to_load = array_merge(
    HEDLEY_ACTIVITY_NCDA_BUNDLES,
    HEDLEY_ACTIVITY_HEIGHT_BUNDLES,
    HEDLEY_ACTIVITY_WEIGHT_BUNDLES,
    HEDLEY_ACTIVITY_MUAC_BUNDLES );
  $content_types_to_load[] = HEDLEY_ACTIVITY_WELL_CHILD_PREGNANCY_SUMMARY_CONTENT_TYPE;

  $heights = $weights = $muacs = $ncdas = [];
  $birth_weight = NULL;
  $measurements = hedley_general_get_person_measurements($person_id, $content_types_to_load);
  if (!empty($measurements)) {
    $nodes = node_load_multiple($measurements);
    foreach ($nodes as $node) {
      if (in_array($node->type, HEDLEY_ACTIVITY_HEIGHT_BUNDLES)) {
        $heights[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_WEIGHT_BUNDLES)) {
        $weights[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_MUAC_BUNDLES)) {
        $muacs[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_NCDA_BUNDLES)) {
        $ncdas[] = $node;
        continue;
      }

      // If we got so far, it's pregnancy summary content type.
      // Only thing we need from it is the birth weight.
      if (!empty($node->field_weight) && !empty($node->field_weight[LANGUAGE_NONE][0]['value'])) {
        $birth_weight = $node->field_weight[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  // Birth weight measurement is taken once -
  // at Newborn exam encounter (pregnancy summary measurement), if it
  // was performed, at first NCDA questioner, otherwise.
  // Therefore, if we did not resolve birth weight from pregnancy summary,
  // we try to resolve from NCDA questioners.
  if (empty($birth_weight)) {
    foreach ($ncdas as $ncda) {
      if (!empty($ncda->field_weight) && !empty($ncda->field_weight[LANGUAGE_NONE][0]['value'])) {
        $birth_weight = $ncda->field_weight[LANGUAGE_NONE][0]['value'];
      }
      break;
    }
  }
  if ($birth_weight) {
    $data['low_birth_weight'] = $birth_weight < 2000;
  }

  $empty_nutrition_values = [
    'severe' => [],
    'moderate' => [],
    'normal' => [],
  ];

  $data['nutrition'] = [
    'stunting' => $empty_nutrition_values,
    'underweight' => $empty_nutrition_values,
    'wasting' => $empty_nutrition_values,
    'muac' => $empty_nutrition_values,
  ];

  foreach ($heights as $height) {
    if (!empty($height->field_zscore_age) && !empty($height->field_zscore_age[LANGUAGE_NONE][0]['value'])) {
      $value = $height->field_zscore_age[LANGUAGE_NONE][0]['value'];
      $parts = explode(' ', $height->field_date_measured[LANGUAGE_NONE][0]['value']);
      if ($value <= -3) {
        $data['nutrition']['stunting']['severe'][] = $parts[0];
      }
      elseif ($value <= -2) {
        $data['nutrition']['stunting']['moderate'][] = $parts[0];
      }
      else {
        $data['nutrition']['stunting']['normal'][] = $parts[0];
      }
    }
  }

  foreach ($weights as $weight) {
    if (!empty($weight->field_zscore_age) && !empty($weight->field_zscore_age[LANGUAGE_NONE][0]['value'])) {
      $value = $weight->field_zscore_age[LANGUAGE_NONE][0]['value'];
      $parts = explode(' ', $weight->field_date_measured[LANGUAGE_NONE][0]['value']);
      if ($value <= -3) {
        $data['nutrition']['underweight']['severe'][] = $parts[0];
      }
      elseif ($value <= -2) {
        $data['nutrition']['underweight']['moderate'][] = $parts[0];
      }
      else {
        $data['nutrition']['underweight']['normal'][] = $parts[0];
      }
    }

    if (!empty($weight->field_zscore_length) && !empty($weight->field_zscore_length[LANGUAGE_NONE][0]['value'])) {
      $value = $weight->field_zscore_length[LANGUAGE_NONE][0]['value'];
      $parts = explode(' ', $weight->field_date_measured[LANGUAGE_NONE][0]['value']);
      if ($value <= -3) {
        $data['nutrition']['wasting']['severe'][] = $parts[0];
      }
      elseif ($value <= -2) {
        $data['nutrition']['wasting']['moderate'][] = $parts[0];
      }
      else {
        $data['nutrition']['wasting']['normal'][] = $parts[0];
      }
    }
  }

  foreach ($muacs as $muac) {
    if (!empty($muac->field_muac) && !empty($muac->field_muac[LANGUAGE_NONE][0]['value'])) {
      $value = $muac->field_muac[LANGUAGE_NONE][0]['value'];
      $parts = explode(' ', $muac->field_date_measured[LANGUAGE_NONE][0]['value']);
      if ($value <= 11.5) {
        $data['nutrition']['muac']['severe'][] = $parts[0];
      }
      elseif ($value <= 12.5) {
        $data['nutrition']['muac']['moderate'][] = $parts[0];
      }
      else {
        $data['nutrition']['muac']['normal'][] = $parts[0];
      }
    }
  }

  $data['ncda'] = [
    'postpartum_checkups' => FALSE,
    'iron_during_pregnancy' => FALSE,
    'pane_nb' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => [],
    ],
    'pane_iew' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => FALSE,
      'row5' => [],
    ],
  ];

  foreach ($ncdas as $ncda) {
    $items = field_get_items('node', $ncda, 'field_ncda_signs');
    if (!$items) {
      continue;
    }
    $parts = explode(' ', $ncda->field_date_measured[LANGUAGE_NONE][0]['value']);
    foreach ($items as $item) {
      switch ($item['value']) {
        case 'regular-prenatal-visits':
         $data['ncda']['postpartum_checkups'] = TRUE;
         break;

        case 'iron-supplements-during-pregnancy':
         $data['ncda']['iron_during_pregnancy'] = TRUE;
         break;

        case 'breastfed-for-six-months':
         $data['ncda']['pane_nb']['row1'][] = $parts[0];
         break;

        case 'appropriate-complementary-feeding':
         $data['ncda']['pane_nb']['row2'][] = $parts[0];
         break;

        case 'five-food-groups':
        $data['ncda']['pane_nb']['row3'][] = $parts[0];
        break;

        // These 3 appear according to child age.
        // There can be only one of these values at single questioner.
        case 'meal-frequency-6to8m':
        case 'meal-frequency-9to11m':
        case 'meal-frequency-12+m':
         $data['ncda']['pane_nb']['row4'][] = $parts[0];
         break;

        case 'has-clean-water':
          $data['ncda']['pane_iew']['row1'][] = $parts[0];
          break;

        case 'has-toilets':
          $data['ncda']['pane_iew']['row2'][] = $parts[0];
          break;

        case 'has-handwashing-facility':
          $data['ncda']['pane_iew']['row3'][] = $parts[0];
          break;

        case 'insecticide-treated-bednets-during-pregnancy':
          $data['ncda']['pane_iew']['row4'] = TRUE;
          break;

        case 'has-kitchen-garden':
          $data['ncda']['pane_iew']['row5'][] = $parts[0];
          break;
      }
    }
  }
  
  $encoded_data = json_encode($data);
  $wrapper->field_ncda_data->set($encoded_data);
  $wrapper->save();
}
