<?php

/**
 * @file
 * Code for the Hedley Aggregated NCDA feature.
 */

include_once 'hedley_aggregated_ncda.features.inc';

define('HEDLEY_AGGREGATED_NCDA_CALCULATE_NCDA_DATA', 'hedley_aggregated_ncda_calculate_ncda_data');


/**
 * Implements hook_menu().
 */
function hedley_aggregated_ncda_menu() {
  $items['admin/reports/aggregated-ncda'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_menu',
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_district',
    'page arguments' => [3, 4],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_sector',
    'page arguments' => [3, 4, 5],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_cell',
    'page arguments' => [3, 4, 5, 6],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  $items['admin/reports/aggregated-ncda/%/%/%/%/%'] = array(
    'title' => 'NCDA scoreboard',
    'description' => 'View aggregated NCDA scoreboard',
    'page callback' => 'hedley_aggregated_ncda_callback_village',
    'page arguments' => [3, 4, 5, 6, 7],
    'access arguments' => ['hedley_aggregated_ncda_access'],
  );

  return $items;
}


/**
 * Implements hook_advanced_queue_info().
 */
function hedley_aggregated_ncda_advanced_queue_info() {
  $items[HEDLEY_AGGREGATED_NCDA_CALCULATE_NCDA_DATA] = [
    'label' => t('Calculate NCDA data'),
    'worker callback' => 'hedley_aggregated_ncda_calculate_ncda_data_worker',
    'groups' => [
      'hedley',
    ],
    // The number of seconds to retry after.
    'retry after' => 120,
    // The maximum number of attempts after a failure.
    'max attempts' => 3,
  ];

  return $items;
}

/**
 * Advanced queue worker; Calculate NCDA data for person.
 *
 * @param object $queue_item
 *   The item object to process.
 *
 * @return array
 *   Array indicating if the process succeeded, or an array with
 *   "status" and "result" keys.
 */
function hedley_aggregated_ncda_calculate_ncda_data_worker($queue_item) {
  if (!$person_id = $queue_item->data['person_id']) {
    return [
      'status' => ADVANCEDQUEUE_STATUS_FAILURE,
      'result' => t('Does not have Person Node ID.'),
    ];
  }

  try {
    hedley_aggregated_ncda_calculate_ncda_data_for_person($person_id);
  }
  catch (Exception $e) {
    return [
      'status' => ADVANCEDQUEUE_STATUS_FAILURE_RETRY,
      'result' => $e->getMessage(),
    ];
  }

  $params = [
    '@nid' => $person_id,
  ];
  return [
    'status' => ADVANCEDQUEUE_STATUS_SUCCESS,
    'result' => t('NCDA data has been calculated for person ID: @nid', $params),
  ];
}

/**
 * Determines whether current user may access Aggregated NCDA scoreboard pages.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function hedley_aggregated_ncda_access() {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  if ($user->uid == 1) {
    return TRUE;
  }

  return in_array('administrator', $user->roles);
}

/**
 * Callback for Elm application of administrative division selection.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_callback_menu() {
  return hedley_aggregated_ncda_build_elm_app('menu', []);
}

/**
 * Callback for aggregated NCDA elm application of district.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_callback_district($province, $district) {
  return hedley_aggregated_ncda_build_results_app($province, $district);
}

/**
 * Callback for aggregated NCDA elm application of sector.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_callback_sector($province, $district, $sector) {
  return hedley_aggregated_ncda_build_results_app($province, $district, $sector);
}

/**
 * Callback for aggregated NCDA elm application of cell.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_callback_cell($province, $district, $sector, $cell) {
  return hedley_aggregated_ncda_build_results_app($province, $district, $sector, $cell);
}

/**
 * Callback for aggregated NCDA elm application of village.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 * @param int $village
 *   The village ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_callback_village($province, $district, $sector, $cell, $village) {
  return hedley_aggregated_ncda_build_results_app($province, $district, $sector, $cell, $village);
}

/**
 * Build results app for aggregated NCDA.
 *
 * Based on input fields, determines administrative divisions for which
 * data is provided.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int|null $sector
 *   The sector ID (optional).
 * @param int|null $cell
 *   The cell ID (optional).
 * @param int|null $village
 *   The village ID (optional).
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_build_results_app($province, $district, $sector = NULL, $cell = NULL, $village = NULL) {
  $data = [];

  if (empty($sector)) {
    $data['entity_name'] = $district;
    $data['entity_type'] = 'district';
  }
  elseif (empty($cell)) {
    $data['entity_name'] = $sector;
    $data['entity_type'] = 'sector';
  }
  elseif (empty($village)) {
    $data['entity_name'] = $cell;
    $data['entity_type'] = 'cell';
  }
  else {
    $data['entity_name'] = $village;
    $data['entity_type'] = 'village';
  }

  $data['results'] = hedley_aggregated_ncda_generate_results_data($province, $district, $sector, $cell, $village);

  return hedley_aggregated_ncda_build_elm_app('results', $data);
}

/**
 * Build Elm application for aggregated NCDA.
 *
 * @param string $page
 *   The page name.
 * @param array $data
 *   The data array to be used by Elm application.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_aggregated_ncda_build_elm_app($page, array $data) {
  // Add application.
  drupal_add_js(drupal_get_path('module', 'hedley_aggregated_ncda') . '/js/elm-main.js');
  drupal_add_js(drupal_get_path('module', 'hedley_aggregated_ncda') . '/js/elm.js');

  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'hedley_aggregated_ncda') . '/css/aggregated-ncda.css', 'file');

  // Getting a unique ID for the app.
  $app_id = drupal_html_id('elm-app');

  // Add settings.
  $settings = [
    'elm_apps' => [
      $app_id => [
        'page' => $page,
        'data' => $data,
      ],
    ],
  ];
  drupal_add_js($settings, 'setting');

  // Return the HTML markup for the Elm application.
  return '<div id="' . $app_id . '"></div>';
}

/**
 * Generate aggregated NCDA data which is stored on person nodes.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 * @param int $village
 *   The village ID.
 *
 * @return array
 *   An array of generated data.
 */
function hedley_aggregated_ncda_generate_results_data($province, $district, $sector, $cell, $village) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_province', 'value', $province)
    ->fieldCondition('field_district', 'value', $district)
    ->fieldCondition('field_ncda_data', 'value', NULL, 'IS NOT NULL')
    ->addTag('exclude_deleted');

  if (!empty($sector)) {
    $query->fieldCondition('field_sector', 'value', $sector);
  }

  if (!empty($cell)) {
    $query->fieldCondition('field_cell', 'value', $cell);
  }

  if (!empty($village)) {
    $query->fieldCondition('field_village', 'value', $village);
  }

  $data = [];
  $nid = 0;
  $batch = 500;
  while (TRUE) {
    // Free up memory.
    drupal_static_reset();

    $query = clone $query;
    if ($nid) {
      $query->propertyCondition('nid', $nid, '>');
    }

    $result = $query
      ->range(0, $batch)
      ->execute();

    if (empty($result['node'])) {
      // No more items left.
      break;
    }

    $ids = array_keys($result['node']);
    $nodes = node_load_multiple($ids);
    foreach ($nodes as $node) {
      $json_data = $node->field_ncda_data[LANGUAGE_NONE][0]['value'];
      if (empty($json_data)) {
        continue;
      }

      $data[] = json_decode($json_data);
    }

    $nid = end($ids);
  }

  return $data;
}

/**
 * Generates NCDA data for a given person, and stores in field on person node.
 *
 * @param int $person_id
 *   The ID of the person for whom to generate the NCDA data.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_aggregated_ncda_generate_data_for_person($person_id) {
  $person = node_load($person_id);
  $wrapper = entity_metadata_wrapper('node', $person);
  $birth_date = $wrapper->field_birth_date->value();
  if (empty($birth_date)) {
    // We must know the birthdate to be able to present NCDA data.
    return;
  }

  if ($birth_date < strtotime("-9 year")) {
    // We generate data for children only.
    // Our first records are from Jan 2018, so going back
    // 9 years to make sure we cover all children.
    return;
  }

  $data = [
    'birth_date' => date("Y-m-d", $birth_date),
  ];

  $content_types_to_load = array_merge(
    HEDLEY_ACTIVITY_NCDA_BUNDLES,
    HEDLEY_ACTIVITY_HEIGHT_BUNDLES,
    HEDLEY_ACTIVITY_WEIGHT_BUNDLES,
    HEDLEY_ACTIVITY_MUAC_BUNDLES,
    HEDLEY_ACTIVITY_NUTRITION_BUNDLES,
    HEDLEY_ACTIVITY_SEND_TO_HC_BUNDLES
  );
  $content_types_to_load[] = HEDLEY_ACTIVITY_WELL_CHILD_PREGNANCY_SUMMARY_CONTENT_TYPE;
  $content_types_to_load[] = HEDLEY_ACTIVITY_CHILD_FBF_CONTENT_TYPE;
  $content_types_to_load[] = HEDLEY_ACTIVITY_MEDICATION_DISTRIBUTION_CONTENT_TYPE;
  $content_types_to_load[] = HEDLEY_ACTIVITY_WELL_CHILD_MEBENDEZOLE_CONTENT_TYPE;
  $content_types_to_load[] = HEDLEY_ACTIVITY_WELL_CHILD_VITAMIN_A_CONTENT_TYPE;

  $heights = $weights = $muacs = $ncdas = $fbfs = $nutritions = $send_to_hcs = $medication_distributions = $mebendezoles = $vitamins_a = [];
  $birth_weight = NULL;
  $measurements = hedley_general_get_person_measurements($person_id, $content_types_to_load);
  if (!empty($measurements)) {
    $nodes = node_load_multiple($measurements);
    foreach ($nodes as $node) {
      if (in_array($node->type, HEDLEY_ACTIVITY_HEIGHT_BUNDLES)) {
        $heights[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_WEIGHT_BUNDLES)) {
        $weights[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_MUAC_BUNDLES)) {
        $muacs[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_NCDA_BUNDLES)) {
        $ncdas[] = $node;
        continue;
      }

      if ($node->type == HEDLEY_ACTIVITY_CHILD_FBF_CONTENT_TYPE) {
        $fbfs[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_NUTRITION_BUNDLES)) {
        $nutritions[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_SEND_TO_HC_BUNDLES)) {
        $send_to_hcs[] = $node;
        continue;
      }

      if ($node->type == HEDLEY_ACTIVITY_MEDICATION_DISTRIBUTION_CONTENT_TYPE) {
        $medication_distributions[] = $node;
        continue;
      }

      if ($node->type == HEDLEY_ACTIVITY_WELL_CHILD_MEBENDEZOLE_CONTENT_TYPE) {
        $mebendezoles[] = $node;
        continue;
      }

      if ($node->type == HEDLEY_ACTIVITY_WELL_CHILD_VITAMIN_A_CONTENT_TYPE) {
        $vitamins_a[] = $node;
        continue;
      }

      // If we got so far, it's pregnancy summary content type.
      // Only thing we need from it is the birth weight.
      if (!empty($node->field_weight) && !empty($node->field_weight[LANGUAGE_NONE][0]['value'])) {
        $birth_weight = $node->field_weight[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  // Birth weight measurement is taken once -
  // at Newborn exam encounter (pregnancy summary measurement), if it
  // was performed, at first NCDA questioner, otherwise.
  // Therefore, if we did not resolve birth weight from pregnancy summary,
  // we try to resolve from NCDA questioners.
  if (empty($birth_weight)) {
    foreach ($ncdas as $ncda) {
      if (!empty($ncda->field_weight) && !empty($ncda->field_weight[LANGUAGE_NONE][0]['value'])) {
        $birth_weight = $ncda->field_weight[LANGUAGE_NONE][0]['value'];
      }
      break;
    }
  }
  if ($birth_weight) {
    $data['low_birth_weight'] = $birth_weight < 2000;
  }

  $empty_nutrition_values = [
    'severe' => [],
    'moderate' => [],
    'normal' => [],
  ];

  $data['nutrition'] = [
    'stunting' => $empty_nutrition_values,
    'underweight' => $empty_nutrition_values,
    'wasting' => $empty_nutrition_values,
    'muac' => $empty_nutrition_values,
  ];

  foreach ($heights as $height) {
    if (!empty($height->field_zscore_age) && !empty($height->field_zscore_age[LANGUAGE_NONE][0]['value'])) {
      $date_measured = hedley_aggregated_ncda_get_date_measured($height);
      if (!$date_measured) {
        continue;
      }

      $value = $height->field_zscore_age[LANGUAGE_NONE][0]['value'];
      if ($value <= -3) {
        $data['nutrition']['stunting']['severe'][] = $date_measured;
      }
      elseif ($value <= -2) {
        $data['nutrition']['stunting']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['stunting']['normal'][] = $date_measured;
      }
    }
  }

  foreach ($weights as $weight) {
    $date_measured = hedley_aggregated_ncda_get_date_measured($weight);
    if (!$date_measured) {
      continue;
    }

    if (!empty($weight->field_zscore_age) && !empty($weight->field_zscore_age[LANGUAGE_NONE][0]['value'])) {
      $value = $weight->field_zscore_age[LANGUAGE_NONE][0]['value'];
      if ($value <= -3) {
        $data['nutrition']['underweight']['severe'][] = $date_measured;
      }
      elseif ($value <= -2) {
        $data['nutrition']['underweight']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['underweight']['normal'][] = $date_measured;
      }
    }

    if (!empty($weight->field_zscore_length) && !empty($weight->field_zscore_length[LANGUAGE_NONE][0]['value'])) {
      $value = $weight->field_zscore_length[LANGUAGE_NONE][0]['value'];
      if ($value <= -3) {
        $data['nutrition']['wasting']['severe'][] = $date_measured;
      }
      elseif ($value <= -2) {
        $data['nutrition']['wasting']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['wasting']['normal'][] = $date_measured;
      }
    }
  }

  foreach ($muacs as $muac) {
    if (!empty($muac->field_muac) && !empty($muac->field_muac[LANGUAGE_NONE][0]['value'])) {
      $date_measured = hedley_aggregated_ncda_get_date_measured($muac);
      if (!$date_measured) {
        continue;
      }

      $value = $muac->field_muac[LANGUAGE_NONE][0]['value'];
      if ($value <= 11.5) {
        $data['nutrition']['muac']['severe'][] = $date_measured;
      }
      elseif ($value <= 12.5) {
        $data['nutrition']['muac']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['muac']['normal'][] = $date_measured;
      }
    }
  }

  $data['ncda'] = [
    // ANC + Newborn pane.
    'pane1' => [
      'row1' => FALSE,
      'row2' => FALSE,
    ],
    // Universal Intervention pane.
    'pane2' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => [],
      'row5' => [],
    ],
    // Nutrition Behavior pane.
    'pane3' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => [],
    ],
    // Targeted Interventions pane.
    'pane4' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => [],
      'row5' => [],
      'row6' => [],
    ],
    // Infrastructure, Environment & Wash pane.
    'pane5' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => FALSE,
      'row5' => [],
    ],
  ];

  foreach ($ncdas as $ncda) {
    $items = field_get_items('node', $ncda, 'field_ncda_signs');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_aggregated_ncda_get_date_measured($ncda);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      switch ($item['value']) {
        case 'regular-prenatal-visits':
          $data['ncda']['pane1']['row1'] = TRUE;
          break;

        case 'iron-supplements-during-pregnancy':
          $data['ncda']['pane1']['row2'] = TRUE;
          break;

        case 'breastfed-for-six-months':
          $data['ncda']['pane3']['row1'][] = $date_measured;
          break;

        case 'appropriate-complementary-feeding':
          $data['ncda']['pane3']['row2'][] = $date_measured;
          break;

        case 'five-food-groups':
          $data['ncda']['pane3']['row3'][] = $date_measured;
          break;

        // These 3 appear according to child age.
        // There can be only one of these values at single questioner.
        case 'meal-frequency-6to8m':
        case 'meal-frequency-9to11m':
        case 'meal-frequency-12+m':
          $data['ncda']['pane3']['row4'][] = $date_measured;
          break;

        case 'has-clean-water':
          $data['ncda']['pane5']['row1'][] = $date_measured;
          break;

        case 'has-toilets':
          $data['ncda']['pane5']['row2'][] = $date_measured;
          break;

        case 'has-handwashing-facility':
          $data['ncda']['pane5']['row3'][] = $date_measured;
          break;

        case 'insecticide-treated-bednets-during-pregnancy':
          $data['ncda']['pane5']['row4'] = TRUE;
          break;

        case 'has-kitchen-garden':
          $data['ncda']['pane5']['row5'][] = $date_measured;
          break;

        case 'ongera-mnp':
          $data['ncda']['pane2']['row4'][] = $date_measured;
          break;

        case 'support-child-with-disability':
          $data['ncda']['pane4']['row4'][] = $date_measured;
          break;

        case 'conditional-cash-transfer':
          $data['ncda']['pane4']['row5'][] = $date_measured;
          break;

        case 'conditional-food-items':
          $data['ncda']['pane4']['row6'][] = $date_measured;
          break;
      }
    }
  }

  foreach ($fbfs as $fbf) {
    // We record all occurrences of FBF distribution, if there was
    // at least one portion distributed.
    if (!empty($fbf->field_distributed_amount) && !empty($fbf->field_distributed_amount[LANGUAGE_NONE][0]['value'])) {
      $date_measured = hedley_aggregated_ncda_get_date_measured($fbf);
      if (!$date_measured) {
        continue;
      }

      $value = $fbf->field_distributed_amount[LANGUAGE_NONE][0]['value'];
      if ($value > 0) {
        $data['ncda']['pane4']['row1'][] = $date_measured;
      }
    }
  }

  // Malnutrition assessments are recorded on nutrition measurements.
  // We know that patient got treatment for malnutrition, if there's
  // malnutrition assessment on nutrition measurement, and patient was sent
  // to HC on same date.
  // So, first step is to track treatment for malnutrition, we need to know all
  // dates when patient was referred to HC.
  $referrals_to_hc = [
    'group' => [],
    'nutrition' => [],
    'well_child' => [],
  ];
  foreach ($send_to_hcs as $send_to_hc) {
    $items = field_get_items('node', $send_to_hc, 'field_send_to_hc');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_aggregated_ncda_get_date_measured($send_to_hc);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if ($item['value'] == 'refer-to-hc') {
        $type = hedley_aggregated_ncda_bundle_to_encounter_type($send_to_hc);
        $referrals_to_hc[$type][] = $date_measured;
        break;
      }
    }
  }

  // Second step is to check when malnutrition assessments were made, and
  // check if patient was referred to HC on those dates.
  foreach ($nutritions as $nutrition) {
    $items = field_get_items('node', $nutrition, 'field_nutrition_assesment');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_aggregated_ncda_get_date_measured($nutrition);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if (in_array($item['value'], ['malnutrition-moderate', 'malnutrition-severe'])) {
        $type = hedley_aggregated_ncda_bundle_to_encounter_type($nutrition);
        if (in_array($date_measured, $referrals_to_hc[$type])) {
          $data['ncda']['pane4']['row2'][] = $date_measured;
          break;
        }
      }
    }
  }

  // To track treatment for diarrhea, we can analyse medications that were
  // distributed during acute illness encounters.
  // In case ORS or Zinc were prescribed, we know it was for diarrhea diagnosis.
  foreach ($medication_distributions as $medication_distribution) {
    $items = field_get_items('node', $medication_distribution, 'field_prescribed_medication');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_aggregated_ncda_get_date_measured($medication_distribution);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if (in_array($item['value'], ['ors', 'zinc'])) {
        $data['ncda']['pane4']['row3'][] = $date_measured;
        break;
      }
    }
  }

  foreach ($vitamins_a as $vitamin_a) {
    $items = field_get_items('node', $vitamin_a, 'field_administration_note');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_aggregated_ncda_get_date_measured($vitamin_a);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if ($item['value'] == 'administered-today') {
        $data['ncda']['pane2']['row2'][] = $date_measured;
        break;
      }
    }
  }

  foreach ($mebendezoles as $mebendezole) {
    $items = field_get_items('node', $mebendezole, 'field_administration_note');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_aggregated_ncda_get_date_measured($mebendezole);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if ($item['value'] == 'administered-today') {
        $data['ncda']['pane2']['row3'][] = $date_measured;
        break;
      }
    }
  }

  $encoded_data = json_encode($data);
  $wrapper->field_ncda_data->set($encoded_data);
  $wrapper->save();
}

/**
 * Maps the bundle of a measurement node to an encounter type.
 *
 * @param object $node
 *   The node object.
 *
 * @return string|bool
 *   The corresponding encounter type, or FALSE if not found.
 */
function hedley_aggregated_ncda_bundle_to_encounter_type($node) {
  switch ($node->type) {
    case HEDLEY_ACTIVITY_GROUP_SEND_TO_HC_CONTENT_TYPE:
    case HEDLEY_ACTIVITY_NUTRITION_CONTENT_TYPE:
      return 'group';

    case HEDLEY_ACTIVITY_NUTRITION_SEND_TO_HC_CONTENT_TYPE:
    case HEDLEY_ACTIVITY_NUTRITION_NUTRITION_CONTENT_TYPE:
      return 'nutrition';

    case HEDLEY_ACTIVITY_WELL_CHILD_SEND_TO_HC_CONTENT_TYPE:
    case HEDLEY_ACTIVITY_WELL_CHILD_NUTRITION_CONTENT_TYPE:
      return 'well_child';

    default:
      return FALSE;
  }
}

/**
 * Retrieves the date measured field value from measurement node.
 *
 * @param object $node
 *   The node object.
 *
 * @return string|bool
 *   The date measured or FALSE if not found.
 */
function hedley_aggregated_ncda_get_date_measured($node) {
  if (!field_info_field('field_date_measured')) {
    return FALSE;
  }

  if (empty($node->field_date_measured) || empty($node->field_date_measured[LANGUAGE_NONE][0]['value'])) {
    return FALSE;
  }

  $parts = explode(' ', $node->field_date_measured[LANGUAGE_NONE][0]['value']);
  return $parts[0];
}
