<?php

/**
 * @file
 * Code for the Hedley NCDA feature.
 */

include_once 'hedley_ncda.features.inc';

define('HEDLEY_NCDA_CALCULATE_AGGREGATED_DATA', 'hedley_ncda_calculate_ncda_data');

/**
 * Implements hook_menu().
 */
function hedley_ncda_menu() {
  $ncda_enabled = variable_get('hedley_admin_feature_ncda_enabled', FALSE);
  if (!$ncda_enabled) {
    return;
  }

  $items['admin/reports/aggregated-ncda'] = array(
    'title' => 'Aggregated NCDA scoreboard',
    'description' => 'View Aggregated NCDA scoreboard',
    'page callback' => 'hedley_ncda_aggregated_callback_menu',
    'access callback' => 'hedley_ncda_aggregated_ncda_report_access',
  );

  $items['admin/reports/aggregated-ncda/%/%'] = array(
    'title' => 'Aggregated NCDA scoreboard for district',
    'description' => 'View Aggregated NCDA scoreboard for district',
    'page callback' => 'hedley_ncda_aggregated_callback_district',
    'page arguments' => [3, 4],
    'access callback' => 'hedley_ncda_aggregated_ncda_report_access',
  );

  $items['admin/reports/aggregated-ncda/%/%/%'] = array(
    'title' => 'Aggregated NCDA scoreboard for sector',
    'description' => 'View Aggregated NCDA scoreboard for sector',
    'page callback' => 'hedley_ncda_aggregated_callback_sector',
    'page arguments' => [3, 4, 5],
    'access callback' => 'hedley_ncda_aggregated_ncda_report_access',
  );

  $items['admin/reports/aggregated-ncda/%/%/%/%'] = array(
    'title' => 'Aggregated NCDA scoreboard for cell',
    'description' => 'View Aggregated NCDA scoreboard for cell',
    'page callback' => 'hedley_ncda_aggregated_callback_cell',
    'page arguments' => [3, 4, 5, 6],
    'access callback' => 'hedley_ncda_aggregated_ncda_report_access',
  );

  $items['admin/reports/aggregated-ncda/%/%/%/%/%'] = array(
    'title' => 'Aggregated NCDA scoreboard for village',
    'description' => 'View Aggregated NCDA scoreboard for village',
    'page callback' => 'hedley_ncda_aggregated_callback_village',
    'page arguments' => [3, 4, 5, 6, 7],
    'access callback' => 'hedley_ncda_aggregated_ncda_report_access',
  );

  return $items;
}

/**
 * Grants access to Aggregated NCDA viewers, superuser and administrators.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function hedley_ncda_aggregated_ncda_report_access() {
  $data_mananger_role = user_role_load_by_name('Data Manager');

  return user_has_role($data_mananger_role->rid) || hedley_admin_administrators_access();
}

/**
 * Implements hook_node_insert().
 */
function hedley_ncda_node_insert($node) {
  $ncda_enabled = variable_get('hedley_admin_feature_ncda_enabled', FALSE);
  if (!$ncda_enabled) {
    return;
  }

  if ($node->type == 'village') {
    hedley_ncda_trigger_recalculation_for_new_village($node);
    return;
  }

  hedley_ncda_trigger_recalculation_by_measurement($node);
}

/**
 * Implements hook_node_update().
 */
function hedley_ncda_node_update($node) {
  $ncda_enabled = variable_get('hedley_admin_feature_ncda_enabled', FALSE);
  if (!$ncda_enabled) {
    return;
  }

  if ($node->type == 'person') {
    hedley_ncda_trigger_recalculation_by_edited_person($node);
    return;
  }

  hedley_ncda_trigger_recalculation_by_measurement($node);
}

/**
 * Implements hook_advanced_queue_info().
 */
function hedley_ncda_advanced_queue_info() {
  $items[HEDLEY_NCDA_CALCULATE_AGGREGATED_DATA] = [
    'label' => t('Calculate Aggregated NCDA data'),
    'worker callback' => 'hedley_ncda_calculate_aggregated_data_worker',
    'groups' => [
      'hedley',
    ],
    // The number of seconds to retry after.
    'retry after' => 120,
    // The maximum number of attempts after a failure.
    'max attempts' => 3,
  ];

  return $items;
}

/**
 * Advanced queue worker; Calculate aggregated NCDA data for person.
 *
 * @param object $queue_item
 *   The item object to process.
 *
 * @return array
 *   Array indicating if the process succeeded, or an array with
 *   "status" and "result" keys.
 */
function hedley_ncda_calculate_aggregated_data_worker($queue_item) {
  if (!$person_id = $queue_item->data['person_id']) {
    return [
      'status' => ADVANCEDQUEUE_STATUS_FAILURE,
      'result' => t('Does not have Person Node ID.'),
    ];
  }

  try {
    $person = node_load($person_id);
    hedley_ncda_calculate_aggregated_data_for_person($person);
  }
  catch (Exception $e) {
    return [
      'status' => ADVANCEDQUEUE_STATUS_FAILURE_RETRY,
      'result' => $e->getMessage(),
    ];
  }

  $params = [
    '@nid' => $person_id,
  ];
  return [
    'status' => ADVANCEDQUEUE_STATUS_SUCCESS,
    'result' => t('Aggregated NCDA data has been calculated for person ID: @nid', $params),
  ];
}

/**
 * Callback for Elm application of administrative division selection.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_aggregated_callback_menu() {
  $site = variable_get('hedley_general_site_name', '');
  return hedley_ncda_build_elm_app('menu', ['site' => $site]);
}

/**
 * Callback for aggregated NCDA elm application of district.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_aggregated_callback_district($province, $district) {
  return hedley_ncda_build_results_app($province, $district);
}

/**
 * Callback for aggregated NCDA elm application of sector.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_aggregated_callback_sector($province, $district, $sector) {
  return hedley_ncda_build_results_app($province, $district, $sector);
}

/**
 * Callback for aggregated NCDA elm application of cell.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_aggregated_callback_cell($province, $district, $sector, $cell) {
  return hedley_ncda_build_results_app($province, $district, $sector, $cell);
}

/**
 * Callback for aggregated NCDA elm application of village.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 * @param int $village
 *   The village ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_aggregated_callback_village($province, $district, $sector, $cell, $village) {
  return hedley_ncda_build_results_app($province, $district, $sector, $cell, $village);
}

/**
 * Build results app for aggregated NCDA.
 *
 * Based on input fields, determines administrative divisions for which
 * data is provided.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int|null $sector
 *   The sector ID (optional).
 * @param int|null $cell
 *   The cell ID (optional).
 * @param int|null $village
 *   The village ID (optional).
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_build_results_app($province, $district, $sector = NULL, $cell = NULL, $village = NULL) {
  $data = [];

  if (empty($sector)) {
    $data['entity_name'] = $district;
    $data['entity_type'] = 'district';
  }
  elseif (empty($cell)) {
    $data['entity_name'] = $sector;
    $data['entity_type'] = 'sector';
  }
  elseif (empty($village)) {
    $data['entity_name'] = $cell;
    $data['entity_type'] = 'cell';
  }
  else {
    $data['entity_name'] = $village;
    $data['entity_type'] = 'village';
  }

  $data['site'] = variable_get('hedley_general_site_name', '');
  $data['results'] = hedley_ncda_generate_results_data($province, $district, $sector, $cell, $village);

  return hedley_ncda_build_elm_app('results', $data);
}

/**
 * Build Elm application for aggregated NCDA.
 *
 * @param string $page
 *   The page name.
 * @param array $data
 *   The data array to be used by Elm application.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_ncda_build_elm_app($page, array $data) {
  // Add application.
  drupal_add_js(drupal_get_path('module', 'hedley_ncda') . '/js/elm-main.js');
  drupal_add_js(drupal_get_path('module', 'hedley_ncda') . '/js/elm.js');

  // Add CSS.
  drupal_add_css(drupal_get_path('module', 'hedley_ncda') . '/css/aggregated-ncda.css', 'file');

  // Getting a unique ID for the app.
  $app_id = drupal_html_id('elm-app');

  // Add settings.
  $settings = [
    'elm_apps' => [
      $app_id => [
        'page' => $page,
        'data' => $data,
      ],
    ],
  ];
  drupal_add_js($settings, 'setting');

  // Return the HTML markup for the Elm application.
  return '<div id="' . $app_id . '"></div>';
}

/**
 * Generate aggregated NCDA data which is stored on person nodes.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 * @param int $village
 *   The village ID.
 *
 * @return array
 *   An array of generated data.
 */
function hedley_ncda_generate_results_data($province, $district, $sector, $cell, $village) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_province', 'value', $province)
    ->fieldCondition('field_district', 'value', $district)
    ->fieldCondition('field_ncda_data', 'value', NULL, 'IS NOT NULL')
    ->addTag('exclude_deleted');

  if (!empty($sector)) {
    $query->fieldCondition('field_sector', 'value', $sector);
  }

  if (!empty($cell)) {
    $query->fieldCondition('field_cell', 'value', $cell);
  }

  if (!empty($village)) {
    $query->fieldCondition('field_village', 'value', $village);
  }

  $data = [];
  $nid = 0;
  $batch = 400;
  while (TRUE) {
    // Free up memory.
    drupal_static_reset();

    $query = clone $query;
    if ($nid) {
      $query->propertyCondition('nid', $nid, '>');
    }

    $result = $query
      ->range(0, $batch)
      ->execute();

    if (empty($result['node'])) {
      // No more items left.
      break;
    }

    $ids = array_keys($result['node']);
    $nodes = node_load_multiple($ids);
    foreach ($nodes as $node) {
      $json_data = $node->field_ncda_data[LANGUAGE_NONE][0]['value'];
      if (empty($json_data)) {
        continue;
      }

      $decoded = json_decode($json_data);
      $decoded->id = $node->nid;
      $decoded->created = date("Y-m-d", $node->created);

      $data[] = $decoded;
    }

    $nid = end($ids);
  }

  return $data;
}

/**
 * Generate aggregated NCDA data for person, and store in field on person node.
 *
 * @param object $person
 *   Person node for which NCDA data is generated.
 *
 * @return bool
 *   True, if data was calculated for person.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_ncda_calculate_aggregated_data_for_person($person) {
  $birth_date = strtotime($person->field_birth_date[LANGUAGE_NONE][0]['value']);
  if (empty($birth_date)) {
    // We must know the birthdate to be able to present NCDA data.
    return FALSE;
  }

  if ($birth_date < strtotime("-9 year")) {
    // We generate data for children only.
    // Our first records are from Jan 2018, so going back
    // 9 years to make sure we cover all children.
    return FALSE;
  }

  $data['birth_date'] = date("Y-m-d", $birth_date);
  // For now, we assume that pregnancy lasted whole 9 months, which
  // means that estimated delivery date matches the birthdate.
  // At ANC part, we'll try to locate individual participant for the
  // pregnancy, and resolve EDD date from there.
  // We need this because child may have been born premature, and
  // EDD will allow us to present data more accurately.
  $data['edd_date'] = $data['birth_date'];

  $content_types_to_load = hedley_ncda_get_triggering_measurement_types();

  $heights = $weights = $muacs = $ncdas = $nutritions = $send_to_hcs = [];
  $medication_distributions = $immunisations = [];
  $birth_weight = NULL;
  $measurements = hedley_general_get_person_measurements($person->nid, $content_types_to_load);
  if (!empty($measurements)) {
    $nodes = node_load_multiple($measurements);
    foreach ($nodes as $node) {
      if (in_array($node->type, HEDLEY_ACTIVITY_HEIGHT_BUNDLES)) {
        $heights[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_WEIGHT_BUNDLES)) {
        $weights[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_MUAC_BUNDLES)) {
        $muacs[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_NCDA_BUNDLES)) {
        $ncdas[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_NUTRITION_BUNDLES)) {
        $nutritions[] = $node;
        continue;
      }

      if (in_array($node->type, HEDLEY_ACTIVITY_SEND_TO_HC_BUNDLES)) {
        $send_to_hcs[] = $node;
        continue;
      }

      if ($node->type == HEDLEY_ACTIVITY_MEDICATION_DISTRIBUTION_CONTENT_TYPE) {
        $medication_distributions[] = $node;
        continue;
      }

      if (in_array($node->type, hedley_ncda_resolve_immunization_bundles())) {
        $immunisations[] = $node;
        continue;
      }

      // If we got so far, it's pregnancy summary content type.
      // Only thing we need from it is the birth weight.
      if (!empty($node->field_weight) && !empty($node->field_weight[LANGUAGE_NONE][0]['value'])) {
        $birth_weight = $node->field_weight[LANGUAGE_NONE][0]['value'];
      }
    }
  }

  // Birth weight measurement is taken once -
  // at Newborn exam encounter (pregnancy summary measurement), if it
  // was performed, at first NCDA questionnaire, otherwise.
  // Therefore, if we did not resolve birth weight from pregnancy summary,
  // we try to resolve from NCDA questionnaires.
  if (empty($birth_weight)) {
    foreach ($ncdas as $ncda) {
      if (!empty($ncda->field_birth_weight) && !empty($ncda->field_weight[LANGUAGE_NONE][0]['value'])) {
        $birth_weight = $ncda->field_birth_weight[LANGUAGE_NONE][0]['value'];
      }
      break;
    }
  }
  if ($birth_weight) {
    $data['low_birth_weight'] = $birth_weight < 2000;
  }

  $empty_nutrition_values = [
    'severe' => [],
    'moderate' => [],
    'normal' => [],
  ];

  $data['nutrition'] = [
    'stunting' => $empty_nutrition_values,
    'underweight' => $empty_nutrition_values,
    'wasting' => $empty_nutrition_values,
    'muac' => $empty_nutrition_values,
  ];

  foreach ($heights as $height) {
    if (!empty($height->field_zscore_age) && !empty($height->field_zscore_age[LANGUAGE_NONE][0]['value'])) {
      $date_measured = hedley_ncda_get_date_measured($height);
      if (!$date_measured) {
        continue;
      }

      $value = $height->field_zscore_age[LANGUAGE_NONE][0]['value'];
      if ($value <= -3) {
        $data['nutrition']['stunting']['severe'][] = $date_measured;
      }
      elseif ($value <= -2) {
        $data['nutrition']['stunting']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['stunting']['normal'][] = $date_measured;
      }
    }
  }

  foreach ($weights as $weight) {
    $date_measured = hedley_ncda_get_date_measured($weight);
    if (!$date_measured) {
      continue;
    }

    if (!empty($weight->field_zscore_age) && !empty($weight->field_zscore_age[LANGUAGE_NONE][0]['value'])) {
      $value = $weight->field_zscore_age[LANGUAGE_NONE][0]['value'];
      if ($value <= -3) {
        $data['nutrition']['underweight']['severe'][] = $date_measured;
      }
      elseif ($value <= -2) {
        $data['nutrition']['underweight']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['underweight']['normal'][] = $date_measured;
      }
    }

    if (!empty($weight->field_zscore_length) && !empty($weight->field_zscore_length[LANGUAGE_NONE][0]['value'])) {
      $value = $weight->field_zscore_length[LANGUAGE_NONE][0]['value'];
      if ($value <= -3) {
        $data['nutrition']['wasting']['severe'][] = $date_measured;
      }
      elseif ($value <= -2) {
        $data['nutrition']['wasting']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['wasting']['normal'][] = $date_measured;
      }
    }
  }

  foreach ($muacs as $muac) {
    if (!empty($muac->field_muac) && !empty($muac->field_muac[LANGUAGE_NONE][0]['value'])) {
      $date_measured = hedley_ncda_get_date_measured($muac);
      if (!$date_measured) {
        continue;
      }

      $value = $muac->field_muac[LANGUAGE_NONE][0]['value'];
      if ($value <= 11.5) {
        $data['nutrition']['muac']['severe'][] = $date_measured;
      }
      elseif ($value <= 12.5) {
        $data['nutrition']['muac']['moderate'][] = $date_measured;
      }
      else {
        $data['nutrition']['muac']['normal'][] = $date_measured;
      }
    }
  }

  $data['ncda'] = [
    // ANC + Newborn pane.
    'pane1' => [
      'row1' => [],
      'row2' => FALSE,
    ],
    // Universal Intervention pane.
    'pane2' => [
      'row1' => [
        'bcg' => [],
        'opv' => [],
        'dtp' => [],
        'dtp_sa' => [],
        'pcv13' => [],
        'rotarix' => [],
        'ipv' => [],
        'mr' => [],
      ],
      'row2' => [],
      'row3' => [],
      'row4' => [],
      'row5' => [],
    ],
    // Nutrition Behavior pane.
    'pane3' => [
      'row1' => FALSE,
      'row2' => [],
      'row3' => [],
      'row4' => [],
    ],
    // Targeted Interventions pane.
    'pane4' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => [],
      'row5' => [],
      'row6' => [],
    ],
    // Infrastructure, Environment & Wash pane.
    'pane5' => [
      'row1' => [],
      'row2' => [],
      'row3' => [],
      'row4' => FALSE,
      'row5' => [],
    ],
  ];

  $newborn_participant_id = hedley_general_ncda_newborn_participant($person->nid);
  if ($newborn_participant_id) {
    // Resolving EDD date from participant that represents pregnancy.
    $newborn_participant = node_load($newborn_participant_id);
    $edd_date = hedley_ncda_get_date_filed_value($newborn_participant, 'field_expected_date_concluded');
    if (!empty($edd_date)) {
      $data['edd_date'] = $edd_date;
    }
    // Resolving the dates of ANC visits that took place during the pregnancy.
    $encounters_ids = hedley_person_encounters_for_individual_participant($newborn_participant_id);
    if (!empty($encounters_ids)) {
      $encounters = node_load_multiple($encounters_ids);
      foreach ($encounters as $encounter) {
        $encounter_type = $encounter->field_prenatal_encounter_type[LANGUAGE_NONE][0]['value'];
        if (in_array($encounter_type, ['nurse-postpartum', 'chw-postpartum'])) {
          continue;
        }

        $data['ncda']['pane1']['row1'][] = hedley_ncda_get_date_filed_value($encounter, 'field_scheduled_date');
      }
    }
  }

  foreach ($ncdas as $ncda) {
    if (!empty($ncda->field_anc_visits_dates) && !empty($ncda->field_anc_visits_dates[LANGUAGE_NONE])) {
      $anc_visits_dates = $ncda->field_anc_visits_dates[LANGUAGE_NONE];
      foreach ($anc_visits_dates as $date) {
        $data['ncda']['pane1']['row1'][] = hedley_restful_timestamp_only_date($date['value']);
      }

      // ANC visits question is asked once. If answered previously, no
      // other NCDA activity will ask it.
      // Therefore, if we found one answer, no further processing
      // is required.
      break;
    }
  }
  // ANC visits for person will be counted on scorecard, only for
  // positive value (green V mark). Positive value is set in case
  // there are at least 4 anc visits.
  // Therefore, if there are less than 4, we don't pass the data
  // to front-end application, as visits are marked with red X and not
  // green V marks.
  if (count($data['ncda']['pane1']['row1']) < 4) {
    $data['ncda']['pane1']['row1'] = [];
  }

  foreach ($ncdas as $ncda) {
    $date_measured = hedley_ncda_get_date_measured($ncda);
    if (!$date_measured) {
      continue;
    }

    // Process NCDA signs field items.
    $items = field_get_items('node', $ncda, 'field_ncda_signs');
    if (!$items) {
      continue;
    }

    foreach ($items as $item) {
      switch ($item['value']) {
        case 'taken-supplements-per-guidance':
          $data['ncda']['pane1']['row2'] = TRUE;
          break;

        case 'child-receives-dewormer':
          $data['ncda']['pane2']['row3'][] = $date_measured;
          break;

        case 'taking-ongera-mnp':
          $data['ncda']['pane2']['row4'][] = $date_measured;
          break;

        case 'child-receives-ecd':
          $data['ncda']['pane2']['row5'][] = $date_measured;
          break;

        case 'breastfed-for-six-months':
          $data['ncda']['pane3']['row1'] = TRUE;
          break;

        case 'appropriate-complementary-feeding':
          $data['ncda']['pane3']['row2'][] = $date_measured;
          break;

        case 'five-food-groups':
          $data['ncda']['pane3']['row3'][] = $date_measured;
          break;

        case 'meals-at-recommended-times':
          $data['ncda']['pane3']['row4'][] = $date_measured;
          break;

        case 'child-taking-fbf':
          $data['ncda']['pane4']['row1'][] = $date_measured;
          break;

        case 'treated-for-acute-malnutrition':
          $data['ncda']['pane4']['row2'][] = $date_measured;
          break;

        case 'receiving-support':
          $data['ncda']['pane4']['row4'][] = $date_measured;
          break;

        case 'receiving-cash-transfer':
          $data['ncda']['pane4']['row5'][] = $date_measured;
          break;

        case 'conditional-food-items':
          $data['ncda']['pane4']['row6'][] = $date_measured;
          break;

        case 'has-clean-water':
          $data['ncda']['pane5']['row1'][] = $date_measured;
          break;

        case 'has-toilets':
          $data['ncda']['pane5']['row2'][] = $date_measured;
          break;

        case 'has-handwashing-facility':
          $data['ncda']['pane5']['row3'][] = $date_measured;
          break;

        case 'insecticide-treated-bednets':
          $data['ncda']['pane5']['row4'] = TRUE;
          break;

        case 'has-kitchen-garden':
          $data['ncda']['pane5']['row5'][] = $date_measured;
          break;
      }
    }

    // Process Receives Vitamin A field items.
    $items = field_get_items('node', $ncda, 'field_receive_option');
    if (!$items) {
      continue;
    }

    foreach ($items as $item) {
      if ($item['value'] == 'receive') {
        $data['ncda']['pane2']['row2'][] = $date_measured;
        break;
      }
    }
  }

  // In addition to malnutrition treatment we resolve from questioner,
  // we also look at nutrition assessments made at different types of nutrition
  // encounters.
  // We know that patient got treatment for malnutrition, if there's
  // malnutrition assessment on nutrition measurement, and patient was sent
  // to HC on same date.
  // So, first step is to track treatment for malnutrition, we need to know all
  // dates when patient was referred to HC.
  $referrals_to_hc = [
    'group' => [],
    'nutrition' => [],
    'well_child' => [],
  ];
  foreach ($send_to_hcs as $send_to_hc) {
    $items = field_get_items('node', $send_to_hc, 'field_send_to_hc');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_ncda_get_date_measured($send_to_hc);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if ($item['value'] == 'refer-to-hc') {
        $type = hedley_ncda_bundle_to_encounter_type($send_to_hc);
        $referrals_to_hc[$type][] = $date_measured;
        break;
      }
    }
  }

  // Second step is to check when malnutrition assessments were made, and
  // check if patient was referred to HC on those dates.
  foreach ($nutritions as $nutrition) {
    $items = field_get_items('node', $nutrition, 'field_nutrition_assesment');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_ncda_get_date_measured($nutrition);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if (in_array($item['value'], ['malnutrition-moderate', 'malnutrition-severe'])) {
        $type = hedley_ncda_bundle_to_encounter_type($nutrition);
        if (in_array($date_measured, $referrals_to_hc[$type])) {
          $data['ncda']['pane4']['row2'][] = $date_measured;
          break;
        }
      }
    }
  }

  // To track treatment for diarrhea, we can analyze medications that were
  // distributed during acute illness encounters.
  // In case ORS or Zinc were prescribed, we know it was for diarrhea diagnosis.
  foreach ($medication_distributions as $medication_distribution) {
    $items = field_get_items('node', $medication_distribution, 'field_prescribed_medication');
    if (!$items) {
      continue;
    }

    $date_measured = hedley_ncda_get_date_measured($medication_distribution);
    if (!$date_measured) {
      continue;
    }

    foreach ($items as $item) {
      if (in_array($item['value'], ['ors', 'zinc'])) {
        $data['ncda']['pane4']['row3'][] = $date_measured;
        break;
      }
    }
  }

  foreach ($immunisations as $immunisation) {
    $items = field_get_items('node', $immunisation, 'field_administration_dates');
    if (!$items) {
      continue;
    }

    foreach ($items as $item) {
      $vaccination_date = hedley_restful_timestamp_only_date($item['value']);

      switch ($immunisation->type) {
        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_BCG_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_BCG_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['bcg'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_OPV_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_OPV_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['opv'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_DTP_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_DTP_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['dtp'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_DTP_STANDALONE_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_DTP_STANDALONE_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['dtp_sa'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_PCV13_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_PCV13_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['pcv13'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_ROTARIX_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_ROTARIX_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['rotarix'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_IPV_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_IPV_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['ipv'][] = $vaccination_date;
          break;

        case HEDLEY_ACTIVITY_CHILD_SCOREBOARD_MR_IMMUNISATION_CONTENT_TYPE:
        case HEDLEY_ACTIVITY_WELL_CHILD_MR_IMMUNISATION_CONTENT_TYPE:
          $data['ncda']['pane2']['row1']['mr'][] = $vaccination_date;
          break;
      }
    }
  }

  $encoded_data = json_encode($data);
  $person->field_ncda_data[LANGUAGE_NONE][0]['value'] = $encoded_data;
  node_save($person);

  return TRUE;
}

/**
 * Maps the bundle of a measurement node to an encounter type.
 *
 * @param object $node
 *   The node object.
 *
 * @return string|bool
 *   The corresponding encounter type, or FALSE if not found.
 */
function hedley_ncda_bundle_to_encounter_type($node) {
  switch ($node->type) {
    case HEDLEY_ACTIVITY_GROUP_SEND_TO_HC_CONTENT_TYPE:
    case HEDLEY_ACTIVITY_NUTRITION_CONTENT_TYPE:
      return 'group';

    case HEDLEY_ACTIVITY_NUTRITION_SEND_TO_HC_CONTENT_TYPE:
    case HEDLEY_ACTIVITY_NUTRITION_NUTRITION_CONTENT_TYPE:
      return 'nutrition';

    case HEDLEY_ACTIVITY_WELL_CHILD_SEND_TO_HC_CONTENT_TYPE:
    case HEDLEY_ACTIVITY_WELL_CHILD_NUTRITION_CONTENT_TYPE:
      return 'well_child';

    default:
      return FALSE;
  }
}

/**
 * Triggers recalculation of person's NCDA data based on it's measurement node.
 *
 * @param object $node
 *   The node object of a measurement.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_ncda_trigger_recalculation_by_measurement($node) {
  $triggering_measurement_types = hedley_ncda_get_triggering_measurement_types();
  if (!in_array($node->type, $triggering_measurement_types)) {
    // Not a triggering measurement.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->__isset('field_person')) {
    // Can't resolve to which person measurement belongs.
    return;
  }

  $person_id = $wrapper->field_person->value(['identifier' => TRUE]);
  // Trigger recalculation using AQ.
  hedley_general_add_task_to_advanced_queue_by_id(HEDLEY_NCDA_CALCULATE_AGGREGATED_DATA, $person_id, [
    'person_id' => $person_id,
  ]);
}

/**
 * Triggers recalculation of village residents NCDA data on village creation.
 *
 * @param object $node
 *   The node object of a village.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_ncda_trigger_recalculation_for_new_village($node) {
  $residents = hedley_chw_get_village_residents($node->nid);

  foreach ($residents as $resident) {
    hedley_general_add_task_to_advanced_queue_by_id(HEDLEY_NCDA_CALCULATE_AGGREGATED_DATA, $resident, [
      'person_id' => $resident,
    ]);
  }
}

/**
 * Triggers recalculation of person's NCDA data, when edited.
 *
 * Recalculation is required only when birth date is edited.
 * Note: currently, editing geo fields of person is not allowed.
 *
 * @param object $node
 *   The node object of a village.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_ncda_trigger_recalculation_by_edited_person($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper_orig = entity_metadata_wrapper('node', $node->original);

  $birth_date = $wrapper->field_birth_date->value();
  $birth_date_orig = $wrapper_orig->field_birth_date->value();

  if ($birth_date == $birth_date_orig) {
    return;
  }

  hedley_general_add_task_to_advanced_queue_by_id(HEDLEY_NCDA_CALCULATE_AGGREGATED_DATA, $node->nid, [
    'person_id' => $node->nid,
  ]);
}

/**
 * Retrieves the date measured field value from measurement node.
 *
 * @param object $node
 *   The node object.
 *
 * @return string|bool
 *   The date measured or FALSE if not found.
 */
function hedley_ncda_get_date_measured($node) {
  return hedley_ncda_get_date_filed_value($node, 'field_date_measured');
}

/**
 * Retrieves the value for date field of a node.
 *
 * @param object $node
 *   The node object.
 * @param string $field_name
 *   Then name of date field.
 *
 * @return string|bool
 *   The value of date field, or FALSE if not found.
 */
function hedley_ncda_get_date_filed_value($node, $field_name) {
  if (!field_info_field($field_name)) {
    return FALSE;
  }

  $field = $node->{$field_name};

  if (empty($field) || empty($field[LANGUAGE_NONE][0]['value'])) {
    return FALSE;
  }

  return hedley_restful_timestamp_only_date($field[LANGUAGE_NONE][0]['value']);
}

/**
 * Resolves the participant (pregnancy) of newborn child.
 *
 * @param int $child_id
 *   Child ID.
 *
 * @return int|bool
 *   Participant ID, FALSE if not found.
 */
function hedley_general_ncda_newborn_participant($child_id) {
  $query = db_select('field_data_field_newborn', 't');
  $query->addField('t', 'entity_id');
  $query->condition('field_newborn_target_id', $child_id);
  $query->range(0, 1);

  $result = $query->execute()->fetchCol();

  return !empty($result) ? $result[0] : FALSE;
}

/**
 * Retrieves measurement types that need to trigger NCDA recalculation.
 *
 * @return array
 *   The array of triggering measurement types.
 */
function hedley_ncda_get_triggering_measurement_types() {
  return array_merge(
    [
      HEDLEY_ACTIVITY_WELL_CHILD_PREGNANCY_SUMMARY_CONTENT_TYPE,
      HEDLEY_ACTIVITY_MEDICATION_DISTRIBUTION_CONTENT_TYPE,
      HEDLEY_ACTIVITY_WELL_CHILD_MEBENDEZOLE_CONTENT_TYPE,
      HEDLEY_ACTIVITY_WELL_CHILD_VITAMIN_A_CONTENT_TYPE,
      HEDLEY_ACTIVITY_WELL_CHILD_ECD_CONTENT_TYPE,
    ],
    HEDLEY_ACTIVITY_NCDA_BUNDLES,
    HEDLEY_ACTIVITY_HEIGHT_BUNDLES,
    HEDLEY_ACTIVITY_WEIGHT_BUNDLES,
    HEDLEY_ACTIVITY_MUAC_BUNDLES,
    HEDLEY_ACTIVITY_NUTRITION_BUNDLES,
    HEDLEY_ACTIVITY_SEND_TO_HC_BUNDLES,
    hedley_ncda_resolve_immunization_bundles()
  );
}

/**
 * Generates a list of immunization bundles relevant for NCDA.
 *
 * @return string[]
 *   List of immunization bundles.
 */
function hedley_ncda_resolve_immunization_bundles() {
  return array_merge(
    HEDLEY_ACTIVITY_WELL_CHILD_IMMUNISATION_BUNDLES,
    HEDLEY_ACTIVITY_CHILD_SCOREBOARD_IMMUNISATION_BUNDLES
  );
}
