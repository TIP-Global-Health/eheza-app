<?php

/**
 * @file
 * Code for the Hedley Device feature.
 */

use Ramsey\Uuid\Uuid;

include_once 'hedley_device.features.inc';

// A UUIDv4 (randomly generated) which we'll use for generating a UUIDv5 for
// nodes created on the backend. Nodes created on devices and synced to the
// backend will be given UUIDs by the devices themselves (based on device UUIDs
// assigned when they pair). We could generate this dynamically on install, but
// there doesn't seem to be any disadvantage to just making it a constant.
define('HEDLEY_DEVICE_BACKEND_UUID', 'c700aec4-92c1-46b2-8894-8f4f82869c79');

/**
 * Implements hook_node_presave().
 */
function hedley_device_node_presave($node) {
  // Create a revision unless disabled.
  $revisions_disabled = variable_get('hedley_device_disable_revisions', FALSE);
  if (!$revisions_disabled) {
    $node->revision = TRUE;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  // For nodes that got a UUID field.
  if ($wrapper->__isset('field_uuid')) {
    hedley_device_assign_uuid($node, $wrapper);
    hedley_device_verify_unique_uuid($node, $wrapper);
  }

  if ($node->type == 'device') {
    hedley_device_assign_pairing_code($node, $wrapper);
  }

  // For nodes that got Shards field.
  if ($wrapper->__isset('field_shards')) {
    hedley_device_assign_shards($node, $wrapper);
  }
}

/**
 * Implements hook_node_update().
 */
function hedley_device_node_update($node) {
  if ($node->type != 'device') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node->original);
  $pairing_code = $wrapper->field_pairing_code->value();
  $super_user_mode = variable_get('hedley_super_user_mode', FALSE);

  // Do not allow to reset device pairing code, if it was already
  // paired (pairing code is empty). This check is skipped when
  // working at 'super_user' mode.
  if (empty($pairing_code) && !$super_user_mode) {
    throw new Exception('Device can\'t be edited after it was paired!');
  }
}

/**
 * Assign or check a pairing code.
 */
function hedley_device_assign_pairing_code($node, $wrapper) {
  if (empty($node->nid)) {
    // New device, so we generate a pairing code if not set manually.
    if (empty($wrapper->field_pairing_code->value())) {
      $wrapper->field_pairing_code->set(hedley_device_get_unique_pairing_code());
    }
    elseif (!hedley_device_check_unique_pairing_code($wrapper->field_pairing_code->value())) {
      throw new Exception('The provided pairing code was not unique.');
    }

    // And we make a robot user to authenticate for syncing.
    $role = user_role_load_by_name('sync');

    $account = entity_create('user', [
      'name' => $node->title . ' Robot',
      'mail' => 'robot@no-reply.com',
      'roles' => [$role->rid => $role->name],
      'status' => TRUE,
    ]);

    $wrapper = entity_metadata_wrapper('user', $account);
    $wrapper->save();

    // Set the author.
    $node->uid = $account->uid;
  }
  elseif (!hedley_device_check_unique_pairing_code($wrapper->field_pairing_code->value(), $wrapper->getIdentifier())) {
    // Existing device, so throw error if it's not unique.
    throw new Exception('The provided pairing code was not unique.');
  }
}

/**
 * Return an 8-digit unique pairing code.
 *
 * @return int
 *   The pincode.
 */
function hedley_device_get_unique_pairing_code() {
  $rand = rand(10000000, 99999999);

  if (hedley_device_check_unique_pairing_code($rand)) {
    // Pairing code is unique.
    return $rand;
  }

  // Try again.
  return hedley_device_get_unique_pairing_code();
}

/**
 * Check whether the supplied pairing code is already used.
 *
 * @param string $code
 *   The pairing code to check.
 * @param null|int $nid
 *   Optional; A node ID to ignore.
 *
 * @return bool
 *   TRUE if the supplied pairing code is unique
 */
function hedley_device_check_unique_pairing_code($code, $nid = NULL) {
  if (empty($code)) {
    // An empty pairing code is permissible.
    return TRUE;
  }

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'device')
    ->fieldCondition('field_pairing_code', 'value', $code)
    // Enough to know if there is one more.
    ->range(0, 1);

  if ($nid) {
    $query->propertyCondition('nid', $nid, '<>');
  }

  $count = $query
    ->count()
    ->execute();

  return $count == 0;
}

/**
 * Assign a UUID to the node.
 */
function hedley_device_assign_uuid($node, $wrapper) {
  $uuid = $wrapper->field_uuid->value();

  if (empty($uuid)) {
    // If we don't have a UUID, then make one.
    $uuid = Uuid::uuid5(HEDLEY_DEVICE_BACKEND_UUID, uniqid('', TRUE));
    $wrapper->field_uuid->set($uuid->toString());
  }
  elseif (!Uuid::isValid($uuid)) {
    // If we do have a UUID, then validate it.
    $message = "The supplied UUID '$uuid' is not a valid UUID. Leave it blank to auto-generate.";
    throw new Exception($message);
  }
  elseif (!empty($node->original)) {
    // If we had a UUID, prevent modifying it.
    $original_wrapper = entity_metadata_wrapper('node', $node->original);
    $original_uuid = $original_wrapper->field_uuid->value();

    if (!empty($original_uuid) && $uuid != $original_uuid) {
      throw new Exception('You cannot modify a UUID once it is assigned.');
    }
  }
}

/**
 * Verify the UUID of the node being saved isn't duplicated.
 */
function hedley_device_verify_unique_uuid($node, $wrapper) {
  $uuid = $wrapper->field_uuid->value();
  // Search for other usages of the current UUID.
  $query = db_select('field_data_field_uuid', 'uuid')
    ->fields('uuid', ['entity_type', 'entity_id']);
  // Ignore the row of the current entity (At least one of entity ID or type has
  // to be different than the entity being checked for counting duplicates).
  $ignore_current_entity = db_or()
    ->condition('entity_id', $wrapper->getIdentifier(), '!=')
    ->condition('entity_type', 'node', '!=');
  $duplicate = $query
    ->condition('field_uuid_value', $uuid)
    ->condition($ignore_current_entity)
    // No need to find more than one duplicate.
    ->range(0, 1)
    ->execute()
    ->fetchObject();

  // Throw an exception if duplicate UUID was found.
  if ($duplicate) {
    $entity_id = $wrapper->getIdentifier();

    $params = [
      '@uuid' => $uuid,
      '@duplicate_type' => $duplicate->entity_type,
      '@duplicate_id' => $duplicate->entity_id,
      '@type' => $wrapper->type(),
      '@id' => !empty($entity_id) ? '#' . $entity_id : '(unsaved)',
    ];
    throw new \Exception(format_string('UUID @uuid is already used on @duplicate_type #@duplicate_id, so node @type @id cannot be saved.', $params));
  }
}

/**
 * Fill in field_shards with the shards this node should be sent to.
 */
function hedley_device_assign_shards($node, $wrapper) {
  // We do no changes, when shards field is already populated.
  if (!empty($wrapper->field_shards->value())) {
    return;
  }

  switch ($node->type) {
    case 'clinic':
      // We only assign shards, when clinic is created, based on
      // HC clinic is assigned to. We do nothing when clinic is edited.
      $shards = empty($node->original) ? [] : [$wrapper->field_health_center->getIdentifier()];
      break;

    case 'session':
      // Assign shards based on HC of the clinic, to which session belongs.
      $clinic_id = $wrapper->field_clinic->getIdentifier();
      $shard = hedley_device_shard_by_health_center($clinic_id);
      $shards = !$shard ? [] : [$shard];
      break;

    case 'person':
      // When editing person, calculate shards by it's participants.
      // Note that this only happens when field_shards is not set.
      if ($node->original) {
        $shards = hedley_patient_shards_for_person_by_pmtct_participants($node->nid);
      }
      // When creating person, assign health center as shard.
      else {
        $health_centeter_id = $wrapper->field_health_center->getIdentifier();
        $shards = $health_centeter_id ? [$health_centeter_id] : [];
      }
      break;

    case 'pmtct_participant':
      // Participant shards are the union of adult and child shards.
      $child_id = $wrapper->field_person->getIdentifier();
      $adult_id = $wrapper->field_adult->getIdentifier();
      $shards_child = hedley_device_shards_by_person($child_id);
      $shards_adult = hedley_device_shards_by_person($adult_id);
      $shards = array_unique(array_merge($shards_child, $shards_adult));
      break;

    case 'relationship':
      // Relationship shards are the union of adult and child shards.
      $child_id = $wrapper->field_related_to->getIdentifier();
      $adult_id = $wrapper->field_person->getIdentifier();
      $shards_child = hedley_device_shards_by_person($child_id);
      $shards_adult = hedley_device_shards_by_person($adult_id);
      $shards = array_unique(array_merge($shards_child, $shards_adult));
      break;

    case 'prenatal_encounter':
    case 'nutrition_encounter':
      // Assign shards based on Person of the individual participant,
      // to which encounter belongs.
      $person_id = $wrapper->field_individual_participant->field_person->getIdentifier();
      $shards = hedley_device_shards_by_person($person_id);
      break;

    // Handling individual_participant and all kinds of measurements.
    // Shards are assigned based on Person for which measurement was taken.
    default:
      $person_id = $wrapper->field_person->getIdentifier();
      $shards = hedley_device_shards_by_person($person_id);
      break;
  }

  if (empty($shards)) {
    return;
  }

  $wrapper->field_shards->set($shards);
}

/**
 * Resolve a shard based on HC field of the node.
 *
 * @param int $nid
 *   The node ID.
 *
 * @return int|bool
 *   Node ID of the shard. False, if shard wasn't successfully resolved.
 */
function hedley_device_shard_by_health_center($nid) {
  if (!$nid) {
    return FALSE;
  }

  $wrapper = entity_metadata_wrapper('node', $nid);
  $shard = $wrapper->field_health_center->getIdentifier();

  return $shard ? $shard : FALSE;
}

/**
 * Resolve shards based on Person field of the node.
 *
 * @param int $nid
 *   The node ID.
 *
 * @return array
 *   List of shards node IDs. Empty array, if none are found.
 */
function hedley_device_shards_by_person($nid) {
  if (!$nid) {
    return [];
  }

  $wrapper = entity_metadata_wrapper('node', $nid);
  $shards = $wrapper->field_shards->value(['identifier' => TRUE]);

  return !empty($shards) ? $shards : [];
}
