<?php

/**
 * @file
 * Code for the Hedley Person feature.
 */

include_once 'hedley_person.features.inc';

define('HEDLEY_PERSON_EDUCATION_NONE', 0);
define('HEDLEY_PERSON_EDUCATION_PRIMARY', 1);
define('HEDLEY_PERSON_EDUCATION_VOCATIONAL', 2);
define('HEDLEY_PERSON_EDUCATION_SECONDARY', 3);
define('HEDLEY_PERSON_EDUCATION_DIPLOMA', 4);
define('HEDLEY_PERSON_EDUCATION_UNIVERSITY', 5);
define('HEDLEY_PERSON_EDUCATION_ADVANCED', 6);

define('HEDLEY_PERSON_GENDER_MALE', 'male');
define('HEDLEY_PERSON_GENDER_FEMALE', 'female');

define('HEDLEY_PERSON_RELATED_BY_PARENT_OF', 'parent');
define('HEDLEY_PERSON_RELATED_BY_CAREGIVER_FOR', 'caregiver');

// Import CSV column mapping:
define('HEDLEY_PERSON_COLUMN_UNIQUE_ID', 0);
define('HEDLEY_PERSON_COLUMN_ADULT_FIRST_NAME', 1);
define('HEDLEY_PERSON_COLUMN_ADULT_SECOND_NAME', 2);
define('HEDLEY_PERSON_COLUMN_ADULT_BIRTH_DATE', 3);
define('HEDLEY_PERSON_COLUMN_ADULT_ESTIMATED', 4);
define('HEDLEY_PERSON_COLUMN_ADULT_NATIONAL_ID', 5);
define('HEDLEY_PERSON_COLUMN_ADULT_GENDER', 6);
define('HEDLEY_PERSON_COLUMN_ADULT_UBUDEHE', 7);
define('HEDLEY_PERSON_COLUMN_ADULT_EDUCATION_LEVEL', 8);
define('HEDLEY_PERSON_COLUMN_ADULT_MARITAL_STATUS', 9);
define('HEDLEY_PERSON_COLUMN_ADULT_HIV_STATUS', 10);
define('HEDLEY_PERSON_COLUMN_ADULT_NUMBER_OF_CHILDREN', 11);
define('HEDLEY_PERSON_COLUMN_ADULT_PHONE', 12);
define('HEDLEY_PERSON_COLUMN_ADULT_PROVINCE', 13);
define('HEDLEY_PERSON_COLUMN_ADULT_DISTRICT', 14);
define('HEDLEY_PERSON_COLUMN_ADULT_SECTOR', 15);
define('HEDLEY_PERSON_COLUMN_ADULT_CELL', 16);
define('HEDLEY_PERSON_COLUMN_ADULT_VILLAGE', 17);
define('HEDLEY_PERSON_COLUMN_ADULT_HEALTH_CENTER', 18);
define('HEDLEY_PERSON_COLUMN_CHILD_FIRST_NAME', 1);
define('HEDLEY_PERSON_COLUMN_CHILD_SECOND_NAME', 2);
define('HEDLEY_PERSON_COLUMN_CHILD_BIRTH_DATE', 3);
define('HEDLEY_PERSON_COLUMN_CHILD_ESTIMATED', 4);
define('HEDLEY_PERSON_COLUMN_CHILD_NATIONAL_ID', 5);
define('HEDLEY_PERSON_COLUMN_CHILD_GENDER', 6);
define('HEDLEY_PERSON_COLUMN_CHILD_UBUDEHE', 7);
define('HEDLEY_PERSON_COLUMN_CHILD_HIV_STATUS', 8);
define('HEDLEY_PERSON_COLUMN_CHILD_MODE_OF_DELIVERY', 9);
define('HEDLEY_PERSON_COLUMN_CHILD_PARENT_NAME', 10);
define('HEDLEY_PERSON_COLUMN_CHILD_RELATION', 11);
define('HEDLEY_PERSON_COLUMN_CHILD_PROVINCE', 12);
define('HEDLEY_PERSON_COLUMN_CHILD_DISTRICT', 13);
define('HEDLEY_PERSON_COLUMN_CHILD_SECTOR', 14);
define('HEDLEY_PERSON_COLUMN_CHILD_CELL', 15);
define('HEDLEY_PERSON_COLUMN_CHILD_VILLAGE', 16);
define('HEDLEY_PERSON_COLUMN_CHILD_HEALTH_CENTER', 17);


/**
 * Implementation of hook_menu().
 */
function hedley_person_menu() {
  $items = [];

  $items['admin/content/import'] = [
    'type' => MENU_LOCAL_TASK,
    'title' => 'Import',
    'description' => 'Import participants form spreadsheet on Google Drive',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['hedley_person_import_form'],
    'access callback' => TRUE,
  ];

  return $items;
}

function hedley_person_import_form($form, &$form_state) {
  if (empty($form_state['storage'])) {
    return hedley_person_get_data($form, $form_state);
  }

  switch  ($form_state['storage']['step']) {
    case 'confirmation':
      return hedley_person_confirmation($form, $form_state);

    case 'summary':
      return hedley_person_summary($form, $form_state);
  }
}

function hedley_person_get_data($form, $form_state) {
  $form['#prefix'] = '<div id="get-data-form-wrapper">';
  $form['#suffix'] = '</div>';
  $form['#tree'] = TRUE;

  $form['spreadsheet_id'] = [
    '#title' => 'Please enter Google spreadsheet ID you wish to import',
    '#type' => 'textfield',
    '#default_value' => '1AywJcgLQIxTDW9k_a_j4sZiRxI76RiPX_VbpeRm2KcU',
//    '#default_value' => '1hJ8bo9GNu-6mPf22VYiISle86WMLv0MhF2rXyNJH3O4',
    '#size' => 60,
    '#required' => TRUE,
  ];

  $form['actions']['submit'] = [
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#submit' => ['hedley_person_import_get_data'],
    '#limit_validation_errors' => [],
    '#ajax' => array(
      'wrapper' => 'get-data-form-wrapper',
      'callback' => 'hedley_person_import_form_callback',
      'effect' => 'fade',
    ),
  ];

  return $form;
}

function hedley_person_confirmation($form, $form_state) {
  $form['#prefix'] = '<div id="confirmation-form-wrapper">';
  $form['#suffix'] = '</div>';

  $form['message'] = [
    '#title' => $form_state['storage']['message'],
    '#type' => 'item',
    '#size' => 60,
  ];

  $form['actions']['submit'] = [
    '#type'   => 'submit',
    '#value'  => t('Yes'),
    '#submit' => ['hedley_person_execute_import'],
    '#limit_validation_errors' => [],
    '#ajax' => array(
      'wrapper' => 'confirmation-form-wrapper',
      'callback' => 'hedley_person_import_form_callback',
      'effect' => 'fade',
    ),
  ];

  $form['actions']['cancel'] = [
    '#type'   => 'submit',
    '#value'  => t('No'),
    '#submit' => ['hedley_person_reset_form'],
    '#limit_validation_errors' => [],
  ];

  return $form;
}

function hedley_person_summary($form, $form_state) {
  $form['message'] = [
    '#markup' => $form_state['storage']['message'],
    '#type' => 'item',
    '#size' => 60,
  ];

  $form['actions']['submit'] = [
    '#type'   => 'submit',
    '#value'  => t('Ok'),
    '#submit' => ['hedley_person_reset_form'],
    '#limit_validation_errors' => [],
  ];

  return $form;
}

function hedley_person_import_get_data($form, &$form_state) {
  dpm('Hello');
  $spreadsheet_id = $form_state['input']['spreadsheet_id'];
  $spreadsheet_uri = "https://docs.google.com/spreadsheets/d/" . $spreadsheet_id . "/export?format=csv";

  $file_content = file_get_contents($spreadsheet_uri);
  if (!$file_content) {
    form_set_error('spreadsheet_id', t('Failed to fetch Google spreadsheet as CSV.'));
    return;
  }

  $spreadsheet_destination = 'temporary://import_' . '_' . date('h-i-s-j-m-Y') . '.csv';
  $file = file_save_data($file_content, $spreadsheet_destination);

  $fp = fopen($file->uri,'r');
  $line = fgets($fp);

  $fields = explode(',', $line);
  $fields_count = count($fields);

  if ($fields_count < 18) {
    form_set_error('spreadsheet_id', t('Fetch CSV file is improperly formatted.'));
    return;
  }

  $patient_type = ($fields[HEDLEY_PERSON_COLUMN_CHILD_RELATION] == 'Relation') ? 'child' : 'adult';
  $patients_count = 0;
  while (($line = fgets($fp)) !== FALSE) {
    $patients_count++;
  }

  fclose($fp);

  $patients = $patient_type == 'child' ? 'children' : 'adults';
  $message = 'You are about to import ' . $patients_count . ' ' .  $patients . '. Proceed?';

  $form_state['storage']['message'] = $message;
  $form_state['storage']['$patient_type'] = $patient_type;
  $form_state['storage']['file_uri'] = $file->uri;
  $form_state['storage']['step'] = 'confirmation';
  $form_state['rebuild'] = TRUE;
}

function hedley_person_execute_import($form, &$form_state) {
  $file_uri = $form_state['storage']['file_uri'];
  $patient_type = $form_state['storage']['$patient_type'];

  $fp = fopen($file_uri,'r');
  // Skip field names line.
  fgets($fp);

  $errors = $warnings = [];
  while (($line = fgets($fp)) !== FALSE) {
    $values = explode(',', $line);
    $unique_id = trim($values[HEDLEY_PERSON_COLUMN_UNIQUE_ID]);

    if ($unique_id  > 7) {
      break;
    }

    $first_name = $patient_type == 'child' ?
      $values[HEDLEY_PERSON_COLUMN_CHILD_FIRST_NAME] :
      $values[HEDLEY_PERSON_COLUMN_ADULT_FIRST_NAME];

    $second_name = $patient_type == 'child' ?
      $values[HEDLEY_PERSON_COLUMN_CHILD_SECOND_NAME] :
      $values[HEDLEY_PERSON_COLUMN_ADULT_SECOND_NAME];

    if (empty($first_name) && empty($second_name)) {
      $errors[$unique_id ] = ['Missing first and last name'];
      continue;
    }

    $title = empty($first_name) ? $second_name : $second_name . ' ' . $first_name;
    $node = hedley_person_create_basic_node('person', $title);
    $node->field_first_name[$node->language][]['value'] = $first_name;
    $node->field_second_name[$node->language][]['value'] = $second_name;
    node_save($node);

    $errs = $wrns = [];
    hedley_person_populate_patient_fields($patient_type, $values, $node,$errs,$wrns);

    if (!empty($errs)) {
      $errors[$unique_id] = $errs;
    }

    if (!empty($wrns)) {
      $warnings[$unique_id] = $wrns;
    }
  }

  fclose($fp);

  $err_message = '';
  if (!empty($errors)) {
    $err_message = '<div>ERRORS:</div>';
    foreach ($errors as $id => $errs) {
      $err_message .= "<div style=\"margin-left: 10px\">Unique ID $id:</div>";
      foreach ($errs as $err) {
        $err_message .= "<div style=\"margin-left: 20px\">$err</div>";
      }
    }
  }

  $wrn_message = '';
  if (!empty($warnings)) {
    $wrn_message = '<div>WARNINGS:</div>';

    foreach ($warnings as $id => $wrns) {
      $wrn_message .= "<div style=\"margin-left: 10px\">Unique ID $id:</div>";
      foreach ($wrns as $wrn) {
        $wrn_message .= "<div style=\"margin-left: 20px\">$wrn</div>";
      }
    }
  }

  $message = empty($err_message) && empty($wrn_message) ?
    'Import completed sucessfully!' : $err_message . $wrn_message;

  $form_state['storage']['message'] = $message;
  $form_state['storage']['step'] = 'summary';
  $form_state['rebuild'] = TRUE;
}

function hedley_person_reset_form($form, &$form_state) {
  $form_state['storage'] = [];
  $form_state['rebuild'] = TRUE;
}

function hedley_person_populate_patient_fields($patient_type, $values, $node, &$errors, &$warnings) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Common logic
  if ($patient_type == 'child') {
    $birth_date =  trim($values[HEDLEY_PERSON_COLUMN_CHILD_BIRTH_DATE]);
    $estimated = trim($values[HEDLEY_PERSON_COLUMN_CHILD_ESTIMATED]);
    $national_id = trim($values[HEDLEY_PERSON_COLUMN_CHILD_NATIONAL_ID]);
    $gender = trim($values[HEDLEY_PERSON_COLUMN_CHILD_GENDER]);
    $ubudehe = trim($values[HEDLEY_PERSON_COLUMN_CHILD_UBUDEHE]);
    $hiv_status = trim($values[HEDLEY_PERSON_COLUMN_CHILD_HIV_STATUS]);
    $province = trim($values[HEDLEY_PERSON_COLUMN_CHILD_PROVINCE]);
    $district = trim($values[HEDLEY_PERSON_COLUMN_CHILD_DISTRICT]);
    $sector = trim($values[HEDLEY_PERSON_COLUMN_CHILD_SECTOR]);
    $cell = trim($values[HEDLEY_PERSON_COLUMN_CHILD_CELL]);
    $village = trim($values[HEDLEY_PERSON_COLUMN_CHILD_VILLAGE]);
    $health_center = trim($values[HEDLEY_PERSON_COLUMN_CHILD_HEALTH_CENTER]);
  }
  else {
    $birth_date =  trim($values[HEDLEY_PERSON_COLUMN_ADULT_BIRTH_DATE]);
    $estimated = trim($values[HEDLEY_PERSON_COLUMN_ADULT_ESTIMATED]);
    $national_id = trim($values[HEDLEY_PERSON_COLUMN_ADULT_NATIONAL_ID]);
    $gender = trim($values[HEDLEY_PERSON_COLUMN_ADULT_GENDER]);
    $ubudehe = trim($values[HEDLEY_PERSON_COLUMN_ADULT_UBUDEHE]);
    $hiv_status = trim($values[HEDLEY_PERSON_COLUMN_ADULT_HIV_STATUS]);
    $province = trim($values[HEDLEY_PERSON_COLUMN_ADULT_PROVINCE]);
    $district = trim($values[HEDLEY_PERSON_COLUMN_ADULT_DISTRICT]);
    $sector = trim($values[HEDLEY_PERSON_COLUMN_ADULT_SECTOR]);
    $cell = trim($values[HEDLEY_PERSON_COLUMN_ADULT_CELL]);
    $village = trim($values[HEDLEY_PERSON_COLUMN_ADULT_VILLAGE]);
    $health_center = trim($values[HEDLEY_PERSON_COLUMN_ADULT_HEALTH_CENTER]);
  }

  // Birth date
  $birth_date =  hedley_person_date_process($birth_date);
  if (!$birth_date) {
    $errors[] = 'Birth Date: unrecognized date format';
  }
  else {
    $wrapper->field_birth_date->set($birth_date);
  }

  // Birth date estimated
  switch (strtolower($estimated)) {
    case 'y':
      $wrapper->field_birth_date_estimated->set(TRUE);
      break;

    case 'n':
      $wrapper->field_birth_date_estimated->set(FALSE);
      break;

    default:
      $errors[] = 'Birth Date Estimated: unexpected value';
  }

  // National ID
  if (strlen($national_id) != 16) {
    $errors[] = 'National ID: not 16 digits';
  }
  else {
    $wrapper->field_national_id_number->set($national_id);
  }

  // Gender
  switch (strtolower($gender)) {
    case 'male':
      $wrapper->field_gender->set('male');
      break;

    case 'female':
      $wrapper->field_gender->set('female');
      break;

    default:
      $errors[] = 'Gender: Invalid value';
  }

  // Ubudehe
  switch (strtolower($ubudehe)) {
    case '1':
    case '2':
    case '3':
    case '4':
      $wrapper->field_ubudehe->set((int) $ubudehe);
      break;

    default:
      $errors[] = 'Ubudehe: Invalid value';
  }
  
  // HIV status
  switch (strtolower($hiv_status)) {
    case '1':
      $wrapper->field_hiv_status->set('hiv-exposed-infant');
      break;

    case '2':
      $wrapper->field_hiv_status->set('negative');
      break;

    case '3':
      $wrapper->field_hiv_status->set('negative-dc');
      break;

    case '4':
      $wrapper->field_hiv_status->set('positive');
      break;

    case '5':
      $wrapper->field_hiv_status->set('unknown');
      break;
      
    default:
      $errors[] = 'Ubudehe: Invalid value';
  }

  // Location
  $wrapper->field_province->set($province);
  $wrapper->field_district->set($district);
  $wrapper->field_sector->set($sector);
  $wrapper->field_cell->set($cell);
  $wrapper->field_village->set($village);

  // Health center
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'health_center')
    ->propertyCondition('title', $health_center)
    ->propertyCondition('status', 1)
    ->range(0, 1)
    ->execute();

  if (empty($result['node'])) {
    $warnings[] = 'Failed to resolve health center.';
  }
  else {
    $wrapper->field_health_center->set(key($result['node']));
  }

  // Type specific logic

  if ($patient_type == 'child') {
    $mode_of_delivery = trim($values[HEDLEY_PERSON_COLUMN_CHILD_MODE_OF_DELIVERY]);

    switch (strtolower($mode_of_delivery)) {
      case '1':
        $wrapper->field_mode_of_delivery->set('svd-episiotomy');
        break;

      case '2':
        $wrapper->field_mode_of_delivery->set('svd-no-episiotomy');
        break;

      case '3':
        $wrapper->field_mode_of_delivery->set('negative-dc');
        break;

      case '4':
        $wrapper->field_mode_of_delivery->set('cesarean-delivery');
        break;

      default:
        $errors[] = 'Mode of delivery: Invalid value';
    }

    $result = hedley_person_create_relationship($wrapper->getIdentifier(), $values);
    if ($result) {
      $warnings[] = $result;
    }
  }
  else {
    $education_level = trim($values[HEDLEY_PERSON_COLUMN_ADULT_EDUCATION_LEVEL]);
    switch ($education_level) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
        $wrapper->field_education_level->set($education_level);
        break;

      default:
        $errors[] = 'Education level: Invalid value';
    }

    $marital_status = strtolower($values[HEDLEY_PERSON_COLUMN_ADULT_MARITAL_STATUS]);
    switch ($marital_status) {
      case 'divorced':
      case 'married':
      case 'single':
      case 'widowed':
        $wrapper->field_marital_status->set($marital_status);
        break;

      default:
        $errors[] = 'Marital status: Invalid value';
    }

    $number_of_children = (int) strtolower($values[HEDLEY_PERSON_COLUMN_ADULT_NUMBER_OF_CHILDREN]);
    if ($number_of_children >= 0 && $number_of_children <= 5) {
      $wrapper->field_number_of_children->set($number_of_children);
    }
    else {
      $errors[] = 'Number of children under 5: Invalid value';
    }

    $wrapper->field_phone_number->set(trim($values[HEDLEY_PERSON_COLUMN_ADULT_PHONE]));
  }

  if (empty($errors)) {
    $wrapper->save();
  }
}

function hedley_person_date_process($trimmed) {
  if (empty($trimmed)) {
    return $trimmed;
  }

  // Some dates are year-only ... we'll make those Jan. 1.
  if (preg_match('/^\\d\\d\\d\\d$/', $trimmed)) {
    $trimmed = "$trimmed-01-01";
  }

  if (preg_match('/^\\d\\d-\\d\\d-\\d\\d$/', $trimmed)) {
    return DateTime::createFromFormat('!y-m-d', $trimmed)->getTimestamp();
  }

  if (preg_match('/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/', $trimmed)) {
    return DateTime::createFromFormat('!Y-m-d', $trimmed)->getTimestamp();
  }

  if (preg_match('@^\\d\\d?/\\d\\d?/\\d\\d\\d\\d@', $trimmed)) {
    return DateTime::createFromFormat('!d/m/Y', $trimmed)->getTimestamp();
  }

  return FALSE;
}

function hedley_person_create_relationship($child_nid, $values) {
  $relation = strtolower(trim($values[HEDLEY_PERSON_COLUMN_CHILD_RELATION]));
  if (!in_array($relation, ['parent', 'caregiver'])) {
    return 'Relation: Invalid value';
  }
  
  // Resolve mother.
  $adult_name = trim($values[HEDLEY_PERSON_COLUMN_CHILD_PARENT_NAME]);
  $query = new EntityFieldQuery();

  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'person')
    ->propertyCondition('title', $adult_name)
    ->propertyCondition('status', 1)
    ->propertyOrderBy('nid','DESC')
    ->execute();

  if (empty($result['node'])) {
    return 'Failed to resolve ' . $relation . ' for child';
  }
  
  $candidates = node_load_multiple(array_keys($result['node']));
  foreach ($candidates as $candidate) {
    $wrapper = entity_metadata_wrapper('node', $candidate);
    $birth_date = $wrapper->field_birth_date->value();
    
    if ((time() - strtotime($birth_date)) / (365 * 24 * 3600) > 13) {
      $relationship = hedley_person_create_basic_node('relationship');
      $wrapper = entity_metadata_wrapper('node', $relationship);
      $wrapper->field_person->set($candidate->nid);
      $wrapper->field_related_by->set($relation);
      $wrapper->field_related_to->set($child_nid);
      $wrapper->save();
      return;
    }
  }

  // If we got so far, we failed to create a relationship.
  return "Failed to resolve $relation for child";
}

function hedley_person_create_basic_node($type, $title = '') {
  global $user;

  $node = new stdClass();
  $node->title = $title;
  $node->type = $type;
  node_object_prepare($node);

  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  
  $node = node_submit($node);
  node_save($node);

  return $node;
}

function hedley_person_import_form_callback($form, $form_state) {
  return $form;
}

