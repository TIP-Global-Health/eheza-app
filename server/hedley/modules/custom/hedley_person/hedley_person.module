<?php

/**
 * @file
 * Code for the Hedley Person feature.
 */

include_once 'hedley_person.features.inc';

define('HEDLEY_PERSON_EDUCATION_NONE', 0);
define('HEDLEY_PERSON_EDUCATION_PRIMARY', 1);
define('HEDLEY_PERSON_EDUCATION_VOCATIONAL', 2);
define('HEDLEY_PERSON_EDUCATION_SECONDARY', 3);
define('HEDLEY_PERSON_EDUCATION_DIPLOMA', 4);
define('HEDLEY_PERSON_EDUCATION_UNIVERSITY', 5);
define('HEDLEY_PERSON_EDUCATION_ADVANCED', 6);

define('HEDLEY_PERSON_GENDER_MALE', 'male');
define('HEDLEY_PERSON_GENDER_FEMALE', 'female');

define('HEDLEY_PERSON_RELATED_BY_CHILD', 'child');
define('HEDLEY_PERSON_RELATED_BY_PARENT_OF', 'parent');
define('HEDLEY_PERSON_RELATED_BY_CAREGIVER_FOR', 'caregiver');

define('HEDLEY_PERSON_CLINIC_TYPE_SORWATHE', 'sorwathe');

/**
 * Get a relationships by a person.
 *
 * @param int $person_id
 *   The person node ID.
 * @param string $relation_type
 *   Optional; the type of the relation, can be either "parent" or "child".
 *
 * @return array
 *   Node IDs if they exist or empty array if no nodes exist.
 */
function hedley_person_get_relationships($person_id, $relation_type = HEDLEY_PERSON_RELATED_BY_PARENT_OF) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'relationship')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 1);

  if ($relation_type == HEDLEY_PERSON_RELATED_BY_PARENT_OF) {
    $query
      ->fieldCondition('field_person', 'target_id', $person_id);
  }
  else {
    $query
      ->fieldCondition('field_related_to', 'target_id', $person_id);
  }

  $result = $query->execute();

  return !empty($result['node']) ? array_keys($result['node']) : [];
}

/**
 * Implements hook_node_update().
 *
 * When child age is edited, updates graduation date for all
 * it's pmtct_participants.
 */
function hedley_person_node_update($node) {
  if ($node->type != 'person') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper_orig = entity_metadata_wrapper('node', $node->original);

  $birth_date = $wrapper->field_birth_date->value();
  $birth_date_orig = $wrapper_orig->field_birth_date->value();

  if (empty($birth_date) || $birth_date === $birth_date_orig) {
    return;
  }

  $ids = hedley_person_pmtct_participants_for_child($node->nid);
  if (empty($ids)) {
    return;
  }

  $participants = node_load_multiple($ids);
  foreach ($participants as $participant) {
    $participant_wrapper = entity_metadata_wrapper('node', $participant);

    $clinic_type = $participant_wrapper->field_clinic->field_group_type->value();
    // We do not set graduation date for sorwathe group participants.
    if (empty($clinic_type) || $clinic_type == HEDLEY_PERSON_CLINIC_TYPE_SORWATHE) {
      continue;
    }
    $expected = $participant_wrapper->field_expected->value();

    $participant_wrapper->field_expected->set([
      'value' => $expected['value'],
      'value2' => date('Y-m-d', strtotime("+26 month", $birth_date)),
    ]);
    $participant_wrapper->save();
  }
}

/**
 * Resolves all pmtct_participant nodes IDs for child.
 *
 * @param int $nid
 *   Child node ID.
 *
 * @return array
 *   List of pmtct_participant nodes IDs.
 */
function hedley_person_pmtct_participants_for_child($nid) {
  $query = db_select('field_data_field_person', 'person');
  $query->addField('person', 'entity_id');
  $query->condition('bundle', 'pmtct_participant');
  $query->condition('field_person_target_id', $nid);

  return $query->execute()->fetchCol();
}
