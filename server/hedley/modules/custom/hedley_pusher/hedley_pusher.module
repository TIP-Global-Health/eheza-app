<?php

/**
 * @file
 * Code for the Hedley pusher feature.
 */

/**
 * Trigger a Pusher event.
 *
 * @param string $channel_name
 *   The channel name.
 * @param string $event_name
 *   The event name.
 * @param array $data
 *   The data to transmit.
 *
 * @throws \PusherException
 * @throws \RestfulServerConfigurationException
 *
 * @return bool
 *   The return value of the Pusher trigger action.
 */
function hedley_pusher_trigger_event($channel_name, $event_name, array $data = array()) {
  $queue = &drupal_static('hedley_pusher_static_queue', []);
  $queue[] = [
    'channel' => $channel_name,
    'name' => $event_name,
    'data' => $data,
  ];
  return TRUE;
}

/**
 * Implements hook_exit().
 *
 * Sends out Pusher messages in a batch.
 */
function hedley_pusher_exit() {
  $queue = &drupal_static('hedley_pusher_static_queue', []);

  if (!empty($queue)) {
    try {
      $pusher = hedley_pusher_get_pusher();
      $pusher->triggerBatch($queue);
    }
    catch (Exception $e) {
      watchdog('hedley_pusher', 'Could not transmit Pusher events: !queue', ['!queue' => serialize($queue)]);
    }
  }
}

/**
 * Get a Pusher instance.
 *
 * @return \Pusher
 *   The Pusher object.
 *
 * @throws \Exception
 */
function hedley_pusher_get_pusher() {
  $pusher = &drupal_static(__FUNCTION__);
  if ($pusher) {
    return $pusher;
  }

  $app_key = variable_get('hedley_pusher_app_key');
  $app_secret = variable_get('hedley_pusher_app_secret');
  $app_id = variable_get('hedley_pusher_app_id');
  $app_cluster = variable_get('hedley_pusher_app_cluster');

  if (empty($app_key) || empty($app_secret) || empty($app_id) || empty($app_cluster)) {
    throw new Exception('Pusher app is not configured properly.');
  }

  $options = [
    'cluster' => $app_cluster,
    'encrypted' => TRUE,
  ];

  return new Pusher($app_key, $app_secret, $app_id, $options);
}
