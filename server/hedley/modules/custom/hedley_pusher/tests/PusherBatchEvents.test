<?php

/**
 * @file
 * Class PusherBatchEvents.
 */

/**
 * Class HedleyEventsByLanguage.
 */
class PusherBatchEvents extends HedlyTestsBase {

  /**
   * Get info.
   */
  public static function getInfo() {
    return array(
      'name' => 'Testing multiple events batch pushing',
      'description' => 'Verify the push events workflow.',
      'group' => 'Hedley',
    );
  }

  /**
   * Trigger events and verify they'll exists at the end of the page request.
   */
  public function testPusherBatchOperation() {
    // Testing the API.
    hedley_pusher_trigger_event('channel_one', 'event_one', ['foo' => 'bar']);
    hedley_pusher_trigger_event('channel_two', 'event_two', ['foo' => 'bar']);

    // Creating a node.
    $node = $this->drupalCreateNode(['type' => 'hedley_tests_node_type']);

    $queue = &drupal_static('hedley_pusher_static_queue', []);

    $this->assertEqual(count($queue), 3);

    $this->assertEqual($queue[0]['channel'], 'channel_one');
    $this->assertEqual($queue[1]['channel'], 'channel_two');

    $this->assertEqual($queue[0]['name'], 'event_one');
    $this->assertEqual($queue[1]['name'], 'event_two');

    // Testing a dummy node creation.
    $queue = &drupal_static('hedley_pusher_static_queue', []);
    $this->assertEqual($queue[2]['channel'], 'hedley_test');
    $this->assertEqual($queue[2]['name'], 'node_created');
    $this->assertEqual($queue[2]['data'], ['title' => $node->title]);
  }

}
