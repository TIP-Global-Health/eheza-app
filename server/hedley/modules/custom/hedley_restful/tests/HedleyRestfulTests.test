<?php

/**
 * @file
 * Contains \HedleyRestfulTests.
 */

/**
 * HedleyRestfulTests tests.
 */
class HedleyRestfulTests extends HedleyWebTestBase {

  /**
   * Info hook.
   */
  public static function getInfo() {
    return [
      'name' => 'HedleyRestfulTests tests',
      'description' => 'Tests restful endpoints.',
      'group' => 'Hedley',
    ];
  }

  /**
   * Tests downloading an offiline session.
   */
  public function testDownloadOfflineSession() {
    $today = time();
    $day = 24 * 60 * 60;

    // Make an array of 24 previous days.
    $previous_days = [];
    for ($x = 1; $x < 25; $x++) {
      $previous_days[] = $today - ($x * $day);
    }

    // Create a clinic, a session, and a nurse -- these are the ones we'll
    // focus on.
    $clinic_id = $this->createClinic();
    $nurse = $this->createNurse($clinic_id);
    $session_id = $this->createSession($clinic_id, $today);

    // Create a bunch of test data for our selected clinic.
    $mother_ids = [];
    $child_ids = [];

    for ($x = 0; $x < 75; $x++) {
      // For the code that gets mothers for the session's particular clinic.
      $mother_id = $this->createMother($this->randomName(), $clinic_id);
      $mother_ids[] = $mother_id;

      // Give each mother two children.
      $child1 = $this->createChild($this->randomName(), $mother_id);
      $child2 = $this->createChild($this->randomName(), $mother_id);

      array_push($child_ids, $child1, $child2);
    }

    // Create 24 old sessions for our clinic.
    foreach ($previous_days as $then) {
      $previous_session_id = $this->createSession($clinic_id, $then);

      // For each mother, make a family-planning in the old session.
      foreach ($mother_ids as $mother_id) {
        $this->createFamilyPlanning($mother_id, $previous_session_id, $then);
      }

      // And create a height and weight for each child.
      foreach ($child_ids as $child_id) {
        $this->createHeight($child_id, $previous_session_id, $then);
        $this->createWeight($child_id, $previous_session_id, $then);
      }
    }

    // Create some data for **other** clinics.
    for ($x = 0; $x < 75; $x++) {
      // For the code that sends basic data for all clinics.
      $other_clinic_id = $this->createClinic();

      // Add a mother and some children for the other clinics, to test
      // that we **don't** get those.
      $other_mother_id = $this->createMother($this->randomName(), $other_clinic_id);
      $other_child_id = $this->createChild($this->randomName(), $other_mother_id);

      // Add a session for each clinic.
      $other_session_id = $this->createSession($other_clinic_id, $today);

      // Make a family-planning for the mother.
      $this->createFamilyPlanning($other_mother_id, $other_session_id, $today);

      // Make a height and weight for the child.
      $this->createHeight($other_child_id, $other_session_id, $today);
      $this->createWeight($other_child_id, $other_session_id, $today);
    }

    $handler = restful_get_restful_handler('offline_sessions');
    $handler->setAccount($nurse);

    $results = $handler->get($session_id);
    $data = $results[0];

    $this->assertEqual($data['id'], $session_id);
    $this->assertEqual(count($data['clinics']), 76);
    $this->assertEqual(count($data['participants']['mothers']), 75);
    $this->assertEqual(count($data['participants']['mother_activity']), 75);
    $this->assertEqual(count($data['participants']['children']), 150);
    $this->assertEqual(count($data['participants']['child_activity']), 150);
    $this->assertEqual(count($data['all_sessions']), 100);

    foreach ($data['participants']['mother_activity'] as $mother_activity) {
      $this->assertEqual(count($mother_activity['family_planning']), 24);
    }

    foreach ($data['participants']['child_activity'] as $child_activity) {
      $this->assertEqual(count($child_activity['height']), 24);
      $this->assertEqual(count($child_activity['weight']), 24);
    }
  }

  /**
   * Tests downloading an offiline session for a clinic that has no mothers.
   */
  public function testDownloadOfflineSessionWithoutMothers() {
    $today = time();

    $clinic_id = $this->createClinic();
    $nurse = $this->createNurse($clinic_id);
    $session_id = $this->createSession($clinic_id, $today);

    $handler = restful_get_restful_handler('offline_sessions');
    $handler->setAccount($nurse);

    $results = $handler->get($session_id);
    $this->assertEqual($results[0]['id'], $session_id);
  }

}
