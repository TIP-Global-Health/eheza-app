<?php

/**
 * @file
 * Contains \HedleyRestfulTests.
 */

/**
 * HedleyRestfulTests tests.
 */
class HedleyRestfulTests extends HedleyWebTestBase {

  /**
   * Info hook.
   */
  public static function getInfo() {
    return [
      'name' => 'HedleyRestfulTests tests',
      'description' => 'Tests restful endpoints.',
      'group' => 'Hedley',
    ];
  }

  /**
   * Create a nurse user, assigned to the indicated clinic.
   *
   * @param int $clinic_id
   *   The node ID of the clinic the nurse is assigned to.
   *
   * @return \StdClass
   *   The user.
   */
  public function createNurse($clinic_id) {
    $account = $this->drupalCreateUser();

    $role = user_role_load_by_name('nurse');
    user_multiple_role_edit([$account->uid], "add role", $role->rid);

    $wrapper = entity_metadata_wrapper('user', $account);
    $wrapper->field_clinics->set([$clinic_id]);
    $wrapper->save();

    return $account;
  }

  /**
   * Create a clinic with a random name.
   *
   * @return int
   *   The node ID.
   */
  public function createClinic() {
    return $this->drupalCreateNode([
      'type' => 'clinic',
    ]);
  }

  /**
   * Create a mother.
   *
   * @param string $name
   *   The mother's name.
   * @param string $clinic_id
   *   The clinic to assign the mother to.
   *
   * @return int
   *   The node ID of the mother.
   */
  public function createMother($name, $clinic_id) {
    $node = $this->drupalCreateNode([
      'type' => 'mother',
      'title' => $name,
    ]);

    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_date_birth->set(strtotime('1998-07-01'));
    $wrapper->field_clinic->set($clinic_id);
    $wrapper->field_ubudehe->set(1);
    $wrapper->field_education_level->set(2);
    $wrapper->save();

    return $node->nid;
  }

  /**
   * Create a child.
   *
   * @param string $name
   *   The child's name.
   * @param int $mother_id
   *   The mother's node ID.
   *
   * @return int
   *   The child's node ID.
   */
  public function createChild($name, $mother_id) {
    $node = $this->drupalCreateNode([
      'type' => 'child',
      'title' => $name,
    ]);

    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_mother->set($mother_id);
    $wrapper->field_date_birth->set(strtotime('2015-06-27'));
    $wrapper->field_gender->set('male');
    $wrapper->save();

    return $node->nid;
  }

  /**
   * Create a session for the clinic, starting today.
   *
   * @param int $clinic_id
   *   The node ID of the clinic.
   * @param int $ts
   *   The date of the session, as a unix timestamp.
   *
   * @return int
   *   The node ID of the session.
   */
  public function createSession($clinic_id, $ts) {
    $date = date('Y-m-d', $ts);

    $node = $this->drupalCreateNode(['type' => 'session']);

    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_clinic->set($clinic_id);
    $wrapper->field_scheduled_date->set([
      'value' => $date,
      'value2' => $date,
    ]);
    $wrapper->field_closed->set(FALSE);
    $wrapper->save();

    return $node->nid;
  }

  /**
   * Create a family-planning entity.
   *
   * @param int $mother_id
   *   The node ID of the mother.
   * @param int $session_id
   *   The node ID of the session.
   * @param int $ts
   *   The date the measurement was taken, as a unix timestamp.
   *
   * @return int
   *   The node ID of the family-planning.
   */
  public function createFamilyPlanning($mother_id, $session_id, $ts) {
    $node = $this->drupalCreateNode(['type' => 'family_planning']);

    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper->field_mother->set($mother_id);
    $wrapper->field_date_measured->set($ts);
    $wrapper->field_session->set($session_id);
    $wrapper->field_family_planning_signs->set(["pill"]);
    $wrapper->save();

    return $node->nid;
  }

  /**
   * Tests downloading an offiline session.
   */
  public function testDownloadOfflineSession() {
    $today = time();
    $day = 24 * 60 * 60;

    // Make an array of 24 previous days.
    $previous_days = [];
    for ($x = 1; $x < 25; $x++) {
      $previous_days[] = $today - ($x * $day);
    }

    // Create a clinic, a session, and a nurse -- these are the ones we'll
    // focus on.
    $clinic_id = $this->createClinic();
    $nurse = $this->createNurse($clinic_id);
    $session_id = $this->createSession($clinic_id, $today);

    // Create a bunch of test data for our selected clinic.
    $mother_ids = [];
    $child_ids = [];

    for ($x = 0; $x < 75; $x++) {
      // For the code that gets mothers for the session's particular clinic.
      $mother_id = $this->createMother($this->randomName(), $clinic_id);
      $mother_ids[] = $mother_id;

      // Give each mother two children.
      $child1 = $this->createChild($this->randomName(), $mother_id);
      $child2 = $this->createChild($this->randomName(), $mother_id);

      array_push($child_ids, $child1, $child2);
    }

    // Create 24 old sessions for our clinic.
    foreach ($previous_days as $then) {
      $previous_session_id = $this->createSession($clinic_id, $then);

      // For each mother, make a family-planning in the old session.
      foreach ($mother_ids as $mother_id) {
        $this->createFamilyPlanning($mother_id, $previous_session_id, $then);
      }
    }

    // Create some data for **other** clinics.
    for ($x = 0; $x < 75; $x++) {
      // For the code that sends basic data for all clinics.
      $other_clinic_id = $this->createClinic();

      // Add a mother and some children for the other clinics, to test
      // that we **don't** get those.
      $other_mother_id = $this->createMother($this->randomName(), $other_clinic_id);
      $this->createChild($this->randomName(), $other_mother_id);

      // Add a session for each clinic.
      $other_session_id = $this->createSession($other_clinic_id, $today);

      // Make a family-planning for the mother.
      $this->createFamilyPlanning($other_mother_id, $other_session_id, $today);
    }

    $handler = restful_get_restful_handler('offline_sessions');
    $handler->setAccount($nurse);

    $results = $handler->get($session_id);
    $data = $results[0];

    $this->assertEqual($data['id'], $session_id);
    $this->assertEqual(count($data['clinics']), 76);
    $this->assertEqual(count($data['participants']['mothers']), 75);
    $this->assertEqual(count($data['participants']['mother_activity']), 75);
    $this->assertEqual(count($data['participants']['children']), 150);
    $this->assertEqual(count($data['all_sessions']), 100);

    foreach ($data['participants']['mother_activity'] as $mother_activity) {
      $this->assertEqual(count($mother_activity['family_planning']), 24);
    }
  }

  /**
   * Tests downloading an offiline session for a clinic that has no mothers.
   */
  public function testDownloadOfflineSessionWithoutMothers() {
    $today = time();

    $clinic_id = $this->createClinic();
    $nurse = $this->createNurse($clinic_id);
    $session_id = $this->createSession($clinic_id, $today);

    $handler = restful_get_restful_handler('offline_sessions');
    $handler->setAccount($nurse);

    $results = $handler->get($session_id);
    $this->assertEqual($results[0]['id'], $session_id);
  }

}
