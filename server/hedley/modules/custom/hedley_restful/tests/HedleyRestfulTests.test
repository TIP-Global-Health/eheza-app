<?php

/**
 * @file
 * Contains \HedleyRestfulTests.
 */

/**
 * HedleyRestfulTests tests.
 */
class HedleyRestfulTests extends HedleyWebTestBase {

  /**
   * Info hook.
   */
  public static function getInfo() {
    return [
      'name' => 'HedleyRestfulTests tests',
      'description' => 'Tests restful endpoints.',
      'group' => 'Hedley',
    ];
  }

  /**
   * Create a nurse user, assigned to the indicated clinic.
   *
   * @param int $clinic_id
   *   The node ID of the clinic the nurse is assigned to.
   *
   * @return \StdClass
   *   The user.
   */
  public function createNurse($clinic_id) {
    $account = $this->drupalCreateUser();

    $role = user_role_load_by_name('nurse');
    user_multiple_role_edit([$account->uid], "add role", $role->rid);

    $wrapper = entity_metadata_wrapper('user', $account);
    $wrapper->field_clinics->set([$clinic_id]);
    $wrapper->save();

    return $account;
  }

  /**
   * Create a clinic with a random name.
   *
   * @return int
   *   The node ID.
   */
  public function createClinic() {
    return $this->drupalCreateNode([
      'type' => 'clinic',
    ]);
  }

  /**
   * Crate a mother.
   *
   * @param string $name
   *   The mother's name.
   * @param string $clinic_id
   *   The clinic to assign the mother to.
   *
   * @return int
   *   The node ID of the mother.
   */
  public function createMother($name, $clinic_id) {
    // Create a mother for the clinic.
    $mother = $this->drupalCreateNode([
      'type' => 'mother',
      'title' => $name,
    ]);

    $mother_wrapper = entity_metadata_wrapper('node', $mother);
    $mother_wrapper->field_date_birth->set(strtotime('1998-07-01'));
    $mother_wrapper->field_clinic->set($clinic_id);
    $mother_wrapper->field_ubudehe->set(1);
    $mother_wrapper->field_education_level->set(2);
    $mother_wrapper->save();

    return $mother->nid;
  }

  /**
   * Create a child.
   *
   * @param string $name
   *   The child's name.
   * @param int $mother_id
   *   The mother's node ID.
   *
   * @return int
   *   The child's node ID.
   */
  public function createChild($name, $mother_id) {
    $child = $this->drupalCreateNode([
      'type' => 'child',
      'title' => $name,
    ]);

    $child_wrapper = entity_metadata_wrapper('node', $child);
    $child_wrapper->field_mother->set($mother_id);
    $child_wrapper->field_date_birth->set(strtotime('2015-06-27'));
    $child_wrapper->field_gender->set('male');
    $child_wrapper->save();

    return $child->nid;
  }

  /**
   * Create a session for the clinic, starting today.
   *
   * @param int $clinic_id
   *   The node ID of the clinic.
   *
   * @return int
   *   The node ID of the session.
   */
  public function createSession($clinic_id) {
    $today = date('Y-m-d');

    $session = $this->drupalCreateNode(['type' => 'session']);

    $session_wrapper = entity_metadata_wrapper('node', $session);
    $session_wrapper->field_clinic->set($clinic_id);
    $session_wrapper->field_scheduled_date->set([
      'value' => $today,
      'value2' => $today,
    ]);
    $session_wrapper->field_closed->set(FALSE);
    $session_wrapper->save();

    return $session->nid;
  }

  /**
   * Tests downloading an offiline session.
   */
  public function testDownloadOfflineSession() {
    $clinic_id = $this->createClinic();
    $this->createMother("A mother", $clinic_id);
    $nurse = $this->createNurse($clinic_id);
    $session_id = $this->createSession($clinic_id);

    $handler = restful_get_restful_handler('offline_sessions');
    $handler->setAccount($nurse);

    $results = $handler->get($session_id);
    $this->assertEqual($results[0]['id'], $session_id);
  }

  /**
   * Tests downloading an offiline session for a clinic that has no mothers.
   *
   * This tests the scenario which failed at
   * https://github.com/Gizra/ihangane/issues/626
   */
  public function testDownloadOfflineSessionWithoutMothers() {
    $clinic_id = $this->createClinic();
    $nurse = $this->createNurse($clinic_id);
    $session_id = $this->createSession($clinic_id);

    $handler = restful_get_restful_handler('offline_sessions');
    $handler->setAccount($nurse);

    $results = $handler->get($session_id);
    $this->assertEqual($results[0]['id'], $session_id);
  }

}
