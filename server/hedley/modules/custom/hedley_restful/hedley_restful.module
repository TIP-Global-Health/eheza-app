<?php

/**
 * @file
 * Code for the RESTful integration.
 */

define('HEDLEY_RESTFUL_CLIENT_SIDE_INDEXEDDB_SCHEMA_VERSION', 17);
define('HEDLEY_RESTFUL_INCIDENT_TYPE_CONTENT_UPLOAD', 'content-upload');

/**
 * Nodes synced to all devices.
 *
 * The content types and their restful handler for nodes that
 * we sync to all devices.
 */
const HEDLEY_RESTFUL_ALL_DEVICES = [
  'catchment_area' => 'catchment_areas',
  'counseling_schedule' => 'counseling-schedule',
  'counseling_topic' => 'counseling-topics',
  'health_center' => 'health_centers',
  'nurse' => 'nurses',
  'participant_form' => 'participants-form',
  'village' => 'villages',
];

/**
 * Nodes synced to just some devices.
 *
 * The content types and their restful handlers for nodes that
 * we sync to just some devices.
 */
const HEDLEY_RESTFUL_SHARDED = [
  'clinic' => 'clinics',
  'person' => 'people',
  'pmtct_participant' => 'pmtct-participants',
  'individual_participant' => 'individual-participants',
  'prenatal_encounter' => 'prenatal-encounters',
  'nutrition_encounter' => 'nutrition-encounters',
  'acute_illness_encounter' => 'acute-illness-encounters',
  'home_visit_encounter' => 'home-visit-encounter',
  'well_child_encounter' => 'well-child-encounter',
  'relationship' => 'relationships',
  'session' => 'sessions',
  // Measurements.
  'acute_findings' => 'acute-findings',
  'acute_illness_contacts_tracing' => 'acute-illness-contacts-tracing',
  'acute_illness_core_exam' => 'acute-illness-core-exam',
  'acute_illness_danger_signs' => 'acute-illness-danger-signs',
  'acute_illness_follow_up' => 'acute-illness-follow-up',
  'acute_illness_muac' => 'acute-illness-muacs',
  'acute_illness_nutrition' => 'acute-illness-nutritions',
  'acute_illness_trace_contact' => 'acute-illness-trace-contact',
  'acute_illness_vitals' => 'acute-illness-vitals',
  'prenatal_follow_up' => 'prenatal-follow-up',
  'prenatal_send_to_hc' => 'prenatal-send-to-hc',
  'appointment_confirmation' => 'appointment-confirmation',
  'attendance' => 'attendances',
  'breast_exam' => 'breast-exams',
  'birth_plan' => 'birth-plan',
  'call_114' => 'call-114s',
  'child_fbf' => 'child-fbfs',
  'contributing_factors' => 'contributing-factors',
  'counseling_session' => 'counseling-sessions',
  'core_physical_exam' => 'core-physical-exams',
  'covid_testing' => 'covid-testing',
  'danger_signs' => 'danger-signs',
  'exposure' => 'exposures',
  'family_planning' => 'family-plannings',
  'follow_up' => 'follow-up',
  'group_health_education' => 'group-health-education',
  'group_send_to_hc' => 'group-send-to-hc',
  'health_education' => 'health-education',
  'hc_contact' => 'hc-contacts',
  'height' => 'heights',
  'isolation' => 'isolations',
  'lactation' => 'lactations',
  'last_menstrual_period' => 'last-menstrual-periods',
  'malaria_testing' => 'malaria-testings',
  'medical_history' => 'medical-histories',
  'medication' => 'medications',
  'medication_distribution' => 'medication-distributions',
  'mother_fbf' => 'mother-fbfs',
  'muac' => 'muacs',
  'nutrition' => 'nutritions',
  'nutrition_caring' => 'nutrition-caring',
  'nutrition_contributing_factors' => 'nutrition-contributing-factors',
  'nutrition_feeding' => 'nutrition-feeding',
  'nutrition_follow_up' => 'nutrition-follow-up',
  'nutrition_food_security' => 'nutrition-food-security',
  'nutrition_health_education' => 'nutrition-health-education',
  'nutrition_height' => 'nutrition-heights',
  'nutrition_hygiene' => 'nutrition-hygiene',
  'nutrition_muac' => 'nutrition-muacs',
  'nutrition_nutrition' => 'nutrition-nutritions',
  'nutrition_photo' => 'nutrition-photos',
  'nutrition_send_to_hc' => 'nutrition-send-to-hc',
  'nutrition_weight' => 'nutrition-weights',
  'obstetrical_exam' => 'obstetrical-exams',
  'obstetric_history' => 'obstetric-histories',
  'obstetric_history_step2' => 'obstetric-histories-step2',
  'participant_consent' => 'participants-consent',
  'photo' => 'photos',
  'pregnancy_testing' => 'pregnancy-testings',
  'prenatal_family_planning' => 'prenatal-family-plannings',
  'prenatal_health_education' => 'prenatal-health-education',
  'prenatal_nutrition' => 'prenatal-nutritions',
  'prenatal_photo' => 'prenatal-photos',
  'prenatal_blood_gprs_test' => 'prenatal-blood-gprs-test',
  'prenatal_hemoglobin_test' => 'prenatal-hemoglobin-test',
  'prenatal_hepatitis_b_test' => 'prenatal-hepatitis-b-test',
  'prenatal_hiv_test' => 'prenatal-hiv-test',
  'prenatal_malaria_test' => 'prenatal-malaria-test',
  'prenatal_random_blood_sugar_test' => 'prenatal-random-blood-sugar-test',
  'prenatal_syphilis_test' => 'prenatal-syphilis-test',
  'prenatal_urine_dipstick_test' => 'prenatal-urine-dipstick-test',
  'resource' => 'resources',
  'send_to_hc' => 'send-to-hcs',
  'social_history' => 'social-histories',
  'symptoms_general' => 'symptoms-general',
  'symptoms_gi' => 'symptoms-gi',
  'symptoms_respiratory' => 'symptoms-respiratory',
  'travel_history' => 'travel-histories',
  'treatment_history' => 'treatment-histories',
  'treatment_ongoing' => 'treatment-ongoing',
  'vitals' => 'vitals',
  'weight' => 'weights',
  'well_child_albendazole' => 'well-child-albendazole',
  'well_child_bcg_immunisation' => 'well-child-bcg-immunisation',
  'well_child_contributing_factors' => 'well-child-contributing-factors',
  'well_child_dtp_immunisation' => 'well-child-dtp-immunisation',
  'well_child_ecd' => 'well-child-ecd',
  'well_child_follow_up' => 'well-child-follow-up',
  'well_child_head_circumference' => 'well-child-head-circumference',
  'well_child_health_education' => 'well-child-health-education',
  'well_child_height' => 'well-child-height',
  'well_child_hpv_immunisation' => 'well-child-hpv-immunisation',
  'well_child_ipv_immunisation' => 'well-child-ipv-immunisation',
  'well_child_mebendezole' => 'well-child-mebendezole',
  'well_child_mr_immunisation' => 'well-child-mr-immunisation',
  'well_child_muac' => 'well-child-muac',
  'well_child_next_visit' => 'well-child-next-visit',
  'well_child_nutrition' => 'well-child-nutrition',
  'well_child_opv_immunisation' => 'well-child-opv-immunisation',
  'well_child_photo' => 'well-child-photo',
  'well_child_pcv13_immunisation' => 'well-child-pcv13-immunisation',
  'well_child_pregnancy_summary' => 'well-child-pregnancy-summary',
  'well_child_rotarix_immunisation' => 'well-child-rotarix-immunisation',
  'well_child_send_to_hc' => 'well-child-send-to-hc',
  'well_child_symptoms_review' => 'well-child-symptoms-review',
  'well_child_vitals' => 'well-child-vitals',
  'well_child_vitamin_a' => 'well-child-vitamin-a',
  'well_child_weight' => 'well-child-weight',
];

// Make sure that some headers get set.
if (!drupal_is_cli()) {
  header('Access-Control-Allow-Origin: *');
  header('Access-Control-Allow-Credentials: true');
  header('Access-Control-Allow-Headers: Authorization, access-token, Cache-Control, X-Requested-With, Content-Type');
}

/**
 * Implements hook_file_download_access().
 */
function hedley_restful_file_download_access($file_item, $entity_type, $entity) {
  // If we were given an access token, then use it.
  $request = $_GET;

  if (substr($request['q'], 0, 4) == 'api/') {
    // Don't check requests to /api.
    return FALSE;
  }

  if (empty($request['access_token'])) {
    // No access token provided.
    return FALSE;
  }

  $auth_handler = restful_get_authentication_handler('token');
  if (!$auth_handler->applies($request)) {
    // Auth doesn't apply.
    return FALSE;
  }

  $account = $auth_handler->authenticate($request);
  if (!$account) {
    // Did not authenticate.
    return FALSE;
  }

  // Anyone who can view published content can download.
  return user_access('access content', $account);
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function hedley_restful_ctools_plugin_directory($module, $plugin) {
  if ($module == 'restful') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Convert strings to short form dates.
 *
 * From form "2014-11-13 18:00:00" to
 * preserve just the date part, i.e. "2014-11-13".
 *
 * This is suitable only for values which do not have
 * interesting time zone information ... that is, only
 * for values that represent nominal dates without times.
 *
 * @param string $value
 *   The date string, e.g. "2014-11-13 18:00:00".
 *
 * @return false|string
 *   The date portion only, e.g. "2014-11-13".
 */
function hedley_restful_timestamp_only_date($value) {
  $date = explode(' ', $value);
  return $date[0];
}

/**
 * Get restful output programmatically.
 *
 * @return array
 *   The restful output.
 */
function hedley_restful_output_from_handler($handler_name, array $nids, $account) {
  $output = [];
  node_load_multiple($nids);

  $handler = restful_get_restful_handler($handler_name);
  $handler->setAccount($account);

  foreach ($nids as $nid) {
    $response = $handler->get($nid);
    $output[] = $response[0];
  }

  return $output;
}

/**
 * Get restful output for multiple bundles.
 *
 * @return array
 *   The restful output
 */
function hedley_restful_output_for_bundles($bundleHandlers, array $nids, $account) {
  $output = [];

  foreach ($nids as $nid) {
    $wrapper = entity_metadata_wrapper('node', $nid);

    $handler = restful_get_restful_handler($bundleHandlers[$wrapper->getBundle()]);
    $handler->setAccount($account);
    $response = $handler->get($nid);

    $output[] = $response[0];
  }

  return $output;
}

/**
 * Resolve nodes IDs using provided UUIDs.
 *
 * @param array $uuids
 *   List of UUIDs.
 *
 * @return array
 *   The Nodes IDs.
 */
function hedley_restful_resolve_nids_for_uuids(array $uuids) {
  $query = db_select('field_data_field_uuid', 'uuid');
  $query->condition('uuid.field_uuid_value', $uuids, 'IN');
  $query->addField('uuid', 'entity_id');
  // Limit to 500 results, to avoid running out of memory.
  $query->range(0, 500);

  $result = $query
    ->execute()
    ->fetchAllAssoc('entity_id');

  return array_keys($result);
}

/**
 * Resolve node ID using provided UUID.
 *
 * @param string $uuid
 *   The UUID.
 *
 * @return int
 *   The Node ID. False, if not found.
 */
function hedley_restful_resolve_nid_for_uuid($uuid) {
  $result = hedley_restful_resolve_nids_for_uuids([$uuid]);

  return empty($result) ? FALSE : reset($result);
}

/**
 * Convert a UUID to a node ID.
 *
 * @param string $uuid
 *   The UUID.
 *
 * @return int
 *   The Node ID.
 *
 * @throws \RestfulBadRequestException
 */
function hedley_restful_uuid_to_nid($uuid) {
  $result = hedley_restful_resolve_nid_for_uuid($uuid);

  if ($result === FALSE) {
    throw new RestfulBadRequestException("Could not find UUID: $uuid");
  }

  return $result;
}

/**
 * Run a query in batches.
 *
 * Given a base query, performs the query in batches and calls a callback
 * function with each batch of results.
 *
 * Before calling the callback for each batch, we do a `noad_load_multiple`,
 * so you don't have to.
 *
 * After the callback returns, we reset the cache for the specific IDs in
 * that batch. So, this is good for cases where you only need to access
 * each entity once, and don't want the cache to grow. (We don't clear the
 * cache completely, so any pre-existing nodes will remain).
 *
 * @param \EntityFieldQuery $base_query
 *   The base query. We will clone this query and adjust the offset to
 *    get the results in batches.
 * @param int $batch_size
 *   The size of each batch.
 * @param callable $function
 *   The callback to execute. It will be called with the three parameters.
 *    - The current offset
 *    - The total number of items.
 *    - An array of node IDs, being the current batch of query results.
 */
function hedley_restful_query_in_batches(\EntityFieldQuery $base_query, $batch_size, callable $function) {
  $offset = 0;

  $query_count = clone $base_query;
  $count = $query_count->count()->execute();

  while ($offset < $count) {
    $query = clone $base_query;
    $result = $query->range($offset, $batch_size)->execute();

    if (empty($result['node'])) {
      // None left.
      return;
    }

    $keys = array_keys($result['node']);
    node_load_multiple($keys);

    call_user_func($function, $offset, $count, $keys);

    $offset += $batch_size;
    entity_get_controller('node')->resetCache($keys);
  }
}

/**
 * Resolves UID of user that owns the access token.
 *
 * @param string $token
 *   The token.
 *
 * @return bool|int
 *   UID of user that owns the access token. FALSE, if not found.
 */
function hedley_restful_resolve_device_by_token($token) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'restful_token_auth')
    ->propertyCondition('token', $token)
    ->range(0, 1)
    ->execute();

  if (empty($result['restful_token_auth'])) {
    return FALSE;
  }

  $auth_token_id = key($result['restful_token_auth']);
  $auth_token = entity_load_single('restful_token_auth', $auth_token_id);

  return $auth_token->uid;
}

/**
 * For new incident, record and generate a notification mail.
 *
 * @param string $incident_type
 *   Either 'content-upload ' or 'file-upload'.
 * @param string $content_identifier
 *   A unique identifier for node or file.
 * @param int $device_id
 *   User ID of device Robot user.
 * @param string $details
 *   Additional details. Add for for content upload. Empty for files upload.
 *
 * @throws \EntityMetadataWrapperException
 */
function hedley_restful_report_sync_incident($incident_type, $content_identifier, $device_id, $details = '') {
  // Check if we already know about this incident.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'sync_incident')
    ->propertyCondition('uid', $device_id)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_incident_type', 'value', $incident_type)
    ->fieldCondition('field_content_identifier', 'value', $content_identifier)
    ->count()
    ->execute();

  if ($result > 0) {
    // We know of this incident already.
    return;
  }

  // It's a new incident. Create a record.
  $incident = hedley_person_create_basic_node('sync_incident', $device_id);
  $wrapper = entity_metadata_wrapper('node', $incident);
  $wrapper->field_incident_type->set($incident_type);
  $wrapper->field_content_identifier->set($content_identifier);
  $wrapper->field_incident_details->set($details);
  $wrapper->save();

  // Send a notification mail about newly created incident.
  $params = [
    'device_id' => $device_id,
    'incident_type' => $incident_type,
    'details' => $details,
  ];

  $to = variable_get('hedley_restful_incident_notifiers_list', 'tip-incident@gizra.com');
  $mail_result = drupal_mail('hedley_restful', 'incident_notification', $to, language_default(), $params);
  if (empty($mail_result['result'])) {
    watchdog('restful', 'Could not send incident notification email', [], WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_mail().
 *
 * Alters subject and body of 'incident notification' mail.
 */
function hedley_restful_mail($key, &$message, $params) {
  if ($key != 'incident_notification') {
    return;
  }

  $account = user_load($params['device_id']);
  $stage = ($params['incident_type'] == HEDLEY_RESTFUL_INCIDENT_TYPE_CONTENT_UPLOAD) ? 'content upload' : 'file upload';

  $message['subject'] = "Sync incident: $account->name reported a problem during $stage.";
  if ($params['incident_type'] == HEDLEY_RESTFUL_INCIDENT_TYPE_CONTENT_UPLOAD) {
    $message['body'][] = $params['details'];
  }
}
