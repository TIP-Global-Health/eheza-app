<?php

/**
 * @file
 * Code for the Hedley user feature.
 */

include_once 'hedley_user.features.inc';

/**
 * Implements hook_menu_alter().
 */
function hedley_user_menu_alter(&$menu) {
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $menu['node/add/' . $type_url_str]['access callback'] = 'hedley_user_node_form_access_callback';
  }

  $menu['node/%node/edit']['access callback'] = 'hedley_user_node_form_access_callback';
}

/**
 * Implements hook_user_form_user_login_block_alter().
 */
function hedley_user_form_user_login_block_alter(&$form, &$form_state) {
  // Remove the links to request new password and register new user.
  $form['links']['#markup'] = '';
}

/**
 * Implements hook_node_presave().
 */
function hedley_user_node_presave($node) {
  if ($node->type != 'nurse') {
    // Not a nurse.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $pin_code = $wrapper->field_pin_code->value();
  if (empty($pin_code)) {
    // No PIN code provided, so we generate one.
    $wrapper->field_pin_code->set(hedley_user_get_unique_pincode());
    return;
  }

  if (strlen($pin_code) < 4) {
    throw new Exception('The provided PIN code is too short. Minimal length - 4 characters.');
  }

  $nid = !empty($node->nid) ? $node->nid : NULL;
  if (!hedley_user_check_unique_pincode($pin_code, $nid)) {
    throw new Exception('The provided PIN code is not unique.');
  }
}

/**
 * Implements hook_user_presave().
 */
function hedley_user_user_presave(&$edit, $account, $category) {
  if (empty($edit['field_incident_details'][LANGUAGE_NONE])) {
    return;
  }

  $decoded = json_decode($edit['field_incident_details'][LANGUAGE_NONE][0]['value']);
  $entities_data = array_reverse($decoded);
  foreach ($entities_data as $data) {
    $nid = hedley_restful_resolve_nid_for_uuid($data->uuid);
    if ($nid !== FALSE) {
      // Node with provided UUID is found, which indicates that
      // content exists already on back-end, and can be skipped.
      continue;
    }

    $bundle = $data->type;
    $function = "hedley_user_create_{$bundle}_by_sync_incident";
    if (function_exists($function)) {
      $function($edit, $data);
    }
  }
}

/**
 * Return a 4 digit unique pincode.
 *
 * @return int
 *   The pincode.
 */
function hedley_user_get_unique_pincode() {
  $rand = rand(1000, 9999);

  if (hedley_user_check_unique_pincode($rand)) {
    // Pincode is unique.
    return $rand;
  }

  // Try again.
  return hedley_user_get_unique_pincode();
}

/**
 * Check whether the supplied pincode is already used.
 *
 * @param string $code
 *   The pin code to check.
 * @param null|string $nid
 *   Optional; A node ID to ignore.
 *
 * @return bool
 *   TRUE if the supplied pincode is unique
 */
function hedley_user_check_unique_pincode($code, $nid = NULL) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'nurse')
    ->fieldCondition('field_pin_code', 'value', $code)
    // Enough to know if there is one more.
    ->range(0, 1);

  if ($nid) {
    $query->propertyCondition('nid', $nid, '<>');
  }

  $count = $query
    ->count()
    ->execute();

  return $count == 0;
}

/**
 * Access callback; Determines if the user may create or edit the node.
 *
 * @param string $op
 *   The operation to be performed on the node. Those are the possible values.
 *   - "update".
 *   - "create".
 * @param object $node
 *   The node object on which the operation is to be performed, or node type
 *   (e.g. 'forum') for "create" operation.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function hedley_user_node_form_access_callback($op, $node) {
  global $user;

  // Always give access to the admin user.
  if ($user->uid == 1) {
    return TRUE;
  }

  $admin_role = user_role_load_by_name('administrator');

  // If the user is not a nurse or is an admin, use default access callback.
  if (user_has_role($admin_role->rid)) {
    return node_access($op, $node);
  }

  // Only admin users have access to the node add or edit Drupal interface.
  return FALSE;
}

/**
 * Creates a person node based on a sync incident.
 *
 * This function takes data from a sync incident and creates a person
 * node in the system.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_person_by_sync_incident(array &$edit, $data) {
  $health_center_id = hedley_restful_resolve_nid_for_uuid($data->health_center);
  if (!$health_center_id) {
    return;
  }

  $entity = [
    'type' => 'person',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_health_center' => [LANGUAGE_NONE => [['target_id' => $health_center_id]]],
    'field_second_name' => [LANGUAGE_NONE => [['value' => $data->second_name]]],
    'field_gender' => [LANGUAGE_NONE => [['value' => $data->gender]]],
    'field_birth_date' => [LANGUAGE_NONE => [['value' => "$data->birth_date 00:00:00"]]],
  ];

  $optional_fields = [
    'birth_date_estimated',
    'cell',
    'district',
    'first_name',
    'hiv_status',
    'hmis_number',
    'marital_status',
    'mode_of_delivery',
    'national_id_number',
    'number_of_children',
    'phone_number',
    // @todo: add photo?
    'province',
    'sector',
    'ubudehe',
    'village',
  ];

  foreach ($optional_fields as $field_name) {
    if (empty($data->{$field_name})) {
      continue;
    }
    $entity["field_{$field_name}"] = [LANGUAGE_NONE => [['value' => $data->{$field_name}]]];
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates an individual participant node based on a sync incident.
 *
 * This function takes data from a sync incident and creates an
 * individual participant node in the system.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_individual_participant_by_sync_incident(array &$edit, $data) {
  $person_id = hedley_restful_resolve_nid_for_uuid($data->person);
  if (!$person_id) {
    return;
  }

  $expected_value = $data->expected->value;
  $entity = [
    'type' => 'individual_participant',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_person' => [LANGUAGE_NONE => [['target_id' => $person_id]]],
    'field_encounter_type' => [LANGUAGE_NONE => [['value' => $data->encounter_type]]],
    'field_expected' => [LANGUAGE_NONE => [['value' => "$expected_value 00:00:00"]]],
  ];

  if (!empty($data->expected->value2)) {
    $entity['field_expected'][LANGUAGE_NONE][0]['value2'] = $data->expected->value2;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates an acute illness encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates an acute
 * illness encounter node in the system. It checks if the participant
 * exists and fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_acute_illness_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'acute_illness_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_ai_encounter_type' => [LANGUAGE_NONE => [['value' => $data->ai_encounter_type]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  if (!empty($data->sequence_number)) {
    $entity['field_sequence_number'][LANGUAGE_NONE][0]['value'] = $data->sequence_number;
  }

  if (!empty($data->acute_illness_diagnosis)) {
    $entity['field_acute_illness_diagnosis'][LANGUAGE_NONE][0]['value'] = $data->acute_illness_diagnosis;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates a child scoreboard encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates a child
 * scoreboard encounter node in the system. It checks if the participant
 * exists and fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_child_scoreboard_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'child_scoreboard_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates HIV encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates HIV
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_hiv_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'hiv_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates a home visit encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates a home visit
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_home_visit_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'home_visit_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates NCD encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates NCD
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_ncd_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'ncd_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  if (!empty($data->ncd_diagnoses)) {
    $entity['field_ncd_diagnoses'][LANGUAGE_NONE] = [];
    foreach ($data->ncd_diagnoses as $value) {
      $entity['field_ncd_diagnoses'][LANGUAGE_NONE][] = ['value' => $value];
    }
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates a nutrition encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates a nutrition
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_nutrition_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'nutrition_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_nutrition_encounter_type' => [LANGUAGE_NONE => [['value' => $data->nutrition_encounter_type]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates prenatal encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates prenatal
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_prenatal_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'prenatal_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_prenatal_encounter_type' => [LANGUAGE_NONE => [['value' => $data->prenatal_encounter_type]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  if (!empty($data->prenatal_diagnoses)) {
    $entity['field_prenatal_diagnoses'][LANGUAGE_NONE] = [];
    foreach ($data->prenatal_diagnoses as $value) {
      $entity['field_prenatal_diagnoses'][LANGUAGE_NONE][] = ['value' => $value];
    }
  }

  if (!empty($data->past_prenatal_diagnoses)) {
    $entity['field_past_prenatal_diagnoses'][LANGUAGE_NONE] = [];
    foreach ($data->past_prenatal_diagnoses as $value) {
      $entity['field_past_prenatal_diagnoses'][LANGUAGE_NONE][] = ['value' => $value];
    }
  }

  if (!empty($data->prenatal_indicators)) {
    $entity['field_prenatal_indicators'][LANGUAGE_NONE] = [];
    foreach ($data->prenatal_indicators as $value) {
      $entity['field_prenatal_indicators'][LANGUAGE_NONE][] = ['value' => $value];
    }
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates Tuberculosis encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates Tuberculosis
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_tuberculosis_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'tuberculosis_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}

/**
 * Creates Well Child encounter node based on a sync incident.
 *
 * This function takes data from a sync incident and creates Well Child
 * encounter node in the system. It checks if the participant exists and
 * fills the necessary fields with the provided data.
 *
 * @param array $edit
 *   An array that can be modified to include details about the incident.
 * @param object $data
 *   The data object from the sync incident, containing the necessary
 *   information to create the encounter.
 */
function hedley_user_create_well_child_encounter_by_sync_incident(array &$edit, $data) {
  $individual_participant_id = hedley_restful_resolve_nid_for_uuid($data->individual_participant);
  if (!$individual_participant_id) {
    return;
  }

  $scheduled_date_value = $data->scheduled_date->value;
  $entity = [
    'type' => 'well_child_encounter',
    'field_uuid' => [LANGUAGE_NONE => [['value' => $data->uuid]]],
    'field_individual_participant' => [LANGUAGE_NONE => [['target_id' => $individual_participant_id]]],
    'field_well_child_encounter_type' => [LANGUAGE_NONE => [['value' => $data->well_child_encounter_type]]],
    'field_scheduled_date' => [LANGUAGE_NONE => [['value' => "$scheduled_date_value 00:00:00"]]],
  ];

  if (!empty($data->scheduled_date->value2)) {
    $entity['field_scheduled_date'][LANGUAGE_NONE][0]['value2'] = $data->scheduled_date->value2;
  }

  if (!empty($data->encounter_notes)) {
    $entity['field_encounter_notes'][LANGUAGE_NONE] = [];
    foreach ($data->encounter_notes as $value) {
      $entity['field_encounter_notes'][LANGUAGE_NONE][] = ['value' => $value];
    }
  }

  if (!empty($data->encounter_warnings)) {
    $entity['field_encounter_warnings'][LANGUAGE_NONE] = [];
    foreach ($data->encounter_warnings as $value) {
      $entity['field_encounter_warnings'][LANGUAGE_NONE][] = ['value' => $value];
    }
  }

  try {
    $node = entity_create('node', $entity);
    node_save($node);
  }
  catch (Exception $e) {
    return;
  }

  $edit['field_incident_details'][LANGUAGE_NONE] = [];
}
