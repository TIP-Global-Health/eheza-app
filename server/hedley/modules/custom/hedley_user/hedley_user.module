<?php

/**
 * @file
 * Code for the Hedley user feature.
 */

include_once 'hedley_user.features.inc';

/**
 * Implements hook_node_presave().
 */
function hedley_user_node_presave($node) {
  if ($node->type != 'nurse') {
    // Not a nurse.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (empty($node->nid)) {
    // New user, so we generate a PIN code if not provided.
    if (empty($wrapper->field_pin_code->value())) {
      $wrapper->field_pin_code->set(hedley_user_get_unique_pincode());
    }
    elseif (!hedley_user_check_unique_pincode($wrapper->field_pin_code->value())) {
      throw new Exception('The provided PIN code was not unique.');
    }
  }
  elseif (!hedley_user_check_unique_pincode($wrapper->field_pin_code->value(), $wrapper->getIdentifier())) {
    // Existing user, so throw error if it's not unique.
    throw new Exception('The provided PIN code was not unique.');
  }
}

/**
 * Return a 4 digit unique pincode.
 *
 * @return int
 *   The pincode.
 */
function hedley_user_get_unique_pincode() {
  $rand = rand(1000, 9999);

  if (hedley_user_check_unique_pincode($rand)) {
    // Pincode is unique.
    return $rand;
  }

  // Try again.
  return hedley_user_get_unique_pincode();
}

/**
 * Check whether the supplied pincode is already used.
 *
 * @param string $code
 *   The pin code to check.
 * @param null|string $nid
 *   Optional; A node ID to ignore.
 *
 * @return bool
 *   TRUE if the supplied pincode is unique
 */
function hedley_user_check_unique_pincode($code, $nid = NULL) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'nurse')
    ->fieldCondition('field_pin_code', 'value', $code)
    // Enough to know if there is one more.
    ->range(0, 1);

  if ($nid) {
    $query->propertyCondition('nid', $nid, '<>');
  }

  $count = $query
    ->count()
    ->execute();

  return $count == 0;
}

/**
 * Implements hook_menu_alter().
 */
function hedley_user_menu_alter(&$menu) {
  foreach (node_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $menu['node/add/' . $type_url_str]['access callback'] = 'hedley_user_node_form_access_callback';
  }

  $menu['node/%node/edit']['access callback'] = 'hedley_user_node_form_access_callback';
}

/**
 * Access callback; Determines if the user may create or edit the node.
 *
 * @param string $op
 *   The operation to be performed on the node. Those are the possible values.
 *   - "update".
 *   - "create".
 * @param object $node
 *   The node object on which the operation is to be performed, or node type
 *   (e.g. 'forum') for "create" operation.
 *
 * @return bool
 *   TRUE if the operation may be performed, FALSE otherwise.
 */
function hedley_user_node_form_access_callback($op, $node) {
  global $user;

  // Always give access to the admin user.
  if ($user->uid == 1) {
    return TRUE;
  }

  $admin_role = user_role_load_by_name('administrator');

  // If the user is not a nurse or is an admin, use default access callback.
  if (user_has_role($admin_role->rid)) {
    return node_access($op, $node);
  }

  // Only admin users have access to the node add or edit Drupal interface.
  return FALSE;
}
