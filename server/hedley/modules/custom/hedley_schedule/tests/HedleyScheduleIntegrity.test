<?php

/**
 * @file
 * Contains \HedleyScheduleIntegrity.
 */

/**
 * HedleyScheduleIntegrity tests.
 */
class HedleyScheduleIntegrity extends HedleyWebTestBase {

  /**
   * Info hook.
   */
  public static function getInfo() {
    return [
      'name' => 'HedleyScheduleIntegrity tests',
      'description' => 'Tests rules for maintaining integrity of session entities.',
      'group' => 'Hedley',
    ];
  }

  /**
   * Test creating a session and then deleting it.
   */
  public function testDeleteEmptySession() {
    $clinic_nid = $this->createClinic();
    $session_nid = $this->createSession($clinic_nid);

    // Make sure we can get it the session now.
    $session_node = node_load($session_nid);
    $this->assertTrue($session_node, "Should retrieve session we just created.");

    // Delete the session node.
    node_delete($session_nid);

    // Make sure we really deleted it.
    $session_node = node_load($session_nid);
    $this->assertFalse($session_node, "Session should no longer exist.");
  }

  /**
   * Test deleting a training session with all its measurements.
   */
  public function testDeleteTrainingSessionWithMeasurements() {
    $clinic_nid = $this->createClinic();
    $session_nid = $this->createSession($clinic_nid, REQUEST_TIME, TRUE);
    $mother_nid = $this->createMother($this->randomName(), $clinic_nid);
    $child_nid = $this->createChild($this->randomName(), $mother_nid);

    // Create measurements.
    $height_nid = $this->createHeight($child_nid, $session_nid, 125);
    $weight_nid = $this->createWeight($child_nid, $session_nid, 25);

    // Make sure we can get it the session now.
    $session_node = node_load($session_nid);
    $this->assertTrue($session_node, "Should retrieve session we just created.");

    // Delete the session node.
    node_delete($session_nid);

    // Make sure we really deleted it.
    $session_node = node_load($session_nid);
    $height_node = node_load($height_nid);
    $weight_node = node_load($weight_nid);
    $this->assertFalse($session_node, "Session should no longer exist.");
    $this->assertFalse($height_node, "Height measurement should no longer exist.");
    $this->assertFalse($weight_node, "Weight measurement should no longer exist.");
  }

}
