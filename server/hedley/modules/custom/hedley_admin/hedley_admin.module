<?php

/**
 * @file
 * Code for the hedley admin feature.
 */

include_once 'hedley_admin.features.inc';

/**
 * Implements hook_menu().
 */
function hedley_admin_menu() {
  $items = [];

  $items['admin/config/hedley-reporting'] = [
    'type' => MENU_LOCAL_TASK,
    'title' => 'Hedley Weekly Reporting',
    'description' => 'Configure Weekly Metrics Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['hedley_admin_settings_form'],
    'access arguments' => ['hedley reporting admin'],
  ];

  $items['admin/reports/devices-sync'] = array(
    'title' => 'Devices with suspected sync issue:',
    'description' => 'Presents devices that are suspected to have sync issue',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hedley_admin_devices_sync_table'),
    'access callback' => 'hedley_admin_access',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Allows access to superuser and administrators.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function hedley_admin_access() {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  if ($user->uid == 1) {
    return TRUE;
  }

  return in_array('administrator', $user->roles);
}

function hedley_admin_devices_sync_table($form, &$form_state) {
  $header = array(
    'index' => t('#'),
    'name' => t('Device Name'),
    'to_upload' => t('Changes to Upload'),
    'last_sync' => t('Last Sync Time'),
  );

  $query = "SELECT u.name, ttu.field_total_to_upload_value,
     FROM_UNIXTIME(u.access) as last_sync  FROM node n
    inner join users u
      ON u.uid=n.uid
    left join field_data_field_total_to_upload ttu
      ON u.uid=ttu.entity_id
    left join field_data_field_sync_phase sp
      ON u.uid=sp.entity_id
    where n.type = 'sync_incident'
      and sp.field_sync_phase_value = 'sync-start'
      and ttu.field_total_to_upload_value > 10
      and FROM_UNIXTIME(u.access) > DATE_ADD(now(), INTERVAL -2 MONTH)
    group by (u.name)
    order by last_sync desc;";

  $result = db_query($query);

  $rows = [];
  foreach ($result as $key=>$row) {
    $words = explode(' ', $row->name);
    if (end($words) == 'Robot') {
      array_splice($words, -1);
    }

    $rows[] = [
      'index' => $key + 1,
      'name' => implode(' ', $words),
      'to_upload' => $row->field_total_to_upload_value,
      'last_sync' => $row->last_sync,
    ];
  }

  $form['table'] = [
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No data available'),
  ];

  return $form;
}

/**
 * Reporting configuration form.
 */
function hedley_admin_settings_form($form, &$form_state) {
  $form['hedley_admin_report_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address'),
    '#default_value' => variable_get('hedley_admin_report_email', ''),
    '#description' => t('Leave empty to not allow report-generation for this environment. This email address will receive the report generated by Jenkins.'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_views_plugins().
 */
function hedley_admin_views_plugins() {
  return array(
    'access' => array(
      'health_center' => array(
        'title' => t('Health-center-based Access'),
        'help' => t('If the child is associated with the same health center as the user, it grants access'),
        'handler' => 'hedley_admin_health_center_access_plugin',
        'path' => drupal_get_path('module', 'hedley_admin'),
      ),
    ),
  );
}

/**
 * Implements preprocess_views_view().
 *
 * Fixes the styling of the date filter form in views.
 */
function hedley_admin_preprocess_views_view(&$vars) {
  // The CSS is very specific that it won't effect anything else and therefore
  // no need to limit it to one view. (Also, this way we don't need to edit
  // anything when adding a date filter to any view).
  drupal_add_css(drupal_get_path('module', 'hedley_admin') . '/css/date_views.css');
}

/**
 * Implements hook_theme_registry_alter().
 */
function hedley_admin_theme_registry_alter(&$theme_registry) {
  $theme_registry['vbo_export_csv']['function'] = 'hedley_admin_vbo_export_csv';
}

/**
 * Csv content builder function.
 */
function hedley_admin_vbo_export_csv($variables) {
  // Sanitize data.
  foreach ($variables['header'] as $key => $item) {
    $variables['header'][$key] = strtr($item, array($variables['separator'] => ' '));
  }

  $content_replacements = array(
    '\r\n' => ' ',
    '\n\r' => ' ',
    '\r' => ' ',
    '\n' => ' ',
    '\t' => ' ',
    $variables['separator'] => ' ',
  );
  foreach ($variables['rows'] as $row_key => $row) {
    foreach ($row as $cell_key => $cell) {
      $variables['rows'][$row_key][$cell_key] = strip_tags(strtr($cell, $content_replacements));
    }
  }

  $handle = fopen('php://temp', 'r+');
  fputcsv($handle, $variables['header']);
  foreach ($variables['rows'] as $row) {
    fputcsv($handle, $row);
  }
  rewind($handle);
  $csv_output = '';
  while (!feof($handle)) {
    $csv_output .= fread($handle, 8192);
  }
  fclose($handle);
  return $csv_output;
}

/**
 * Implements hook_block_info().
 */
function hedley_admin_block_info() {
  $blocks['eheza_app_sidebar_menu'] = [
    'info' => t('E-Heza Admin Menu'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  ];

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function hedley_admin_block_view($delta) {
  if ($delta != 'eheza_app_sidebar_menu') {
    return;
  }

  $query = db_select('menu_links', 'm');
  $query->fields('m', ['link_path', 'link_title', 'options']);
  $query->condition('menu_name', 'menu-eheza-app-admin-menu');
  $query->orderBy('weight');

  $results = $query->execute()->fetchAll();

  $links = [];
  foreach ($results as $result) {
    $links[] = l($result->link_title, $result->link_path, unserialize($result->options));
  }

  $block = [
    'subject' => t('E-Heza Admin Menu'),
    'content' => [
      '#theme' => 'item_list',
      '#items' => $links,
      '#type' => 'ul',
    ],
  ];

  return $block;
}

/**
 * We do not allow to unpublish content, as it may break syncing.
 *
 * Implements hook_node_update().
 */
function hedley_admin_node_update($node) {
  if (($node->status != NODE_NOT_PUBLISHED) || ($node->original->status != NODE_PUBLISHED)) {
    // We're not unpublishing the node.
    return;
  }

  // Allow to override unpublishing restrictions.
  if (variable_get('hedley_super_user_mode', FALSE)) {
    return;
  }

  throw new Exception('Content unpublishing is forbidden!');
}

/**
 * We do not allow deleting content, as it may break syncing.
 *
 * Implements hook_node_delete().
 */
function hedley_admin_node_delete($node) {
  // Allow to override deletion restrictions.
  if (variable_get('hedley_super_user_mode', FALSE)) {
    return;
  }

  throw new Exception('Content deletion is forbidden!');
}

/**
 * Implements hook_views_pre_view().
 *
 * We would like to propagate the node argument (child)
 * for all the measurements (weight, height, muac), but
 * an URL like ledger/5/5/5 would be ugly.
 * So we propagate the first argument into the other
 * contextual filters by code.
 */
function hedley_admin_views_pre_view(&$view) {
  if ($view->name != 'ledger') {
    return;
  }
  if (empty($view->args[0])) {
    return;
  }
  $view->args[1] = $view->args[0];
  $view->args[2] = $view->args[0];
  $view->args[3] = $view->args[0];
}

/**
 * Implements hook_views_post_execute().
 *
 * Handle special Caregiver field.
 */
function hedley_admin_views_post_execute(&$view) {
  if ($view->name !== 'ledger') {
    return;
  }
  foreach ($view->result as $result) {
    // We have a Caregiver field in the output, where we'd like to simply
    // tell if the given person, displayed in another field, is a mother
    // or a caregiver. So we transform the output of the view to show
    // this boolean outcome.
    if ($result->field_field_related_by[0]['rendered']['#markup'] !== 'Caregiver for') {
      $result->field_field_related_by[0]['rendered']['#markup'] = '';
    }
    else {
      $result->field_field_related_by[0]['rendered']['#markup'] = t('X');
    }
  }

  // Due to the manipulation at hedley_admin_views_pre_view(), we would
  // end up with a very strange breadcrumb, sanitizing it here.
  $breadcrumb = [];
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l(t('Children'), 'admin/content/children');
  $breadcrumb[] = l(t('Ledger'), 'admin/ledger/' . $view->args[0]);
  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Adds the proper grouping to the ledger.
 */
function hedley_admin_query_views_ledger_alter(QueryAlterableInterface $query) {
  // Modifying the query here, notice the reference handling.
  // @see https://api.drupal.org/api/drupal/includes!database!select.inc/function/SelectQueryInterface%3A%3AgetGroupBy/7.
  $fields =& $query->getGroupBy();
  $fields['node.nid'] = 'node.nid';
}

/**
 * Health-center-based access check.
 */
function hedley_admin_health_center_access($account = FALSE) {
  global $user;

  if (user_is_anonymous()) {
    return FALSE;
  }

  $account = !empty($account) ? $account : $user;
  if ($account->uid == 1) {
    return TRUE;
  }

  if (in_array('administrator', $account->roles)) {
    return TRUE;
  }

  if (!in_array('E-ledger viewer', $account->roles) && !in_array('nurse', $account->roles)) {
    return FALSE;
  }

  // There's no trivial and nice way to pass a view argument.
  // Here views_get_current_view() doesn't return anything.
  // Expected path:
  // /admin/ledger/[nid].
  $nid = arg(2);
  if (empty($nid)) {
    return FALSE;
  }

  $child = node_load($nid);
  if (empty($child)) {
    return FALSE;
  }

  try {
    $child_wrapper = entity_metadata_wrapper('node', $child);
    $account_wrapper = entity_metadata_wrapper('user', $account);
    $child_center_nid = $child_wrapper->field_health_center->getIdentifier();

    if (empty($child_center_nid)) {
      return FALSE;
    }

    $hc_ids = $account_wrapper->field_health_centers->value(['identifier' => TRUE]);

    return in_array($child_center_nid, $hc_ids);
  }
  catch (Exception $e) {
    // Might be impartial data, anyways, simply disallow the access.
    watchdog('hedley_admin', $e->getMessage());
    return FALSE;
  }
}
