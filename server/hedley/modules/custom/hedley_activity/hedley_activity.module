<?php

/**
 * @file
 * Code for the Hedley Activity feature.
 */

include_once 'hedley_activity.features.inc';

/**
 * Return the activity related node types and RESTful resource handler name.
 *
 * @return array
 *   Array keyed by the node type machine name, and the RESTful resource handler
 *   name as value.
 */
function hedley_activity_get_activity_node_types_and_restful_name() {
  return [
    'height' => 'heights',
    'weight' => 'weights',
  ];
}

/**
 * Implements hook_node_insert().
 */
function hedley_activity_node_insert($node) {
  hedley_activity_trigger_pusher_on_item_data_change($node);
}

/**
 * Implements hook_node_update().
 */
function hedley_activity_node_update($node) {
  if (!in_array($node->type, array_keys(hedley_activity_get_activity_node_types_and_restful_name()))) {
    return;
  }
  // Make sure we get updated data.
  entity_get_controller('node')->resetCache();
  hedley_activity_trigger_pusher_on_item_data_change($node);
}

/**
 * Trigger a pusher event for a Item data.
 *
 * @param object $node
 *   A Item data node type.
 */
function hedley_activity_trigger_pusher_on_item_data_change($node) {
  if (!in_array($node->type, array_keys(hedley_activity_get_activity_node_types_and_restful_name()))) {
    return;
  }

  if ($node->status == NODE_NOT_PUBLISHED) {
    // Node is not published.
    return;
  }

  $account = user_load($node->uid);

  $handler_names = hedley_activity_get_activity_node_types_and_restful_name();

  $handler = restful_get_restful_handler($handler_names[$node->type]);
  $handler->setAccount($account);
  $data = $handler->get($node->nid);

  $event_name = 'activity__update';

  hedley_pusher_trigger_event('general', $event_name, $data[0]);
}

/**
 * Implements hook_node_presave().
 *
 * Calculate z-scores for measurements.
 */
function hedley_activity_node_presave($node) {
  if (!in_array($node->type, ['height', 'weight'])) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $birth = $wrapper->field_child->field_date_birth->value();
  $gender = $wrapper->field_child->field_gender->value();
  $measured = $wrapper->field_date_measured->value();
  $days = ($measured - $birth) / 86400;

  switch ($node->type) {
    // For weight-for-length, I'll have to lookup the other node ...
    case "height":
      $zscore = hedley_zscore_length_for_age($days, $gender, $wrapper->field_height->value());
      $wrapper->field_z_score_age->set($zscore);
      break;

    case "weight":
      $zscore = hedley_zscore_weight_for_age($days, $gender, $wrapper->field_weight->value());
      $wrapper->field_z_score_age->set($zscore);
      break;
  }
}
