<?php

/**
 * @file
 * Code for the Hedley Activity feature.
 */

include_once 'hedley_activity.features.inc';

define('HEDLEY_ACTIVITY_NUTRITION_ENCOUNTER_CONTENT_TYPE', 'nutrition_encounter');
define('HEDLEY_ACTIVITY_ATTENDANCE_CONTENT_TYPE', 'attendance');
define('HEDLEY_ACTIVITY_FAMILY_PLANNING_CONTENT_TYPE', 'family_planning');
define('HEDLEY_ACTIVITY_PHOTO_CONTENT_TYPE', 'photo');
define('HEDLEY_ACTIVITY_HEIGHT_CONTENT_TYPE', 'height');
define('HEDLEY_ACTIVITY_NUTRITION_HEIGHT_CONTENT_TYPE', 'nutrition_height');
define('HEDLEY_ACTIVITY_WELL_CHILD_HEIGHT_CONTENT_TYPE', 'well_child_height');
define('HEDLEY_ACTIVITY_MUAC_CONTENT_TYPE', 'muac');
define('HEDLEY_ACTIVITY_NUTRITION_MUAC_CONTENT_TYPE', 'nutrition_muac');
define('HEDLEY_ACTIVITY_WELL_CHILD_MUAC_CONTENT_TYPE', 'well_child_muac');
define('HEDLEY_ACTIVITY_NUTRITION_CONTENT_TYPE', 'nutrition');
define('HEDLEY_ACTIVITY_NUTRITION_NUTRITION_CONTENT_TYPE', 'nutrition_nutrition');
define('HEDLEY_ACTIVITY_WELL_CHILD_NUTRITION_CONTENT_TYPE', 'well_child_nutrition');
define('HEDLEY_ACTIVITY_WEIGHT_CONTENT_TYPE', 'weight');
define('HEDLEY_ACTIVITY_NUTRITION_WEIGHT_CONTENT_TYPE', 'nutrition_weight');
define('HEDLEY_ACTIVITY_WELL_CHILD_WEIGHT_CONTENT_TYPE', 'well_child_weight');
define('HEDLEY_ACTIVITY_INDIVIDUAL_PARTICIPANT_CONTENT_TYPE', 'individual_participant');
define('HEDLEY_ACTIVITY_PRENATAL_ENCOUNTER_CONTENT_TYPE', 'prenatal_encounter');
define('HEDLEY_ACTIVITY_ACUTE_ILLNESS_ENCOUNTER_CONTENT_TYPE', 'acute_illness_encounter');
define('HEDLEY_ACTIVITY_SEND_TO_HC_CONTENT_TYPE', 'send_to_hc');
define('HEDLEY_ACTIVITY_ACUTE_ILLNESS_VITALS_CONTENT_TYPE', 'acute_illness_vitals');
define('HEDLEY_ACTIVITY_SYMPTOMS_GENERAL_CONTENT_TYPE', 'symptoms_general');
define('HEDLEY_ACTIVITY_ISOLATION_CONTENT_TYPE', 'isolation');
define('HEDLEY_ACTIVITY_CALL_114_CONTENT_TYPE', 'call_114');
define('HEDLEY_ACTIVITY_HC_CONTAC_CONTENT_TYPE', 'hc_contact');
define('HEDLEY_ACTIVITY_DANGER_SIGNS_CONTENT_TYPE', 'danger_signs');
define('HEDLEY_ACTIVITY_WELL_CHILD_HEAD_CIRCUMFERENCE_CONTENT_TYPE', 'well_child_head_circumference');
define('HEDLEY_ACTIVITY_PERSON_CONTENT_TYPE', 'person');


const HEDLEY_ACTIVITY_HEIGHT_BUNDLES = [
  HEDLEY_ACTIVITY_HEIGHT_CONTENT_TYPE,
  HEDLEY_ACTIVITY_NUTRITION_HEIGHT_CONTENT_TYPE,
  HEDLEY_ACTIVITY_WELL_CHILD_HEIGHT_CONTENT_TYPE,
];

const HEDLEY_ACTIVITY_NUTRITION_BUNDLES = [
  HEDLEY_ACTIVITY_NUTRITION_CONTENT_TYPE,
  HEDLEY_ACTIVITY_NUTRITION_NUTRITION_CONTENT_TYPE,
  HEDLEY_ACTIVITY_WELL_CHILD_NUTRITION_CONTENT_TYPE,
];

const HEDLEY_ACTIVITY_MUAC_BUNDLES = [
  HEDLEY_ACTIVITY_MUAC_CONTENT_TYPE,
  HEDLEY_ACTIVITY_NUTRITION_MUAC_CONTENT_TYPE,
  HEDLEY_ACTIVITY_WELL_CHILD_MUAC_CONTENT_TYPE,
];

const HEDLEY_ACTIVITY_WEIGHT_BUNDLES = [
  HEDLEY_ACTIVITY_WEIGHT_CONTENT_TYPE,
  HEDLEY_ACTIVITY_NUTRITION_WEIGHT_CONTENT_TYPE,
  HEDLEY_ACTIVITY_WELL_CHILD_WEIGHT_CONTENT_TYPE,
];

/**
 * Implements hook_node_insert().
 */
function hedley_activity_node_insert($node) {
  if (!in_array($node->type, HEDLEY_ACTIVITY_HEIGHT_BUNDLES)) {
    return;
  }

  // Make sure we get updated data.
  entity_get_controller('node')->resetCache([$node->nid]);
  hedley_activity_handle_height($node->nid);
}

/**
 * Implements hook_node_update().
 */
function hedley_activity_node_update($node) {
  if (!in_array($node->type, array_merge(['person'], HEDLEY_ACTIVITY_HEIGHT_BUNDLES))) {
    return;
  }

  // Make sure we get updated data.
  entity_get_controller('node')->resetCache([$node->nid]);

  if ($node->type == 'person') {
    // Recalculate z-score values when gender or birth date changes.
    $wrapper = entity_metadata_wrapper('node', $node);
    $wrapper_orig = entity_metadata_wrapper('node', $node->original);

    $birth_date = $wrapper->field_birth_date->value();
    $birth_date_orig = $wrapper_orig->field_birth_date->value();
    $gender = $wrapper->field_gender->value();
    $gender_orig = $wrapper_orig->field_gender->value();

    if ($birth_date !== $birth_date_orig || $gender !== $gender_orig) {
      hedley_activity_handle_child_zscores($node->nid);
    }

    return;
  }

  // It's not a person, so it's a height.
  hedley_activity_handle_height($node->nid);
}

/**
 * Given the node ID of a `height`, update z-score for related weight.
 *
 * @param int $nid
 *   The node ID of the height.
 */
function hedley_activity_handle_height($nid) {
  $wrapper = entity_metadata_wrapper('node', $nid);

  $child_id = $wrapper->field_person->getIdentifier();
  $weight_id = hedley_activity_node_by_peer_in_session($wrapper, $child_id);

  if (empty($weight_id)) {
    // There is no weight node for this child/session combination.
    return;
  }

  $weight = entity_metadata_wrapper('node', $weight_id);

  // The presave should fill it in, so no need to think too hard here ...
  $weight->field_zscore_length->set(NULL);
  $weight->field_zscore_bmi->set(NULL);
  $weight->field_bmi->set(NULL);
  $weight->save();
}

/**
 * Given the node ID of a `child`, update all z-scores for the child.
 *
 * @param int $nid
 *   The node ID of the child.
 */
function hedley_activity_handle_child_zscores($nid) {
  $batch_size = 50;
  $offset = 0;

  $bundles = array_merge(HEDLEY_ACTIVITY_HEIGHT_BUNDLES, HEDLEY_ACTIVITY_WEIGHT_BUNDLES);
  $bundles[] = HEDLEY_ACTIVITY_WELL_CHILD_HEAD_CIRCUMFERENCE_CONTENT_TYPE;

  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $bundles, 'IN')
    ->fieldCondition('field_person', 'target_id', $nid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyOrderBy('nid', 'ASC');

  $query_count = clone $base_query;
  $count = $query_count->count()->execute();

  while ($offset < $count) {
    $query = clone $base_query;

    $result = $query
      ->range($offset, $batch_size)
      ->execute();

    if (empty($result['node'])) {
      // No more z-scores need updating.
      return;
    }

    $keys = array_keys($result['node']);
    node_load_multiple($keys);

    foreach ($keys as $key) {
      // Just trigger presave ... that will do the hard work!
      $wrapper = entity_metadata_wrapper('node', $key);
      $wrapper->field_zscore_age->set(NULL);
      $wrapper->save();
    }

    $offset += $batch_size;

    // Free up memory.
    drupal_static_reset();
  }
}

/**
 * Implements hook_node_presave().
 *
 * Calculate z-scores for measurements.
 */
function hedley_activity_node_presave($node) {
  $bundles = array_merge(HEDLEY_ACTIVITY_HEIGHT_BUNDLES, HEDLEY_ACTIVITY_WEIGHT_BUNDLES);
  $bundles[] = HEDLEY_ACTIVITY_WELL_CHILD_HEAD_CIRCUMFERENCE_CONTENT_TYPE;

  if (!in_array($node->type, $bundles)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (empty($wrapper->field_person->value())) {
    // We need the child for birthdate and gender ...
    return;
  }

  if (!isset($wrapper->field_person->field_birth_date)) {
    return;
  }
  if (!isset($wrapper->field_person->field_gender)) {
    return;
  }

  $birth = $wrapper->field_person->field_birth_date->value();
  $gender = $wrapper->field_person->field_gender->value();
  $measured = $wrapper->field_date_measured->value();

  // 86400 seconds in a day.
  $days = ($measured - $birth) / 86400;

  if (in_array($node->type, HEDLEY_ACTIVITY_HEIGHT_BUNDLES)) {
    $zscore = hedley_zscore_length_for_age($days, $gender, $wrapper->field_height->value());
    $wrapper->field_zscore_age->set($zscore);
    return;
  }

  if ($node->type == HEDLEY_ACTIVITY_WELL_CHILD_HEAD_CIRCUMFERENCE_CONTENT_TYPE) {
    $zscore = hedley_zscore_head_circumference_for_age($days, $gender, $wrapper->field_head_circumference->value());
    $wrapper->field_zscore_age->set($zscore);
    return;
  }

  // We know it's weight.
  $zscore_for_age = hedley_zscore_weight_for_age($days, $gender, $wrapper->field_weight->value());
  $wrapper->field_zscore_age->set($zscore_for_age);

  $child_id = $wrapper->field_person->getIdentifier();
  $height_id = hedley_activity_node_by_peer_in_session($wrapper, $child_id);

  if (empty($height_id)) {
    // No height yet, so no zscore_length or BMI.
    $wrapper->field_zscore_length->set(NULL);
    $wrapper->field_zscore_bmi->set(NULL);
    $wrapper->field_bmi->set(NULL);
  }
  else {
    $height = entity_metadata_wrapper('node', $height_id);
    $cm = $height->field_height->value();
    $kg = $wrapper->field_weight->value();

    // For children older than two, we actually measure height rather than
    // length. So, we need to use the weight-for-height tables, rather than
    // weight-or-length. But we store the result in the same field.
    if ($days > (365 * 2)) {
      $zscore_for_length = hedley_zscore_weight_for_height($cm, $gender, $kg);
    }
    else {
      $zscore_for_length = hedley_zscore_weight_for_length($cm, $gender, $kg);
    }

    // The formula is (kg / meters squared).
    $bmi = $kg / pow($cm / 100, 2);
    $zscore_bmi_for_age = hedley_zscore_bmi_for_age($days, $gender, $bmi);

    $wrapper->field_zscore_length->set($zscore_for_length);
    $wrapper->field_zscore_bmi->set($zscore_bmi_for_age);
    $wrapper->field_bmi->set($bmi);
  }
}

/**
 * Get the height by weight / weight by height, for a child in a session.
 *
 * @param \EntityMetadataWrapper $wrapper
 *   Wrapper of source node.
 * @param int $child_id
 *   The node ID of the child.
 *
 * @return int|null
 *   The node ID of the target node, or NULL.
 */
function hedley_activity_node_by_peer_in_session(\EntityMetadataWrapper $wrapper, $child_id) {
  if (empty($child_id)) {
    return NULL;
  }

  $bundle = $wrapper->getBundle();
  switch ($bundle) {
    case 'height':
      $session_field = 'field_session';
      $target_bundle = 'weight';
      break;

    case 'nutrition_height':
      $session_field = 'field_nutrition_encounter';
      $target_bundle = 'nutrition_weight';
      break;

    case 'well_child_height':
      $session_field = 'field_well_child_encounter';
      $target_bundle = 'well_child_weight';
      break;

    case 'weight':
      $session_field = 'field_session';
      $target_bundle = 'height';
      break;

    case 'nutrition_weight':
      $session_field = 'field_nutrition_encounter';
      $target_bundle = 'nutrition_height';
      break;

    case 'well_child_weight':
      $session_field = 'field_well_child_encounter';
      $target_bundle = 'well_child_height';
      break;

    default:
      return NULL;
  }

  $session_id = $wrapper->{$session_field}->getIdentifier();
  if (empty($session_id)) {
    return NULL;
  }

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $target_bundle)
    ->fieldCondition($session_field, 'target_id', $session_id)
    ->fieldCondition('field_person', 'target_id', $child_id)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 1)
    ->execute();

  return !empty($result['node']) ? key($result['node']) : NULL;
}

/**
 * Get a measurement by the measurement types and period.
 *
 * @param int $person_id
 *   The person node ID.
 * @param array $measurement_bundles
 *   The measurement node bundle.
 * @param array $period
 *   The period of the measurement, contains a start and an end.
 * @param int $range
 *   Optional; The query's range.
 *
 * @return array
 *   Node IDs if they exist or empty array if no nodes exist.
 */
function hedley_activity_get_person_measurements_by_period($person_id, array $measurement_bundles, array $period, $range = 100) {
  $query = db_select('node', 'node');
  $query->fields('node', ['nid', 'created', 'type']);

  $person_field = 'field_person';
  hedley_general_join_field_to_query($query, 'node', $person_field);
  $person_field_name = $person_field . '.' . $person_field . '_target_id';
  $query->condition($person_field_name, $person_id);

  $query
    ->condition('type', $measurement_bundles, 'IN')
    ->condition('status', NODE_PUBLISHED);

  hedley_general_join_field_to_query($query, 'node', 'field_session');
  $date_field = 'field_scheduled_date';
  hedley_general_join_field_to_query($query, 'node', $date_field, TRUE, "field_session.field_session_target_id");
  $date_field_name = $date_field . '.' . $date_field . '_value';

  $query->condition($date_field_name, [$period['start'], $period['end']], 'BETWEEN');

  $query->range(0, $range);

  return $query
    ->execute()
    ->fetchAllAssoc('nid');
}
