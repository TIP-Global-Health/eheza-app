<?php

/**
 * @file
 * Code for the Hedley Activity feature.
 */

include_once 'hedley_activity.features.inc';

/**
 * Return the activity related node types and RESTful resource handler name.
 *
 * @return array
 *   Array keyed by the node type machine name, and the RESTful resource handler
 *   name as value.
 */
function hedley_activity_get_activity_node_types_and_restful_name() {
  return [
    'height' => 'heights',
    'weight' => 'weights',
  ];
}

/**
 * Implements hook_node_insert().
 */
function hedley_activity_node_insert($node) {
  switch ($node->type) {
    case 'height':
      // Make sure we get updated data.
      entity_get_controller('node')->resetCache([$node->nid]);
      hedley_activity_handle_height($node->nid);
      break;

  }
}

/**
 * Implements hook_node_update().
 */
function hedley_activity_node_update($node) {
  switch ($node->type) {
    case 'child':
      // Make sure we get updated data.
      entity_get_controller('node')->resetCache([$node->nid]);
      hedley_activity_handle_child_zscores($node->nid);
      break;

    case 'height':
      // Make sure we get updated data.
      entity_get_controller('node')->resetCache([$node->nid]);
      hedley_activity_handle_height($node->nid);
      break;
  }
}

/**
 * Given the node ID of a `height`, update z-score for related weight.
 */
function hedley_activity_handle_height($nid) {
  $height = entity_metadata_wrapper('node', $nid);

  try {
    $sessionId = $height->field_session->getIdentifier();
    $childId = $height->field_child->getIdentifier();
  }
  catch (EntityMetadataWrapperException $e) {
    // Bail if the fields didn't exist.
    return;
  }

  $weight = hedley_activity_weight_for_session($sessionId, $childId);

  if (isset($weight)) {
    // The presave should fill it in, so no need to think too hard here ...
    $weight->field_z_score_length->set(NULL);
    $weight->save();
  }
}

/**
 * Given the node ID of a `child`, update all z-scores for the child.
 */
function hedley_activity_handle_child_zscores($nid) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['height', 'weight'], 'IN')
    ->fieldCondition('field_child', 'target_id', $nid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->execute();

  if ($result['node']) {
    $keys = array_keys($result['node']);
    node_load_multiple($keys);

    foreach ($keys as $key) {
      // Just trigger presave ... that will do the hard work!
      $wrapper = entity_metadata_wrapper('node', $key);
      $wrapper->field_z_score_age->set(NULL);
      $wrapper->save();
    }
  }
}

/**
 * Trigger a pusher event for a Item data.
 *
 * @param object $node
 *   A Item data node type.
 */
function hedley_activity_trigger_pusher_on_item_data_change($node) {
  if (!in_array($node->type, array_keys(hedley_activity_get_activity_node_types_and_restful_name()))) {
    return;
  }

  if ($node->status == NODE_NOT_PUBLISHED) {
    // Node is not published.
    return;
  }

  $account = user_load($node->uid);

  $handler_names = hedley_activity_get_activity_node_types_and_restful_name();

  $handler = restful_get_restful_handler($handler_names[$node->type]);
  $handler->setAccount($account);
  $data = $handler->get($node->nid);

  $event_name = 'activity__update';

  hedley_pusher_trigger_event('general', $event_name, $data[0]);
}

/**
 * Implements hook_node_presave().
 *
 * Calculate z-scores for measurements.
 */
function hedley_activity_node_presave($node) {
  if (!in_array($node->type, ['height', 'weight'])) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  try {
    $birth = $wrapper->field_child->field_date_birth->value();
    $gender = $wrapper->field_child->field_gender->value();
    $measured = $wrapper->field_date_measured->value();
    $days = ($measured - $birth) / 86400;
  }
  catch (EntityMetadataWrapperException $e) {
    // Some nodes won't have the fields we need ... in that case,
    // just bail.
    return;
  }

  switch ($node->type) {
    // For weight-for-length, I'll have to lookup the other node ...
    case "height":
      $zscore = hedley_zscore_length_for_age($days, $gender, $wrapper->field_height->value());
      $wrapper->field_z_score_age->set($zscore);
      break;

    case "weight":
      $zscore_for_age = hedley_zscore_weight_for_age($days, $gender, $wrapper->field_weight->value());
      $wrapper->field_z_score_age->set($zscore_for_age);

      try {
        $childId = $wrapper->field_child->getIdentifier();
        $sessionId = $wrapper->field_session->getIdentifier();
      }
      catch (EntityMetadataWrapperException $e) {
        // Bail if the fields didn't exist.
        return;
      }

      $height = hedley_activity_height_for_session($sessionId, $childId);

      if (isset($height)) {
        $cm = $height->field_height->value();
        $zscore_for_length = hedley_zscore_weight_for_length($cm, $gender, $wrapper->field_weight->value());
        $wrapper->field_z_score_length->set($zscore_for_length);
      }

      break;
  }
}

/**
 * Get the height for a child in a session.
 */
function hedley_activity_height_for_session($sessionId, $childId) {
  if (is_null($sessionId) || is_null($childId)) {
    return NULL;
  }

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'height')
    ->fieldCondition('field_session', 'target_id', $sessionId)
    ->fieldCondition('field_child', 'target_id', $childId)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 1)
    ->execute();

  if (isset($result['node'])) {
    return entity_metadata_wrapper('node', array_keys($result['node'])[0]);
  }
  else {
    return NULL;
  }
}

/**
 * Get the weight for a child in a session.
 */
function hedley_activity_weight_for_session($sessionId, $childId) {
  if (is_null($sessionId) || is_null($childId)) {
    return NULL;
  }

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'weight')
    ->fieldCondition('field_session', 'target_id', $sessionId)
    ->fieldCondition('field_child', 'target_id', $childId)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 1)
    ->execute();

  if (isset($result['node'])) {
    return entity_metadata_wrapper('node', array_keys($result['node'])[0]);
  }
  else {
    return NULL;
  }
}
