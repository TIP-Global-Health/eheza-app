<?php

/**
 * @file
 * Code for the Hedley Activity feature.
 */

include_once 'hedley_activity.features.inc';

// Define the measurements content types.
define('HEDLEY_ACTIVITY_FAMILY_PLANNING_CONTENT_TYPE', 'family_planning');
define('HEDLEY_ACTIVITY_HEIGHT_CONTENT_TYPE', 'height');
define('HEDLEY_ACTIVITY_MUAC_CONTENT_TYPE', 'muac');
define('HEDLEY_ACTIVITY_NUTRITION_CONTENT_TYPE', 'nutrition');
define('HEDLEY_ACTIVITY_PHOTO_CONTENT_TYPE', 'photo');
define('HEDLEY_ACTIVITY_WEIGHT_CONTENT_TYPE', 'weight');

/**
 * Get the measurements content types.
 *
 * @return array
 *   All the measurements content types.
 */
function hedley_activity_get_measurements_content_types() {
  return [
    HEDLEY_ACTIVITY_FAMILY_PLANNING_CONTENT_TYPE,
    HEDLEY_ACTIVITY_HEIGHT_CONTENT_TYPE,
    HEDLEY_ACTIVITY_MUAC_CONTENT_TYPE,
    HEDLEY_ACTIVITY_NUTRITION_CONTENT_TYPE,
    HEDLEY_ACTIVITY_PHOTO_CONTENT_TYPE,
    HEDLEY_ACTIVITY_WEIGHT_CONTENT_TYPE,
  ];
}

/**
 * Return the activity related node types and RESTful resource handler name.
 *
 * @return array
 *   Array keyed by the node type machine name, and the RESTful resource handler
 *   name as value.
 */
function hedley_activity_get_activity_node_types_and_restful_name() {
  return [
    'height' => 'heights',
    'weight' => 'weights',
  ];
}

/**
 * Implements hook_node_insert().
 */
function hedley_activity_node_insert($node) {
  if ($node->type != 'height') {
    return;
  }

  // Make sure we get updated data.
  entity_get_controller('node')->resetCache([$node->nid]);
  hedley_activity_handle_height($node->nid);
}

/**
 * Implements hook_node_update().
 */
function hedley_activity_node_update($node) {
  if (!in_array($node->type, ['child', 'height'])) {
    return;
  }

  // Make sure we get updated data.
  entity_get_controller('node')->resetCache([$node->nid]);

  if ($node->type == 'child') {
    hedley_activity_handle_child_zscores($node->nid);
    return;
  }

  if ($node->type == 'height') {
    hedley_activity_handle_height($node->nid);
    return;
  }
}

/**
 * Given the node ID of a `height`, update z-score for related weight.
 *
 * @param int $nid
 *   The node ID of the height.
 */
function hedley_activity_handle_height($nid) {
  $height = entity_metadata_wrapper('node', $nid);

  $session_id = $height->field_session->getIdentifier();
  $child_id = $height->field_child->getIdentifier();

  $weight_id = hedley_activity_weight_for_session($session_id, $child_id);

  if (empty($weight_id)) {
    // There is no weight node for this child/session combination.
    return;
  }

  $weight = entity_metadata_wrapper('node', $weight_id);

  // The presave should fill it in, so no need to think too hard here ...
  $weight->field_z_score_length->set(NULL);
  $weight->save();
}

/**
 * Given the node ID of a `child`, update all z-scores for the child.
 *
 * @param int $nid
 *   The node ID of the child.
 */
function hedley_activity_handle_child_zscores($nid) {
  $batch_size = 50;
  $offset = 0;

  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ['height', 'weight'], 'IN')
    ->fieldCondition('field_child', 'target_id', $nid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyOrderBy('nid', 'ASC');

  $query_count = clone $base_query;
  $count = $query_count->count()->execute();

  while ($offset < $count) {
    $query = clone $base_query;

    $result = $query
      ->range($offset, $batch_size)
      ->execute();

    if (empty($result['node'])) {
      // No more z-scores need updating.
      return;
    }

    $keys = array_keys($result['node']);
    node_load_multiple($keys);

    foreach ($keys as $key) {
      // Just trigger presave ... that will do the hard work!
      $wrapper = entity_metadata_wrapper('node', $key);
      $wrapper->field_z_score_age->set(NULL);
      $wrapper->save();
    }

    $offset += $batch_size;

    // Free up memory.
    drupal_static_reset();
  }
}

/**
 * Trigger a pusher event for a Item data.
 *
 * @param object $node
 *   A Item data node type.
 */
function hedley_activity_trigger_pusher_on_item_data_change($node) {
  if (!in_array($node->type, array_keys(hedley_activity_get_activity_node_types_and_restful_name()))) {
    return;
  }

  if ($node->status == NODE_NOT_PUBLISHED) {
    // Node is not published.
    return;
  }

  $account = user_load($node->uid);

  $handler_names = hedley_activity_get_activity_node_types_and_restful_name();

  $handler = restful_get_restful_handler($handler_names[$node->type]);
  $handler->setAccount($account);
  $data = $handler->get($node->nid);

  $event_name = 'activity__update';

  hedley_pusher_trigger_event('general', $event_name, $data[0]);
}

/**
 * Implements hook_node_presave().
 *
 * Calculate z-scores for measurements.
 */
function hedley_activity_node_presave($node) {
  if (!in_array($node->type, ['height', 'weight'])) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (empty($wrapper->field_child->value())) {
    // We need the child for birthdate and gender ...
    return;
  }

  $birth = $wrapper->field_child->field_date_birth->value();
  $gender = $wrapper->field_child->field_gender->value();
  $measured = $wrapper->field_date_measured->value();

  // 86400 seconds in a day.
  $days = ($measured - $birth) / 86400;

  if ($node->type == 'height') {
    $zscore = hedley_zscore_length_for_age($days, $gender, $wrapper->field_height->value());
    $wrapper->field_z_score_age->set($zscore);
    return;
  }

  if ($node->type == 'weight') {
    $zscore_for_age = hedley_zscore_weight_for_age($days, $gender, $wrapper->field_weight->value());
    $wrapper->field_z_score_age->set($zscore_for_age);

    $child_id = $wrapper->field_child->getIdentifier();
    $session_id = $wrapper->field_session->getIdentifier();

    $height_id = hedley_activity_height_for_session($session_id, $child_id);

    if (empty($height_id)) {
      // No height yet, so no z_score_length.
      $wrapper->field_z_score_length->set(NULL);
    }
    else {
      $height = entity_metadata_wrapper('node', $height_id);
      $cm = $height->field_height->value();
      $zscore_for_length = hedley_zscore_weight_for_length($cm, $gender, $wrapper->field_weight->value());
      $wrapper->field_z_score_length->set($zscore_for_length);
    }
  }
}

/**
 * Get the height for a child in a session.
 *
 * @param int $session_id
 *   The node ID of the session.
 * @param int $child_id
 *   The node ID of the child.
 *
 * @return int|null
 *   The node ID of the height node, or NULL.
 */
function hedley_activity_height_for_session($session_id, $child_id) {
  if (empty($session_id) || empty($child_id)) {
    return NULL;
  }

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'height')
    ->fieldCondition('field_session', 'target_id', $session_id)
    ->fieldCondition('field_child', 'target_id', $child_id)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 1)
    ->execute();

  return !empty($result['node']) ? key($result['node']) : NULL;
}

/**
 * Get the weight for a child in a session.
 *
 * @param int $session_id
 *   The node ID of the session.
 * @param int $child_id
 *   The node ID of the child.
 *
 * @return int|null
 *   The node ID of the weight node, or NULL.
 */
function hedley_activity_weight_for_session($session_id, $child_id) {
  if (empty($session_id) || empty($child_id)) {
    return NULL;
  }

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'weight')
    ->fieldCondition('field_session', 'target_id', $session_id)
    ->fieldCondition('field_child', 'target_id', $child_id)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 1)
    ->execute();

  return !empty($result['node']) ? key($result['node']) : NULL;
}

/**
 * Get a measurement by the session ID and the measurement type.
 *
 * @param int $session_id
 *   The session node ID.
 * @param string $measurement_bundle
 *   The measurement node bundle.
 *
 * @return array|null
 *   Node IDs if they exist or nothing if no nodes exist.
 */
function hedley_activity_get_measurements_entities_by_session($session_id, $measurement_bundle) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $measurement_bundle)
    ->fieldCondition('field_session', 'target_id', $session_id)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->range(0, 100)
    ->execute();

  return !empty($result['node']) ? array_keys($result['node']) : NULL;
}
