<?php

/**
 * @file
 * Populate Hedley content.
 */

use Faker\Generator;

/**
 * Implements hook_migrate_api().
 */
function hedley_migrate_migrate_api() {
  $api = [
    'api' => 2,
    'groups' => [
      'counseling' => [
        'title' => t('Counseling'),
      ],
      'forms' => [
        'title' => t('Forms'),
      ],
    ],
    'migrations' => [
      'HedleyMigrateAcuteFindings' => [
        'class_name' => 'HedleyMigrateAcuteFindings',
      ],
      'HedleyMigrateAcuteIllnessDangerSigns' => [
        'class_name' => 'HedleyMigrateAcuteIllnessDangerSigns',
      ],
      'HedleyMigrateAcuteIllnessEncounters' => [
        'class_name' => 'HedleyMigrateAcuteIllnessEncounters',
      ],
      'HedleyMigrateAcuteIllnessMuac' => [
        'class_name' => 'HedleyMigrateAcuteIllnessMuac',
      ],
      'HedleyMigrateAcuteIllnessNutrition' => [
        'class_name' => 'HedleyMigrateAcuteIllnessNutrition',
      ],
      'HedleyMigrateAcuteIllnessVitals' => [
        'class_name' => 'HedleyMigrateAcuteIllnessVitals',
      ],
      'HedleyMigrateAttendances' => [
        'class_name' => 'HedleyMigrateAttendances',
      ],
      'HedleyMigrateBreastExams' => [
        'class_name' => 'HedleyMigrateBreastExams',
      ],
      'HedleyMigrateCall114' => [
        'class_name' => 'HedleyMigrateCall114',
      ],
      'HedleyMigrateCatchmentAreas' => [
        'class_name' => 'HedleyMigrateCatchmentAreas',
      ],
      'HedleyMigrateChildFbfs' => [
        'class_name' => 'HedleyMigrateChildFbfs',
      ],
      'HedleyMigrateClinics' => [
        'class_name' => 'HedleyMigrateClinics',
      ],
      'HedleyMigrateCorePhysicalExam' => [
        'class_name' => 'HedleyMigrateCorePhysicalExam',
      ],
      'HedleyMigrateCounselingSchedules' => [
        'class_name' => 'HedleyMigrateCounselingSchedules',
        'group_name' => 'counseling',
      ],
      'HedleyMigrateCounselingSessions' => [
        'class_name' => 'HedleyMigrateCounselingSessions',
        'group_name' => 'counseling',
      ],
      'HedleyMigrateCounselingTopics' => [
        'class_name' => 'HedleyMigrateCounselingTopics',
        'group_name' => 'counseling',
      ],
      'HedleyMigrateDangerSigns' => [
        'class_name' => 'HedleyMigrateDangerSigns',
      ],
      'HedleyMigrateDevices' => [
        'class_name' => 'HedleyMigrateDevices',
      ],
      'HedleyMigrateExposure' => [
        'class_name' => 'HedleyMigrateExposure',
      ],
      'HedleyMigrateFamilyPlannings' => [
        'class_name' => 'HedleyMigrateFamilyPlannings',
      ],
      'HedleyMigrateHealthCenters' => [
        'class_name' => 'HedleyMigrateHealthCenters',
      ],
      'HedleyMigrateHCContact' => [
        'class_name' => 'HedleyMigrateHCContact',
      ],
      'HedleyMigrateHealthEducation' => [
        'class_name' => 'HedleyMigrateHealthEducation',
      ],
      'HedleyMigrateHeights' => [
        'class_name' => 'HedleyMigrateHeights',
      ],
      'HedleyMigrateIndividualParticipants' => [
        'class_name' => 'HedleyMigrateIndividualParticipants',
      ],
      'HedleyMigrateIsolation' => [
        'class_name' => 'HedleyMigrateIsolation',
      ],
      'HedleyMigrateLactations' => [
        'class_name' => 'HedleyMigrateLactations',
      ],
      'HedleyMigrateLastMenstrualPeriod' => [
        'class_name' => 'HedleyMigrateLastMenstrualPeriod',
      ],
      'HedleyMigrateMalariaTesting' => [
        'class_name' => 'HedleyMigrateMalariaTesting',
      ],
      'HedleyMigrateMedicalHistory' => [
        'class_name' => 'HedleyMigrateMedicalHistory',
      ],
      'HedleyMigrateMedication' => [
        'class_name' => 'HedleyMigrateMedication',
      ],
      'HedleyMigrateMedicationDistribution' => [
        'class_name' => 'HedleyMigrateMedicationDistribution',
      ],
      'HedleyMigrateMotherFbfs' => [
        'class_name' => 'HedleyMigrateMotherFbfs',
      ],
      'HedleyMigrateMuacs' => [
        'class_name' => 'HedleyMigrateMuacs',
      ],
      'HedleyMigrateNurses' => [
        'class_name' => 'HedleyMigrateNurses',
      ],
      'HedleyMigrateNutritionEncounters' => [
        'class_name' => 'HedleyMigrateNutritionEncounters',
      ],
      'HedleyMigrateNutritions' => [
        'class_name' => 'HedleyMigrateNutritions',
      ],
      'HedleyMigrateNutritionHeight' => [
        'class_name' => 'HedleyMigrateNutritionHeight',
      ],
      'HedleyMigrateNutritionMuac' => [
        'class_name' => 'HedleyMigrateNutritionMuac',
      ],
      'HedleyMigrateNutritionNutritions' => [
        'class_name' => 'HedleyMigrateNutritionNutritions',
      ],
      'HedleyMigrateNutritionPhoto' => [
        'class_name' => 'HedleyMigrateNutritionPhoto',
      ],
      'HedleyMigrateNutritionWeight' => [
        'class_name' => 'HedleyMigrateNutritionWeight',
      ],
      'HedleyMigrateObstetricHistory' => [
        'class_name' => 'HedleyMigrateObstetricHistory',
      ],
      'HedleyMigrateObstetricHistoryStep2' => [
        'class_name' => 'HedleyMigrateObstetricHistoryStep2',
      ],
      'HedleyMigrateObstetricalExam' => [
        'class_name' => 'HedleyMigrateObstetricalExam',
      ],
      'HedleyMigrateParticipantForms' => [
        'class_name' => 'HedleyMigrateParticipantForms',
        'group_name' => 'forms',
      ],
      'HedleyMigratePeople' => [
        'class_name' => 'HedleyMigratePeople',
      ],
      'HedleyMigratePhotos' => [
        'class_name' => 'HedleyMigratePhotos',
      ],
      'HedleyMigratePmtctParticipants' => [
        'class_name' => 'HedleyMigratePmtctParticipants',
      ],
      'HedleyMigratePrenatalEncounters' => [
        'class_name' => 'HedleyMigratePrenatalEncounters',
      ],
      'HedleyMigratePrenatalFamilyPlanning' => [
        'class_name' => 'HedleyMigratePrenatalFamilyPlanning',
      ],
      'HedleyMigratePrenatalNutrition' => [
        'class_name' => 'HedleyMigratePrenatalNutrition',
      ],
      'HedleyMigratePrenatalPhoto' => [
        'class_name' => 'HedleyMigratePrenatalPhoto',
      ],
      'HedleyMigrateRelationships' => [
        'class_name' => 'HedleyMigrateRelationships',
      ],
      'HedleyMigrateResource' => [
        'class_name' => 'HedleyMigrateResource',
      ],
      'HedleyMigrateSendToHC' => [
        'class_name' => 'HedleyMigrateSendToHC',
      ],
      'HedleyMigrateSessions' => [
        'class_name' => 'HedleyMigrateSessions',
      ],
      'HedleyMigrateSocialHistory' => [
        'class_name' => 'HedleyMigrateSocialHistory',
      ],
      'HedleyMigrateSymptomsGI' => [
        'class_name' => 'HedleyMigrateSymptomsGI',
      ],
      'HedleyMigrateSymptomsGeneral' => [
        'class_name' => 'HedleyMigrateSymptomsGeneral',
      ],
      'HedleyMigrateSymptomsRespiratory' => [
        'class_name' => 'HedleyMigrateSymptomsRespiratory',
      ],
      'HedleyMigrateTravelHistory' => [
        'class_name' => 'HedleyMigrateTravelHistory',
      ],
      'HedleyMigrateTreatmentHistory' => [
        'class_name' => 'HedleyMigrateTreatmentHistory',
      ],
      'HedleyMigrateTreatmentOngoing' => [
        'class_name' => 'HedleyMigrateTreatmentOngoing',
      ],
      'HedleyMigrateUsers' => [
        'class_name' => 'HedleyMigrateUsers',
      ],
      'HedleyMigrateVillages' => [
        'class_name' => 'HedleyMigrateVillages',
      ],
      'HedleyMigrateVitals' => [
        'class_name' => 'HedleyMigrateVitals',
      ],
      'HedleyMigrateWeights' => [
        'class_name' => 'HedleyMigrateWeights',
      ],
    ],
  ];

  return $api;
}

/**
 * Implements hook_hedley_faker_node_generate().
 */
function hedley_migrate_hedley_faker_node_generate($node, Generator $faker) {
  if (!$node->uid) {
    // User can't be anonymous, get a random user(not admin or anonymous).
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'user')
      ->propertyCondition('uid', [0, 1], 'NOT IN')
      ->range(0, 200)
      ->execute();

    $node->uid = array_rand($result['user']);
  }

  $node->title = $faker->sentence(6);

  switch ($node->type) {
    case 'child':
      _hedley_migrate_preprocess_child($node, $faker);
      break;

    case 'mother':
      _hedley_migrate_preprocess_mother($node, $faker);
      break;

    case 'weight':
      _hedley_migrate_preprocess_weight($node);
      break;

    case 'height':
      _hedley_migrate_preprocess_height($node);
      break;

    case 'muac':
      _hedley_migrate_preprocess_muac($node);
      break;
  }
}

/**
 * Implements hook_hedley_faker_taxonomy_term_generate().
 */
function hedley_migrate_hedley_faker_taxonomy_term_generate($term, Generator $faker) {
  $term->name = $faker->sentence(2);
}

/**
 * Function creates Taxonomy vocabulary that describes GeoLocations.
 *
 * Currently, it's only use is to generate GeoLocation data structure that
 * will be set on client.
 *
 * Structure:
 *  - Level 0: province
 *  - Level 1: district
 *  - Level 2: sector
 *  - Level 3: cell
 *  - Level 4: village
 */
function hedley_migrate_generate_geo_terms_vocabulary() {
  if (taxonomy_vocabulary_machine_name_load('eheza_geolocation')) {
    // Vocabulary already exists.
    return;
  }

  // Create new vocabulary.
  $vocabulary = (object) array(
    'name' => 'Eheza geolocation vocabulary',
    'description' => 'This vocabulary lists all geolocations',
    'machine_name' => 'eheza_geolocation',
  );
  taxonomy_vocabulary_save($vocabulary);

  // Load input file.
  $migrate_dir = variable_get('hedley_migrate_directory', FALSE) ? variable_get('hedley_migrate_directory') : drupal_get_path('module', 'hedley_migrate');
  $source_file = $migrate_dir . '/csv/geo_locations.csv';

  $column_mapping = ['province', 'district', 'sector', 'cell', 'village'];

  foreach ($column_mapping as $column) {
    $data[] = [];
  }

  // Used to check if term exists (was previously created), so we can
  // skip it.
  $locator = [];

  $handler = fopen($source_file, 'r');
  while ($row = fgetcsv($handler)) {
    foreach ($row as $index => $column) {
      _hedley_migrate_process_column($data, $locator, $index, $row, $vocabulary->vid, $column_mapping);
    }
  }

  fclose($handler);
}

/**
 * Processes a column form input file row.
 *
 * Row contains 5 columns:
 *  [ province, district, sector, cell, village ]
 *
 * Function is invoked for each column in a row.
 *
 * @param array $data
 *   Terms created so far.
 * @param array $locator
 *   Locator array, that helps to determine if term requires creation.
 * @param int $index
 *   Index of column that is being processed.
 * @param array $row
 *   The row that contains processed column.
 * @param int $vocabulary_id
 *   The ID of vocabulary to which terms are added.
 * @param array $column_mapping
 *   Columns mapping array.
 */
function _hedley_migrate_process_column(array &$data, array &$locator, $index, array $row, $vocabulary_id, array $column_mapping) {
  $locator_index = implode('-', array_slice($row, 0, $index + 1));

  if (!empty($locator[$locator_index])) {
    // Term already exists.
    return;
  }

  // Resolve term parent.
  if ($index != 0) {
    $parent_key = $row[$index - 1];
    $parent = $data[$index - 1][$parent_key];
  }
  else {
    $parent = 0;
  }

  // Create the term.
  $term = (object) [
    'name' => ucfirst(strtolower($row[$index])),
    'description' => ucfirst($column_mapping[$index]) . ' ' . $row[$index],
    'vid' => $vocabulary_id,
    'parent' => $parent,
  ];
  taxonomy_term_save($term);

  // Update data and locator arrays with new term.
  $data[$index][$row[$index]] = $locator[$locator_index] = $term->tid;
}

/**
 * Generates static geolocation structure to be used by client.
 */
function hedley_migrate_generate_geolocation_structure_for_client() {
  if (!$vocabulary = taxonomy_vocabulary_machine_name_load('eheza_geolocation')) {
    // Vocabulary does not exist.
    return;
  }

  $column_mapping = ['province', 'district', 'sector', 'cell', 'village'];
  foreach ($column_mapping as $index => $column) {
    $data[$index] = [];

    $data[$index]['tids'] = $index == 0 ?
      // We specify vocabulary ID only for top level.
      _hedley_migrate_get_children_by_parents([0], $vocabulary->vid) :
      // We know for sure that all other levels belong to same vocabulary.
      _hedley_migrate_get_children_by_parents($data[$index - 1]['tids']);

    $data[$index][$column] = hedley_migrate_generate_structure_for_terms_of_type($column, $data[$index]['tids']);
  }
}

/**
 * Generates structure for all terms of specified type.
 *
 * @param string $type
 *   Type that term represents - province/district/sector/cell/village.
 * @param array $tids
 *   All term IDs for provided type.
 * @param int $chunk_size
 *   Number of terms in single chunk, while processing terms array.
 *
 * @return string
 *   Structure that is generated for provided input.
 */
function hedley_migrate_generate_structure_for_terms_of_type($type, array $tids, $chunk_size = 256) {
  $tids_chunks = array_chunk($tids, $chunk_size);
  $chunks = [];

  foreach ($tids_chunks as $tid_chunk) {
    $entities = [];
    foreach (taxonomy_term_load_multiple($tid_chunk) as $term) {
      $id = 'toEntityId ' . $term->tid;
      $name = $term->name;

      if ($type == 'province') {
        $parent = 'Nothing';
      }
      else {
        $wrapper = entity_metadata_wrapper('taxonomy_term', $term);
        $parent_tids = $wrapper->parent->value(['identifier' => TRUE]);
        $parent_tid = reset($parent_tids);
        $parent = "(Just <| toEntityId $parent_tid)";
      }

      $entities[] = "( $id, GeoLocation \"$name\" $parent)";
    }

    $chunks[] = '[ ' . implode("\n, ", $entities) . ' ]';
  }

  return implode(" ++ \n ", $chunks);
}

/**
 * IDs of all children terms for specified parents term IDs.
 *
 * @param array $parents
 *   The IDs of parent terms.
 * @param int|bool $vocabulary_id
 *   The ID of vocabulary to which terms belong. False if it's not important.
 *
 * @return array
 *   The IDs of all children terms for specified parents.
 */
function _hedley_migrate_get_children_by_parents(array $parents, $vocabulary_id = FALSE) {
  $query = db_select('taxonomy_term_hierarchy', 'hierarchy');
  if ($vocabulary_id) {
    $query->innerJoin('taxonomy_term_data', 'data', 'hierarchy.tid = data.tid');
  }

  $query->addField('hierarchy', 'tid');
  $query->condition('hierarchy.parent', $parents, 'IN');

  if ($vocabulary_id) {
    $query->condition('data.vid', $vocabulary_id);
  }

  return $query->execute()->fetchCol();
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 * @param \Faker\Generator $faker
 *   The faker generator object.
 */
function _hedley_migrate_preprocess_child($node, Generator $faker) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $helpers = _hedley_migrate_participant_helpers();

  $gender = $helpers['gender'][$faker->numberBetween(0, count($helpers['gender']) - 1)];
  $wrapper->field_gender->set($gender);

  $first_name = $gender == 'male' ? $faker->firstNameMale : $faker->firstNameFemale;
  $middle_name = $gender == 'male' ? $faker->firstNameMale : $faker->firstNameFemale;
  $second_name = $faker->lastName;
  $wrapper->title->set("$first_name $middle_name $second_name");

  // Leave this blank, to test our migration scripts.
  $wrapper->field_person->set(NULL);

  $mode_of_delivery = [
    'svd-episiotomy',
    'svd-no-episiotomy',
    'vd-vacuum',
    'cesarean-delivery',
  ];
  $wrapper->field_mode_of_delivery->set($mode_of_delivery[$faker->numberBetween(0, count($mode_of_delivery) - 1)]);

  $_hedley_devel_generate = &drupal_static(__FUNCTION__, FALSE);

  if ($_hedley_devel_generate) {
    return;
  }

  $_hedley_devel_generate = TRUE;
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 * @param \Faker\Generator $faker
 *   The faker generator object.
 */
function _hedley_migrate_preprocess_mother($node, Generator $faker) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $helpers = _hedley_migrate_participant_helpers();

  $gender = $helpers['gender'][$faker->numberBetween(0, count($helpers['gender']) - 1)];

  $first_name = $gender == 'male' ? $faker->firstNameMale : $faker->firstNameFemale;
  $middle_name = $gender == 'male' ? $faker->firstNameMale : $faker->firstNameFemale;
  $second_name = $faker->lastName;
  $wrapper->title->set("$first_name $middle_name $second_name");

  // Leave this blank, to test our migration scripts.
  $wrapper->field_person->set(NULL);

  $hiv_status = [
    'hiv-exposed-infant',
    'negative',
    'negative-dc',
    'positive',
    'unknown',
  ];
  $wrapper->field_hiv_status->set($hiv_status[$faker->numberBetween(0, count($hiv_status) - 1)]);
  $wrapper->field_household_size->set($faker->numberBetween(0, 30));
  $wrapper->field_number_of_children->set($faker->numberBetween(0, 20));
}

/**
 * Generates helper params for participants fields.
 *
 * @return array
 *   Helper params to generate participants fields.
 */
function _hedley_migrate_participant_helpers() {
  return [
    'gender' =>
      ['male', 'female'],
    'geolocation_info' => [
      ['Amajyaruguru', 'Gakenke', 'Busengo', 'Birambo', 'Birambo'],
      ['Amajyaruguru', 'Gakenke', 'Ruli', 'Gikingo', 'Nyamugari'],
      ['Amajyaruguru', 'Gakenke', 'Rushashi', 'Joma', 'Kineza'],
      ['Amajyaruguru', 'Rulindo', 'Burega', 'Butangampundu', 'Kibiraro'],
      ['Amajyaruguru', 'Rulindo', 'Bushoki', 'Mukoto', 'Muko'],
    ],
  ];
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_weight($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's weight to realistic figures.
  $wrapper->field_weight->set(rand(1, 25));
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_height($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's height to realistic figures.
  $wrapper->field_height->set(rand(30, 100));
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_muac($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's height to realistic figures.
  $wrapper->field_muac->set(rand(10, 40));
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Add a random order to the entity field query.
 */
function hedley_migrate_query_random_alter($query) {
  $query->orderRandom();
}

/**
 * Resolves the IDs of nodes which value at '$field' is within '$values'.
 *
 * @param string $type
 *   Node type.
 * @param string $field
 *   Name of the field.
 * @param array $values
 *   List of values.
 *
 * @return array
 *   Nodes IDS, or empty array, if none found.
 */
function hedley_migrate_resolve_for_export($type, $field, array $values) {
  if (!$values) {
    return [];
  }

  $query = new EntityFieldQuery();

  $result = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition($field, 'target_id', $values, 'IN')
    ->execute();

  return empty($result['node']) ? [] : array_keys($result['node']);
}

/**
 * Generates Date field for export.
 *
 * @param string $date
 *   Input date.
 *
 * @return string
 *   Date as 'yyyy-mm-dd'. If empty, returns empty string.
 */
function hedley_migrate_export_date_field($date) {
  if (empty($date)) {
    return '';
  }

  return date('Y-m-d', $date);
}

/**
 * Generates DateTime field for export.
 *
 * Supports start and end dates.
 *
 * @param array $date
 *   Input date.
 * @param bool $force_end_date
 *   Whether to force setting end date. If True, sets current date.
 *
 * @return string
 *   Start date as 'yyyy-mm-dd'.
 *   Optional End date (same format), piped by '|' separator.
 */
function hedley_migrate_export_date2_field(array $date, $force_end_date = FALSE) {
  $time1 = strtotime($date['value']);

  if (empty($date['value2'])) {

    if (!$force_end_date) {
      return date('Y-m-d', $time1);
    }

    $date['value2'] = date('Y-m-d');
  }

  $time2 = strtotime($date['value2']);

  return date('Y-m-d', $time1) . '|' . date('Y-m-d', $time2);
}

/**
 * Allocates an image for person, according to age and gender.
 *
 * @param string $gender
 *   Person gender.
 * @param int $birth_date
 *   Person birth date.
 *
 * @return string
 *   The name of allocated image.
 */
function hedley_migrate_allocate_photo_for_person($gender, $birth_date) {
  $is_adult = $birth_date < strtotime('-13 year');

  if ($is_adult) {
    $image_name = $gender == 'male' ? 'father-' . rand(1, 3) : 'mother-' . rand(1, 7);
  }
  else {
    $image_name = $gender == 'male' ? 'baby-boy-' : 'baby-girl-';
    $image_name .= rand(1, 4);
  }

  return $image_name . '.jpg';
}

/**
 * Copies real image into migration module 'images' folder.
 *
 * @param int $fid
 *   Image file ID.
 * @param string $file_name
 *   Image file name.
 *
 * @return string|bool
 *   The name of copied file. FALSE on failure.
 */
function hedley_migrate_export_real_image($fid, $file_name) {
  $file = file_load($fid);
  $destination = drupal_get_path('module', 'hedley_migrate');
  $new_uri = $destination . '/images/' . $file_name;

  $new_url = file_unmanaged_copy($file->uri, $new_uri, 'FILE_EXISTS_RENAME');
  $parts = explode('/', $new_url);

  return $parts ? end($parts) : '';
}

/**
 * Provides a list of Rwandan male first names.
 *
 * @return string[]
 *   List of Rwandan male first names.
 */
function hedley_migrate_male_first_names() {
  return [
    'Ernest',
    'Arsene',
    'Angelo',
    'Yannick',
    'Yvan',
    'Ian',
    'Gaelle',
    'Christian',
    'Jean-Luc',
    'Steven',
    'Henry',
    'Olivier',
    'Jimmy',
    'Rene',
    'Joel',
    'Kyle',
    'Elyse',
    'Avi',
    'Liam',
    'Vivens',
    'Honore',
    'Robert',
    'Patrick',
    'Janvier',
    'Jacques',
    'Jackson',
    'Edwin',
    'Kevin',
    'Fiston',
    'Jean',
    'Pierre',
    'Claude',
    'Pontien',
    'Anaclet',
    'Gratien',
    'Jean',
    'de',
    'Dieu',
    'Anicet',
    'Jean',
    'Jean',
    'D\'Amour',
    'Marcelin',
    'Albert',
    'Charles',
    'Augustin',
    'Bernard',
    'Jean-Paul',
    'Emmanuel',
    'Sylvestre',
    'Prosper',
    'Eric',
    'Paul',
    'Jean-Baptiste',
    'Elias',
    'John',
    'Abdul',
    'Ferdinand',
    'Faustin',
    'Marcel',
    'Christophe',
    'Chrysane',
  ];
}

/**
 * Provides a list of Rwandan female first names.
 *
 * @return string[]
 *   List of Rwandan female first names.
 */
function hedley_migrate_female_first_names() {
  return [
    'Ariella',
    'Ines',
    'Anaelle',
    'Queen',
    'Daniella',
    'Ingrid',
    'Itta',
    'Stecy',
    'Olga',
    'Gossy',
    'Elisa',
    'Ange',
    'Daenah',
    'Benitha',
    'Ketsia',
    'Vanessa',
    'Aurore',
    'Ollia',
    'Orietta',
    'Huguette',
    'Nadege',
    'Nadia',
    'Larissa',
    'Raissa',
    'Vanette',
    'Sylvana',
    'Kendra',
    'Ornella',
    'Eva',
    'Annet',
    'Suzan',
    'Alphonsine',
    'Marcelline',
    'Chantal',
    'Agnes',
    'Pamela',
    'Jeannette',
    'Antoinette',
    'Claudette',
    'Claudine',
    'Berthe',
    'Bellancile',
    'Sylvia',
    'Adeline',
    'Adela',
    'Odette',
    'Julia',
    'Isabelle',
    'Epiphanie',
    'Yvone',
    'Rose',
    'Maria',
    'Anne',
    'Marie',
    'Soline',
    'Ancille',
    'Jacqueline',
    'Clarisse',
    'Anitha',
  ];
}

/**
 * Provides a list of Rwandan second names.
 *
 * @return string[]
 *   List of Rwandan second names.
 */
function hedley_migrate_second_names() {
  return [
    'Iradukunda',
    'Tuyizere',
    'Uwayo',
    'Dukuze',
    'Dusabe',
    'Izabayo',
    'Sugira',
    'Ntwari',
    'Manzi',
    'Mpano',
    'Iraguha',
    'Iragena',
    'Izibyose',
    'Irankunda',
    'Kaneza',
    'Muhuza',
    'Irafasha',
    'Iranzi',
    'Iratuzi',
    'Irumva',
    'Irambona',
    'Rukundo',
    'Mucyo',
    'Gatera',
    'Gatete',
    'Tuyishime',
    'Cyiza',
    'Ineza',
    'Ishimwe',
    'Akuzwe',
    'Teta',
    'Niyonizeye',
    'Izere',
    'Kuzwa',
    'Singizwa',
    'Shimwa',
    'Sine',
    'Mukunde',
    'Mukundwa',
    'Kamikazi',
    'Mwiza',
    'Musabe',
    'Mahoro',
    'Keza',
    'Kazeneza',
    'Irasubiza',
    'Kundwa',
    'Twizere',
    'Niyigena',
    'Tuyishimire',
    'Twizerane',
    'Ingabire',
    'Kaliza',
    'Uwamahoro',
    'Nyiramana',
    'Mukankusi',
    'Uwingabire',
    'Uwase',
    'Yankulije',
    'Uwera',
    'Muhorakeye',
    'Mukamwiza',
    'Uwineza',
    'Uwifashije',
    'Mukasine',
    'Tumukunde',
    'Muragijimana',
    'Mukandamage',
    'Murekeyisoni',
    'Murebwayire',
    'Muramutse',
    'Mukantwari',
    'Tuyisenge',
    'Muragijemariya',
    'Dusabemariya',
    'Mujawamariya',
    'Uwambajimana',
    'Uwingeneye',
    'Yamuragiye',
    'Ukunzwenimana',
    'Habimana',
    'Harelimana',
    'Hafashimana',
    'Mukeshimana',
    'Nkusi',
    'Kamana',
    'Gahire',
    'Uwimana',
    'Gahigi',
    'Abimana',
    'Sekamana',
    'Sibomana',
    'Tuyisabe',
    'Hagenimana',
    'Hakuzimana',
    'Sezibera',
    'Kamali',
    'Nizeyimana',
    'Twizeyimana',
    'Mugisha',
    'Musonera',
    'Shyaka',
    'Karamira',
    'Karambizi',
    'Kagwera',
    'Kabera',
    'Nkurunziza',
    'Nsanzabera',
  ];
}
