<?php

/**
 * @file
 * Populate Hedley content.
 */

use Faker\Generator;

/**
 * Implements hook_migrate_api().
 */
function hedley_migrate_migrate_api() {
  $api = [
    'api' => 2,
    'groups' => [
      'missing' => [
        'title' => t('Missing Data'),
      ],
      'batch_2019_02' => [
        'title' => t('Batch data added 2019/02'),
      ],
      'batch_2019_03' => [
        'title' => t('Batch data added 2019/03'),
      ],
      'batch_2019_04' => [
        'title' => t('Batch data added 2019/04'),
      ],
      'batch_2019_04_2' => [
        'title' => t('Second batch data added 2019/04'),
      ],
      'batch_2019_05' => [
        'title' => t('Batch data added 2019/05'),
      ],
      'batch_2019_05_2' => [
        'title' => t('Second batch data added 2019/05'),
      ],
      'batch_2019_05_3' => [
        'title' => t('Third batch data added 2019/05'),
      ],
    ],
    'migrations' => [
      'HedleyMigrateClinics_2019_02' => [
        'class_name' => 'HedleyMigrateClinics201902',
        'group_name' => 'batch_2019_02',
      ],
      'HedleyMigrateMothers_2019_02' => [
        'class_name' => 'HedleyMigrateMothers201902',
        'group_name' => 'batch_2019_02',
      ],
      'HedleyMigrateChildren_2019_02' => [
        'class_name' => 'HedleyMigrateChildren201902',
        'group_name' => 'batch_2019_02',
      ],
      'HedleyMigrateMothers_2019_03' => [
        'class_name' => 'HedleyMigrateMothers201903',
        'group_name' => 'batch_2019_03',
      ],
      'HedleyMigrateChildren_2019_03' => [
        'class_name' => 'HedleyMigrateChildren201903',
        'group_name' => 'batch_2019_03',
      ],
      'HedleyMigrateMothers_2019_04' => [
        'class_name' => 'HedleyMigrateMothers201904',
        'group_name' => 'batch_2019_04',
      ],
      'HedleyMigrateChildren_2019_04' => [
        'class_name' => 'HedleyMigrateChildren201904',
        'group_name' => 'batch_2019_04',
      ],
      'HedleyMigrateClinics_2019_04' => [
        'class_name' => 'HedleyMigrateClinics201904',
        'group_name' => 'batch_2019_04',
      ],
      'HedleyMigrateMothers_2019_04_2' => [
        'class_name' => 'HedleyMigrateMothers2019042',
        'group_name' => 'batch_2019_04_2',
      ],
      'HedleyMigrateChildren_2019_04_2' => [
        'class_name' => 'HedleyMigrateChildren2019042',
        'group_name' => 'batch_2019_04_2',
      ],
      'HedleyMigrateMothers_2019_05' => [
        'class_name' => 'HedleyMigrateMothers201905',
        'group_name' => 'batch_2019_05',
      ],
      'HedleyMigrateChildren_2019_05' => [
        'class_name' => 'HedleyMigrateChildren201905',
        'group_name' => 'batch_2019_05',
      ],
      'HedleyMigrateMothers_2019_05_2' => [
        'class_name' => 'HedleyMigrateMothers2019052',
        'group_name' => 'batch_2019_05_2',
      ],
      'HedleyMigrateChildren_2019_05_2' => [
        'class_name' => 'HedleyMigrateChildren2019052',
        'group_name' => 'batch_2019_05_2',
      ],
      'HedleyMigrateMothers_2019_05_3' => [
        'class_name' => 'HedleyMigrateMothers2019053',
        'group_name' => 'batch_2019_05_3',
      ],
      'HedleyMigrateChildren_2019_05_3' => [
        'class_name' => 'HedleyMigrateChildren2019053',
        'group_name' => 'batch_2019_05_3',
      ],
      'HedleyMigrateUsers' => [
        'class_name' => 'HedleyMigrateUsers',
      ],
      'HedleyMigrateClinics' => [
        'class_name' => 'HedleyMigrateClinics',
      ],
      'HedleyMigrateCatchmentAreas' => [
        'class_name' => 'HedleyMigrateCatchmentAreas',
      ],
      'HedleyMigrateHealthCenters' => [
        'class_name' => 'HedleyMigrateHealthCenters',
      ],
      'HedleyMigrateMissingHeights' => [
        'class_name' => 'HedleyMigrateMissingHeights',
        'group_name' => 'missing',
      ],
      'HedleyMigrateMissingWeights' => [
        'class_name' => 'HedleyMigrateMissingWeights',
        'group_name' => 'missing',
      ],
      'HedleyMigrateMissingMuacs' => [
        'class_name' => 'HedleyMigrateMissingMuacs',
        'group_name' => 'missing',
      ],
    ],
  ];

  return $api;
}

/**
 * Implements hook_hedley_faker_node_generate().
 */
function hedley_migrate_hedley_faker_node_generate($node, Generator $faker) {
  if (!$node->uid) {
    // User can't be anonymous, get a random user(not admin or anonymous).
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'user')
      ->propertyCondition('uid', [0, 1], 'NOT IN')
      ->range(0, 200)
      ->execute();

    $node->uid = array_rand($result['user']);
  }

  $node->title = $faker->sentence(6);

  switch ($node->type) {
    case 'child':
      _hedley_migrate_preprocess_child($node, $faker);
      break;

    case 'mother':
      _hedley_migrate_preprocess_mother($node, $faker);
      break;

    case 'weight':
      _hedley_migrate_preprocess_weight($node);
      break;

    case 'height':
      _hedley_migrate_preprocess_height($node);
      break;

    case 'muac':
      _hedley_migrate_preprocess_muac($node);
      break;
  }

  // Adjust XSS.
  _hedley_migrate_preprocess_xss('node', $node->type, $node);
}

/**
 * Implements hook_hedley_faker_taxonomy_term_generate().
 */
function hedley_migrate_hedley_faker_taxonomy_term_generate($term, Generator $faker) {
  $term->name = $faker->sentence(2);

  // Adjust XSS.
  _hedley_migrate_preprocess_xss('taxonomy_term', $term->vocabulary_machine_name, $term);
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * We should have at least one entity from each bundle with an XSS label.
 *
 * @param string $entity_type
 *   The entity type to alter.
 * @param string $bundle
 *   The bundle of the entity.
 * @param object $entity
 *   Site entity object.
 */
function _hedley_migrate_preprocess_xss($entity_type, $bundle, $entity) {
  // This global var keeps xss indication for each entity type / bundle.
  $_hedley_devel_generate = &drupal_static(__FUNCTION__, []);

  if (!$entity_info = entity_get_info($entity_type)) {
    return;
  }

  $label_property = $entity_info['entity keys']['label'];

  // Validate the current node type has at least one instance with XSS.
  $xss_is_missing = empty($_hedley_devel_generate[$entity_type][$bundle]);

  $randomly_add_xss = rand() % 2 == 0;
  if (!$xss_is_missing && $randomly_add_xss) {
    return;
  }

  // Indicate the current bundle has an XSS instance.
  $_hedley_devel_generate[$entity_type][$bundle] = TRUE;

  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  // Adjust node's title to include XSS.
  $label = $wrapper->label();
  $wrapper->{$label_property}->set("<script>alert('XSS-{$entity_type}-{$bundle}-{$label}')</script>");

  // Handle all text fields.
  foreach (field_info_instances($entity_type, $bundle) as $field_name => $field) {
    $field = field_info_field($field_name);
    if ($field['module'] != 'text') {
      continue;
    }

    // Handle each column.
    foreach ($field['columns'] as $column => $column_info) {
      if ($column == 'format') {
        // We should not allow full html format for XSS attempt.
        if ($wrapper->{$field_name}->format->value() == 'full_html') {
          $wrapper->{$field_name}->format->set('filtered_html');
        }
      }
      else {
        $wrapper->{$field_name}->{$column}->set("<script>alert('XSS-{$entity_type}-{$bundle}-{$field_name}')</script>");
      }
    }
  }
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 * @param \Faker\Generator $faker
 *   The faker generator object.
 */
function _hedley_migrate_preprocess_child($node, Generator $faker) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->title->set($faker->firstName);

  $_hedley_devel_generate = &drupal_static(__FUNCTION__, FALSE);

  if ($_hedley_devel_generate) {
    return;
  }
  $_hedley_devel_generate = TRUE;

}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 * @param \Faker\Generator $faker
 *   The faker generator object.
 */
function _hedley_migrate_preprocess_mother($node, Generator $faker) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->title->set($faker->firstNameFemale);
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_weight($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's weight to realistic figures.
  $wrapper->field_weight->set(rand(1, 60));
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_height($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's height to realistic figures.
  $wrapper->field_height->set(rand(30, 160));
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_muac($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's height to realistic figures.
  $wrapper->field_muac->set(rand(10, 40));
}
