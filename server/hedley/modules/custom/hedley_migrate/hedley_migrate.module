<?php

/**
 * @file
 * Populate Hedley content.
 */

/**
 * Implements hook_migrate_api().
 */
function hedley_migrate_migrate_api() {
  $migrations = array(
    // Users.
    'HedleyMigrateUsers',
  );

  $api['api'] = 2;
  foreach ($migrations as $migration) {
    $api['migrations'][$migration] = array('class_name' => $migration);
  }

  return $api;
}

/**
 * Grabs the Migrate Content context.
 */
function drush_hedley_migrate_pre_generate_content() {
  $generate = &drupal_static('hedley_migrate_generate');
  $generate = TRUE;
}

/**
 * Grabs the Migrate Terms context.
 */
function drush_hedley_migrate_pre_generate_terms() {
  $generate = &drupal_static('hedley_migrate_generate');
  $generate = TRUE;
}

/**
 * Implements hook_node_presave().
 *
 * Alters Devel Generate-based content to match business logic constraints.
 */
function hedley_migrate_node_presave($node) {
  if (!_hedley_migrate_in_generate_content()) {
    return;
  }

  if (!$node->uid) {
    // User can't be anonymous, get a random user(not admin or anonymous).
    $query = new EntityFieldQuery();
    $result = $query
      ->entityCondition('entity_type', 'user')
      ->propertyCondition('uid', [0, 1], 'NOT IN')
      ->range(0, 200)
      ->execute();

    $node->uid = array_rand($result['user']);
  }

  // Adjust XSS.
  _hedley_migrate_preprocess_xss('node', $node);

  switch ($node->type) {
    case 'weight':
      _hedley_migrate_preprocess_weight($node);
      break;

    case 'height':
      _hedley_migrate_preprocess_height($node);
      break;

    case 'muac':
      _hedley_migrate_preprocess_muac($node);
      break;
  }
}

/**
 * Implements hook_taxonomy_term_presave().
 *
 * Alters Devel Generate-based terms to match business logic constraints.
 */
function hedley_migrate_taxonomy_term_presave($term) {
  if (!_hedley_migrate_in_generate_content()) {
    return;
  }

  // Adjust XSS.
  _hedley_migrate_preprocess_xss('taxonomy_term', $term);
}

/**
 * Helper function to detect the current state for generated content via Drush.
 *
 * @return bool
 *   Returns TRUE if current state is within generate-content Drush command.
 */
function _hedley_migrate_in_generate_content() {
  if (!drupal_is_cli()) {
    return FALSE;
  }

  $generate = drupal_static('hedley_migrate_generate');
  if (!$generate) {
    // Not in a generate-content Drush command.
    return FALSE;
  }

  return TRUE;
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * We should have at least one entity from each bundle with an XSS label.
 *
 * @param string $entity_type
 *   The entity type to alter.
 * @param object $entity
 *   Site entity object.
 */
function _hedley_migrate_preprocess_xss($entity_type, $entity) {
  // This global var keeps xss indication for each entity type / bundle.
  global $_hedley_devel_generate;

  switch ($entity_type) {
    case 'node':
      $bundle = $entity->type;
      $label_property = 'title';
      break;
    case 'taxonomy_term':
      $bundle = $entity->vocabulary_machine_name;
      $label_property = 'name';
      break;

    default:
      // Return for unknown entity type.
      return;
  }

  // Validate the current node type has at least one instance with XSS.
  $xss_is_missing = empty($_hedley_devel_generate[$entity_type][$bundle]);

  $randomly_add_xss = rand() % 2 == 0;
  if (!$xss_is_missing && $randomly_add_xss) {
    return;
  }

  // Indicate the current bundle has an XSS instance.
  $_hedley_devel_generate[$entity_type][$bundle] = TRUE;

  $wrapper = entity_metadata_wrapper($entity_type, $entity);

  // Adjust node's title to include XSS.
  $label = $wrapper->label();
  $wrapper->{$label_property}->set("<script>alert('XSS-{$entity_type}-{$bundle}-{$label}')</script>");

  // Special case for 'examination' node type.
  if ($entity_type == 'node' && $wrapper->getBundle() == 'examination') {
    // Adjust node's body to include XSS.
    $wrapper->body->value->set("<script>alert('XSS-node-{$bundle}-body')</script>");
  }
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_weight($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's weight to realistic figures.
  $wrapper->field_weight->set(rand(0.5, 60));
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_height($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's height to realistic figures.
  $wrapper->field_height->set(rand(30, 160));
}

/**
 * Alters devel generated Sites to satisfy business logic.
 *
 * @param object $node
 *   Site node object.
 */
function _hedley_migrate_preprocess_muac($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Adjust children's height to realistic figures.
  $wrapper->field_middle_circumference->set(rand(10, 40));
  $wrapper->field_upper_circumference->set(rand(10, 40));
  $wrapper->field_arm_circumference->set(rand(5, 10));
}
