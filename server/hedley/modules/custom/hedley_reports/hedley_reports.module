<?php

/**
 * @file
 * Code for the Hedley Reports feature.
 */

include_once 'hedley_reports.features.inc';

/**
 * @file
 * Code for the Hedley Reports feature.
 */

define('HEDLEY_REPORTS_CALCULATE_AGGREGATED_DATA', 'hedley_reports_calculate_reports_data');

/**
 * Implements hook_menu().
 */
function hedley_reports_menu() {
  $items['admin/reports/aggregated-reports'] = array(
    'title' => 'Aggregated Reports',
    'description' => 'View Aggregated Reports',
    'page callback' => 'hedley_reports_aggregated_callback_menu',
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/all'] = array(
    'title' => 'Global report',
    'description' => 'View global report',
    'page callback' => 'hedley_reports_aggregated_callback_global',
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/demographics/%'] = array(
    'title' => 'Report for province',
    'description' => 'View report for province',
    'page callback' => 'hedley_reports_aggregated_callback_province',
    'page arguments' => [4],
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/demographics/%/%'] = array(
    'title' => 'Report for district',
    'description' => 'View report for district',
    'page callback' => 'hedley_reports_aggregated_callback_district',
    'page arguments' => [4, 5],
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/demographics/%/%/%'] = array(
    'title' => 'Report for sector',
    'description' => 'View report for sector',
    'page callback' => 'hedley_reports_aggregated_callback_sector',
    'page arguments' => [4, 5, 6],
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/demographics/%/%/%/%'] = array(
    'title' => 'Report for cell',
    'description' => 'View report for cell',
    'page callback' => 'hedley_reports_aggregated_callback_cell',
    'page arguments' => [4, 5, 6, 7],
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/demographics/%/%/%/%/%'] = array(
    'title' => 'Report for village',
    'description' => 'View report for village',
    'page callback' => 'hedley_reports_aggregated_callback_village',
    'page arguments' => [4, 5, 6, 7, 8],
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  $items['admin/reports/aggregated-reports/health-center/%'] = array(
    'title' => 'Report for health center',
    'description' => 'View report for health center',
    'page callback' => 'hedley_reports_aggregated_callback_health_center',
    'page arguments' => [4],
    'access callback' => 'hedley_reports_aggregated_reports_report_access',
  );

  return $items;
}

/**
 * Grants access to Aggregated Reports viewers, superuser and administrators.
 *
 * @return bool
 *   TRUE if the user has access, FALSE otherwise.
 */
function hedley_reports_aggregated_reports_report_access() {
  // @todo: do we need new role?
  $data_mananger_role = user_role_load_by_name('Data Manager');

  return user_has_role($data_mananger_role->rid) || hedley_admin_administrators_access();
}

/**
 * Implements hook_node_insert().
 */
function hedley_reports_node_insert($node) {
  // Generate initial Reports data for newly created person.
  // We need this to properly count 'children under 2'.
  if ($node->type == 'person') {
    hedley_reports_trigger_recalculation_for_created_person($node);
  }
}

/**
 * Implements hook_node_update().
 */
function hedley_reports_node_update($node) {
  if ($node->type == 'person') {
    hedley_reports_trigger_recalculation_for_edited_person($node);
  }
}

/**
 * Implements hook_advanced_queue_info().
 */
function hedley_reports_advanced_queue_info() {
  $items[HEDLEY_REPORTS_CALCULATE_AGGREGATED_DATA] = [
    'label' => t('Calculate Aggregated Reports data'),
    'worker callback' => 'hedley_reports_calculate_aggregated_data_worker',
    'groups' => [
      'hedley',
    ],
    // The number of seconds to retry after.
    'retry after' => 120,
    // The maximum number of attempts after a failure.
    'max attempts' => 3,
  ];

  return $items;
}

/**
 * Advanced queue worker; Calculate aggregated Reports data for person.
 *
 * @param object $queue_item
 *   The item object to process.
 *
 * @return array
 *   Array indicating if the process succeeded, or an array with
 *   "status" and "result" keys.
 */
function hedley_reports_calculate_aggregated_data_worker($queue_item) {
  if (!$person_id = $queue_item->data['person_id']) {
    return [
      'status' => ADVANCEDQUEUE_STATUS_FAILURE,
      'result' => t('Does not have Person Node ID.'),
    ];
  }

  try {
    $person = node_load($person_id);
    hedley_reports_calculate_aggregated_data_for_person($person);
  }
  catch (Exception $e) {
    return [
      'status' => ADVANCEDQUEUE_STATUS_FAILURE_RETRY,
      'result' => $e->getMessage(),
    ];
  }

  $params = [
    '@nid' => $person_id,
  ];
  return [
    'status' => ADVANCEDQUEUE_STATUS_SUCCESS,
    'result' => t('Aggregated Reports data has been calculated for person ID: @nid', $params),
  ];
}

/**
 * Callback for Elm application of administrative division selection.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_menu() {
  $site = variable_get('hedley_general_site_name', '');

  $health_centers_data = [];
  $health_center_ids = hedley_health_center_get_all_health_centers_ids();
  $nodes = node_load_multiple($health_center_ids);
  foreach ($nodes as $node) {
    $health_centers_data[] = [
      'id' => $node->nid,
      'name' => $node->title,
    ];
  }

  return hedley_general_build_elm_app('reports-menu', [
    'site' => $site,
    'health_centers' => $health_centers_data,
  ]);
}

/**
 * Triggers calculation of Reports data, for newly created person.
 *
 * @param object $node
 *   The node object of a person.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_reports_trigger_recalculation_for_created_person($node) {
  // If we got this far, schedule generating NCDA data using AQ.
  hedley_general_add_task_to_advanced_queue_by_id(HEDLEY_REPORTS_CALCULATE_AGGREGATED_DATA, $node->nid, [
    'person_id' => $node->nid,
  ]);
}

/**
 * Triggers recalculation of person's Reports data, when edited.
 *
 * Recalculation is required only when birthdate is edited.
 * Note: Currently, editing geo fields of person is not allowed.
 *
 * @param object $node
 *   The node object of a person.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_reports_trigger_recalculation_for_edited_person($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper_orig = entity_metadata_wrapper('node', $node->original);

  $birth_date = $wrapper->field_birth_date->value();
  $birth_date_orig = $wrapper_orig->field_birth_date->value();

  if ($birth_date == $birth_date_orig) {
    return;
  }

  hedley_general_add_task_to_advanced_queue_by_id(HEDLEY_REPORTS_CALCULATE_AGGREGATED_DATA, $node->nid, [
    'person_id' => $node->nid,
  ]);
}

/**
 * Generate raw data for reports, and store in field on person node.
 *
 * @param object $person
 *   Person node for which Reports data is generated.
 *
 * @return bool
 *   True, if data was calculated for person.
 *
 * @throws EntityMetadataWrapperException
 */
function hedley_reports_calculate_aggregated_data_for_person($person) {
  $birth_date = strtotime($person->field_birth_date[LANGUAGE_NONE][0]['value']);
  if (empty($birth_date)) {
    // We must know the birthdate to be able to present reports data.
    return FALSE;
  }
  $data['created'] = date("Y-m-d", $person->created);
  $data['birth_date'] = date("Y-m-d", $birth_date);
  $data['gender'] = $person->field_gender[LANGUAGE_NONE][0]['value'];

  $encoded_data = json_encode($data);
  $person->field_reports_data[LANGUAGE_NONE][0]['value'] = $encoded_data;
  node_save($person);

  return TRUE;
}

/**
 * Callback for aggregated Reports elm application of all patients.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_global() {
  return hedley_reports_build_results_app();
}

/**
 * Callback for aggregated Reports elm application of province.
 *
 * @param int $province
 *   The province ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_province($province) {
  return hedley_reports_build_results_app($province);
}

/**
 * Callback for aggregated Reports elm application of district.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_district($province, $district) {
  return hedley_reports_build_results_app($province, $district);
}

/**
 * Callback for aggregated Reports elm application of sector.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_sector($province, $district, $sector) {
  return hedley_reports_build_results_app($province, $district, $sector);
}

/**
 * Callback for aggregated Reports elm application of cell.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_cell($province, $district, $sector, $cell) {
  return hedley_reports_build_results_app($province, $district, $sector, $cell);
}

/**
 * Callback for aggregated Reports elm application of village.
 *
 * @param int $province
 *   The province ID.
 * @param int $district
 *   The district ID.
 * @param int $sector
 *   The sector ID.
 * @param int $cell
 *   The cell ID.
 * @param int $village
 *   The village ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_village($province, $district, $sector, $cell, $village) {
  return hedley_reports_build_results_app($province, $district, $sector, $cell, $village);
}

/**
 * Callback for aggregated Reports elm application of health center.
 *
 * @param int $health_center
 *   The health center ID.
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_aggregated_callback_health_center($health_center) {
  return hedley_reports_build_results_app(NULL, NULL, NULL, NULL, NULL, $health_center);
}

/**
 * Build results app for aggregated Reports.
 *
 * Based on input fields, determines administrative divisions for which
 * data is provided.
 *
 * @param int|null $province
 *   The province ID (optional).
 * @param int|null $district
 *   The district ID (optional).
 * @param int|null $sector
 *   The sector ID (optional).
 * @param int|null $cell
 *   The cell ID (optional).
 * @param int|null $village
 *   The village ID (optional).
 * @param int|null $health_center
 *   The health center ID (optional).
 *
 * @return string
 *   The HTML markup for the Elm application.
 */
function hedley_reports_build_results_app($province = NULL, $district = NULL, $sector = NULL, $cell = NULL, $village = NULL, $health_center = NULL) {
  $data = [];

  if (empty($province)) {
    if (empty($health_center)) {
      $data['entity_name'] = 'Global';
      $data['entity_type'] = 'global';
    }
    else {
      $data['entity_name'] = $health_center;
      $data['entity_type'] = 'health-center';
    }
  }
  elseif (empty($district)) {
    $data['entity_name'] = $province;
    $data['entity_type'] = 'province';
  }
  elseif (empty($sector)) {
    $data['entity_name'] = $district;
    $data['entity_type'] = 'district';
  }
  elseif (empty($cell)) {
    $data['entity_name'] = $sector;
    $data['entity_type'] = 'sector';
  }
  elseif (empty($village)) {
    $data['entity_name'] = $cell;
    $data['entity_type'] = 'cell';
  }
  else {
    $data['entity_name'] = $village;
    $data['entity_type'] = 'village';
  }

  $data['site'] = variable_get('hedley_general_site_name', '');

  if (in_array($data['entity_type'], ['sector', 'cell', 'village'])) {
    // For smaller data sets, we generate results on fly.
    $data['results'] = hedley_reports_generate_results_data($province, $district, $sector, $cell, $village, $health_center);
  }
  else {
    $data['results'] = hedley_reports_load_results_data($data['entity_type'], $province, $district, $health_center);
  }

  return hedley_general_build_elm_app('reports-results', $data);
}

/**
 * Generate aggregated Reports data which is stored on person nodes.
 *
 * @param int|null $province
 *   The province ID.
 * @param int|null $district
 *   The district ID.
 * @param int|null $sector
 *   The sector ID.
 * @param int|null $cell
 *   The cell ID.
 * @param int|null $village
 *   The village ID.
 * @param int|null $health_center
 *   The health center ID.
 *
 * @return array
 *   An array of generated data.
 */
function hedley_reports_generate_results_data($province, $district, $sector, $cell, $village, $health_center) {
  $base_query = new EntityFieldQuery();
  $base_query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'person')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_reports_data', 'value', NULL, 'IS NOT NULL')
    ->addTag('exclude_deleted');

  if (!empty($province)) {
    $base_query->fieldCondition('field_province', 'value', $province);
  }

  if (!empty($district)) {
    $base_query->fieldCondition('field_district', 'value', $district);
  }

  if (!empty($sector)) {
    $base_query->fieldCondition('field_sector', 'value', $sector);
  }

  if (!empty($cell)) {
    $base_query->fieldCondition('field_cell', 'value', $cell);
  }

  if (!empty($village)) {
    $base_query->fieldCondition('field_village', 'value', $village);
  }

  if (!empty($health_center)) {
    $base_query->fieldCondition('field_shards', 'target_id', $health_center);
  }

  $data = [];
  $nid = 0;
  $batch = 400;
  while (TRUE) {
    // Free up memory.
    drupal_static_reset();

    $query = clone $base_query;
    if ($nid) {
      $query->propertyCondition('nid', $nid, '>');
    }

    $result = $query
      ->range(0, $batch)
      ->execute();

    if (empty($result['node'])) {
      // No more items left.
      break;
    }

    $ids = array_keys($result['node']);
    $nodes = node_load_multiple($ids);
    foreach ($nodes as $node) {
      $json_data = $node->field_reports_data[LANGUAGE_NONE][0]['value'];
      if (empty($json_data)) {
        continue;
      }

      $data[] = json_decode($json_data);
    }

    $nid = end($ids);
  }

  return $data;
}

/**
 * Loads data in scope, stored at Report Data node.
 *
 * @param string $scope
 *   Scope of data to load.
 * @param int|null $province
 *   The province ID.
 * @param int|null $district
 *   The district ID.
 * @param int|null $health_center
 *   The health center ID.
 *
 * @return array
 *   Stored data.
 */
function hedley_reports_load_results_data($scope, $province = NULL, $district = NULL, $health_center = NULL) {
  $node_id = hedley_reports_load_results_data_node($scope, $province, $district, $health_center);
  if (!$node_id) {
    return [];
  }

  $node = node_load($node_id);
  $file = file_load($node->field_data_file[LANGUAGE_NONE][0]['fid']);
  if (!$file) {
    return [];
  }

  // Get the real path of the file.
  $file_path = drupal_realpath($file->uri);
  // Open the gzipped file and read its contents.
  $gz_fp = gzopen($file_path, 'r');
  if (!$gz_fp) {
    return [];
  }

  $data = '';
  while (!gzeof($gz_fp)) {
    $data .= gzread($gz_fp, 4096);
  }
  gzclose($gz_fp);

  return json_decode($data);
}

/**
 * Generates data in scope and creates/updates Report Data node.
 *
 * @param string $scope
 *   Scope of data to generate.
 * @param int|null $province
 *   The province ID.
 * @param int|null $district
 *   The district ID.
 * @param int|null $health_center
 *   The health center ID.
 */
function hedley_reports_create_or_update_results_data_node($scope, $province = NULL, $district = NULL, $health_center = NULL) {
  $timestamp = time();
  $data = hedley_reports_generate_results_data($province, $district, NULL, NULL, NULL, $health_center);
  $data_file_id = hedley_reports_create_data_file($data, $scope, $timestamp);
  $node_id = hedley_reports_load_results_data_node($scope, $province, $district, $health_center);
  if (!$node_id) {
    // Create the Report Data node.
    $node = new stdClass();
    $node->type = 'report_data';
    node_object_prepare($node);
    $node->title = "Report Data $timestamp";
    $node->uid = 1;
    $node->status = NODE_PUBLISHED;
    $node->language = LANGUAGE_NONE;
    $node->field_data_scope[LANGUAGE_NONE][0]['value'] = $scope;
    // Attach the file to the node's file field.
    $node->field_data_file[LANGUAGE_NONE][0] = [
      'fid' => $data_file_id,
      'display' => 1,
    ];
    if (!empty($province)) {
      $node->field_province[LANGUAGE_NONE][0]['value'] = $province;
    }
    if (!empty($district)) {
      $node->field_district[LANGUAGE_NONE][0]['value'] = $district;
    }
    if (!empty($health_center)) {
      $node->field_health_center[LANGUAGE_NONE][0]['target_id'] = $health_center;
    }
  }
  else {
    // Update the Report Data node.
    $node = node_load($node_id);
    $old_file = file_load($node->field_data_file[LANGUAGE_NONE][0]['fid']);
    if ($old_file) {
      // Delete the old file.
      file_delete($old_file, TRUE);
    }
    // Attach new file.
    $node->field_data_file[LANGUAGE_NONE][0] = [
      'fid' => $data_file_id,
      'display' => 1,
    ];
  }
  // Save the node.
  node_save($node);
}

/**
 * Loads Report Data node which stores data defined at scope.
 *
 * @param string $scope
 *   Scope of data to generate.
 * @param int|null $province
 *   The province ID.
 * @param int|null $district
 *   The district ID.
 * @param int|null $health_center
 *   The health center ID.
 *
 * @return int|false
 *   Report Data node ID, or False, if not found.
 */
function hedley_reports_load_results_data_node($scope, $province = NULL, $district = NULL, $health_center = NULL) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'report_data')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_data_scope', 'value', $scope)
    // There can be only single node.
    ->range(0, 1);

  if (!empty($province)) {
    $query->fieldCondition('field_province', 'value', $province);
  }

  if (!empty($district)) {
    $query->fieldCondition('field_district', 'value', $district);
  }

  if (!empty($health_center)) {
    $query->fieldCondition('field_health_center', 'target_id', $health_center);
  }

  $result = $query->execute();

  return empty($result['node']) ? FALSE : key($result['node']);
}

/**
 * Creates a file with provided data as a content.
 *
 * @param array $data
 *   Data to write into file.
 * @param int $timestamp
 *   Time when data was generated (set as part of file name).
 *
 * @return int
 *   Created file ID.
 */
function hedley_reports_create_data_file(array $data, $timestamp) {
  // Create a temporary file with the content.
  $file_content = json_encode($data);
  $file_path = 'private://report-data-' . $timestamp . '.txt.gz';
  $file_uri = file_unmanaged_save_data($file_content, $file_path, FILE_EXISTS_REPLACE);
  // Compress the content and save it to a .gz file.
  $gz_file_path = hedley_reports_gz_compress_file($file_content, $file_path);
  // Create the file object and save it.
  $file = (object) array(
    'uid' => 1,
    'filename' => drupal_basename($file_uri),
    'uri' => $gz_file_path,
    'filemime' => 'application/gzip',
    'status' => NODE_PUBLISHED,
    'display' => 1,
    'timestamp' => REQUEST_TIME,
  );
  file_save($file);

  return $file->fid;
}

/**
 * Helper function to compress file content using gzip.
 *
 * @param string $data
 *   The data to be compressed.
 * @param string $file_path
 *   The file path where the compressed data will be saved.
 *
 * @return string
 *   The path to the gzipped file.
 */
function hedley_reports_gz_compress_file($data, $file_path) {
  $gz_fp = gzopen($file_path, 'w9');
  gzwrite($gz_fp, $data);
  gzclose($gz_fp);
  return $file_path;
}
